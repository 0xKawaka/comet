{
  "transpiled": true,
  "noir_version": "1.0.0-beta.4+0000000000000000000000000000000000000000",
  "name": "Lending",
  "functions": [
    {
      "name": "_compute_collateral_debt_value",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "market_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "owner",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 128
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8945853978429536226": {
            "error_kind": "string",
            "string": "Function _compute_collateral_debt_value can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "_compute_collateral_debt_value"
      ]
    },
    {
      "name": "update_accumulators",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "market_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "asset_address",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "12348881442450494403": {
            "error_kind": "string",
            "string": "Function _compute_utilization_rate can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17134621154673181869": {
            "error_kind": "string",
            "string": "Function _compute_borrow_rate can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "update_accumulators"
      ]
    },
    {
      "name": "liquidate_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "market_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "collateral_asset",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "debt_asset",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "user",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "debt_to_cover",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "1VzbbuM2EP0XP/uBw7mQs79SFAsncRYGDCdwkgJFsP9eybUkr2OFqdbHFV8CK5gz5wxvGl7E98XD+u7tx/fN7vHpZfHtj/fF9ul+9bp52jVP7z+Xi7v9Zrvd/Ph++u9FaP+QyQHw8rzatc8vr6v96+IbcRRdLta7h/Y359A4edxs181TaH5/tA8xduZBYm/t6YKxeEhHY3Gy3tj0gnEWyUfjLCanxn8uG/l+HfnunTmR305+ulLpa+5LPxdKnzR18smYP5fvynI09gZ3Lj/Ha8un+Iv8lsTDLUj0IolbD/Kce5Aytl3EcDlmVzuCGov4uRzjjsB0qGW3f/0r1j+B9RNav2P9RwH7B+tnsH7OWP/CYP8J618j2D9YvxHYP3h8MHD/SuD+lX6/fzV12OVM0U5Sgyb/O1BkxlPgo3B8FJ7QFBwingIfBeGjIINTRMJTKJyCA57iBlE4nAKcabBgMyUGZxqsYP0G1m9g/QmsP2EzPc5g/dmw/j2A/QvYP7Z9SmCwf3heIfi8QggfRcRHEeHZkTDhKfBRCD4KgWdHogFPIXgKeI4nho/C4FNdAWcaAs40JBPYv4L9Y9eUxMH6Hatfg4D9g/UTg/1j+5dGAvvHtk/lAPYPfwsofr1CBR+F4KNQxlPA38hq+CjweYWmiKeAT680E54CPjFRx0fhiqfAvqkNnGlYwK7JGEWwf+yam0Ww/gjWzwT2D9YvAewf3L/AeyIG3hMx8OkLu8LpC8qhOxhImfIHBnALTeAeBl6rsAzuAeC1BAOvJaRAYP9l/eaFHmDSGZPZcPxUjgyOZiCBM+TfZ6BI/XFjiqKD+aXDyRyEjtYc9JcztK2gmGYmiOPcBM2tykRnJugLuxo3FmQzE2Rza9T2P5SQd9YcU+EsPwVKofMdIp+f5k9fyFbmrV/r1p9D5forL3+//UuJ+w93mE++iBrRn5h7/UnP9edw+wFRuCtRFkkl/Tn0aVzIHD7ov/34KUSD/lzS79R/yhVc87l+CpXr18r1e936v/C11bz1V17+QpXrr3z81MrLXysvf6u8/K3y8k+V5w+p8vwhVf7++sKnjHPW72FO489B0JwadCtoVjOMgyC5uSCN3Y4ea3HKSezDdRoS+YN+r1t/5Mr157r1c+XlL9dYMuIsA8fpfufhzhq/yk5GiSPjOYzhHBRGdupEepjoUOnR7AizSbCRGW8RptNgPgk28vFNEXa5SQxn9sjisIQqR9TIplIJlaag8hQuGrlz6dMt8gYlU1A0JS4aOSFfQI2cey+hJnHJJC6ZxuVTUCMnw0uoSfU1Mu8voWwKKk1qvSMzywJq5Cx0CZWnoEYuYCmhfAJq7Fa0EmoSF/EkVPqvqJ/N01+r/WZ1t10fb4N8fNvdn1wO+fr38/rsnsjn/dP9+uFtv25vjBwui2yHuihhGV0bNW1hRbclaziMus1jU8fLpsYOVdA+ujSP1mhodPwD",
      "brillig_names": [
        "liquidate_public"
      ]
    },
    {
      "name": "get_total_deposited_assets",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "market_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "asset_address",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 128
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "7b3djuw6dqX7LnVdF+I/2a/SODBst7tRQMFu2O4DHDT87ifWipQicqckZmozYk6S3429qkqKIL8xU5pjUEH937/8j3/5p//zv/7hb//6P//tP/7y3/77//3L3//tn//xP//2b/96+0//97/++pd/+ve//f3vf/tf//D8X/9l+fV/jDW/T/iP//2P//rrP//Hf/7jv//nX/6bWbxxf/3Lv/zr//j972RvH/I///b3f/n1n5b/+uuX41OOH0fnxW/HxrRzaLDh49AQlsfHevtf/89fb8OxLYaTXVqHE8r5cLwrH4f6mL8OxzUZTvbrcEo+H05cVjrRxq/D8S2GU6z9OLq4UBlOXj4OTcuOWGF3OC4vK37jSoyV4diymI/D3fLp6I9viW/5lvSWb8lv+Zbyjm9xy1u+xbzlW+xbvsW95Vv8W77lLX/77i1/++4tf/vuLX/77i1/+/4tf/v+LX/7/i1/+/4tf/v+LX/7/i1/+/4tf/v+LX/7/i1/+/4tf/vhLX/74S1/++Etf/vhLX/74S1/++Etf/vhLX/74S1/++Etf/vhLX/78S1/+/Etf/vxLX/78S1/+/Etf/vxLX/78S1/+/Etf/vxLX/78S1/++ktf/vpLX/76S1/++ktf/vpLX/76S1/++ktf/vpLX/76S1/++ktf/v5LX/7+S1/+/ktf/v5LX/7+S1/+/ktf/v5LX/7ucnfvltC3L6lpKejw/1b8lu+pbzjW8rylm8xb/kW+5ZvafK3725reeu3WFs+fcvXo2+WeR3TzT89LwGWvVXPvC4YBvc0jnD/GyleYPx5W/m83QdyZfwhpm0VOWa3HR3ifQKh9wnE3ieQep9A7n0Cpe8J2GXpfQKm9wnY3ifgep9A53diu+i/Eye/Nk4hBf88gR13EbYnrWxI5vzgHNZh5PQ0Q79rW8z2yJq9rX1tR3u7d3B+WJxPh/4mrr91GI24/l5nNOL6m7PRiOvvJgcjbvS3v6MR19+vj0Zcv8EYjbh+RzQacQ/xNxPHc76bOJ7z3cTxnO8mjud8N3E855uJWzznu4njOd9NHM/5buJ4zncT9xB/M3E857uJ4znfTRzP+W7ieM53E8dzvpm4w3O+mzie893E8ZzvJt6D5zQP4vkcosnbL05Msa7y0caXdVM7E562g/t4JrPNBlGDsunBx0mx6cFxSbHpwRtJsenBxUix6cFvCLHxPTgDKTY99PBSbHrotqXY0Bcfs/GwOWRDX3zMhr74mA198TEb+uJjNvTFh2wCffExG/riYzb0xcds6IuP2XjYHLKhLz5mQ198zIa++JgNffExG/riQzaRvviYDX3xMRv64mM29MXHbDxsDtnQFx+zoS8+ZkNffMyGvviYDX3xIZtEX3zMhr74mA198TEb+uJjNh42h2zoi4/Z0Bcfs6EvPmZDX3zMhr74kE2mLz5mQ198zIa++JgNffExGw+bQzb0xcds6IuP2dAXH7OhLz5mQ198yKbQFx+zoS8+ZkNffMxm5r7YlriycYtZqiST30iap8/OeyOJS/44ONonfDncsXuwS2CfuZsXxD6zURDEPrMHEcQ+s70RxD6zcxLD7jp4G/KQ2Gf2e4LYZ7aSgthxqSLYPdglsONSRbDjUkWwz+xSb3e2tGEvtYEYk+z24aYsT59u7KtlmtnVdiTTzC64H5m6eIk6MnXx5nVk6uJ17cjUxTvekamLF8MjUxdvk0emLl5Bj0xdvLcembp42T0yGVKIHmSypBBdyEQK8W2Z7BLWkRh7m3FFJnuT9eNwa/ITlJz3jk7LdnSyj2ep410mUoguZCKF6EImj0w9yEQK0YVMpBBdyEQK0YVMpBBdyEQK0YNMjhSiC5lIIbqQiRSiC5lIIbqQySNTDzKRQnxfJpfzJpP3tYUMG7ex2BjD4+jidhHa9cOdCc9Hm72jXdpG7or7dPRvWUkthpSVlGNIWUlFhpSVFGVEWT2py5CyktIMKSupzpCykgINKatH1hFlJWUaUlZSpiFlJWUaUlZSpiFlJWUaUdZAyjSkrKRMQ8pKyjSkrKRMQ8rqkXVEWUmZhpSVlGlIWUmZhpSVlGlIWUmZRpQ1kjINKSsp05CykjINKSsp05CyemQdUVZSpiFlJWUaUlZSpiFlJWUaUlZSphFlTaRMQ8pKyjSkrKRMQ8pKyjSkrB5ZR5SVlGlIWUmZhpSVlGlIWUmZhpSVlGlEWTMp05CykjINKSsp05CykjINKatH1hFlJWUaUlZSpiFlJWUaUlZSpiFlJWUaUdZCyjSkrKRMQ8pKyjSkrKRMQ8rqkXVEWUmZhpSVlGlIWUmZhpSVlGlIWUmZBpTVL6RMQ8pKyjSkrKRMQ8pKyjSkrB5ZR5SVlGlIWUmZhpSVlGlIWUmZhpSVlGlEWQ0p05CykjINKSsp05CykjINKatH1hFlJWUaUlZSpiFlJWUaUlZSpiFlJWUaUVZLyjSkrKRMQ8pKyjSkrKRMQ8rqkXVEWUmZhpSVlGlIWUmZhpSVlGlIWUmZRpTVkTINKSsp05CykjINKSsp05CyemQdUVZSpiFlJWUaUlZSpiFlJWVSIqv1YUOYa7L6sskalqV8lZWUaURZPSnTkLKSMg0pKynTkLKSMg0pq0fWEWUlZRpSVlKmIWUlZRpSVlKmIWUlZRpR1kDKNKSspExDykrKNKSspExDyuqRdURZSZmGlJWUaUhZSZmGlJWUaUhZSZlGlDWSMg0pKynTkLKSMg0pKynTkLJ6ZB1RVlKmIWUlZRpSVlKmIWUlZRpSVlKmEWVNpExDykrKNKSspExDykrKNKSsHllHlJWUaUhZSZmGlJWUaUhZSZmGlJWUaURZMynTkLKSMg0pKynTkLKSMg0pq0fWEWUlZRpSVlKmIWUlZRpSVlKmIWUlZRpR1kLKNKSspExDykrKNKSspExDyuqRdURZSZmGlJWUaUhZSZmGlJWUaUhZSZkGlPX23yHriLKSMg0pKynTkLKSMg0pq0fWEWUlZRpSVlKmIWUlZRpSVlKmIWUlZRpRVkPKNKSspExDykrKNKSspExDyuqRdURZSZmGlJWUaUhZSZmGlJWUaUhZSZlGlNWSMg0pKynTkLKSMg0pKynTkLJ6ZB1RVlKmIWUlZRpSVlKmIWUlZRpSVlKmEWV1pExDykrKNKSspExDykrKNKSsHllHlJWUaUhZSZmGlJWUaUhZSZmGlJWUaURZPSnTkLKSMg0pKynTkLKSMg0pq0fWEWUlZRpSVlKmIWUlZRpSVlKmIWUlZRpR1kDKNKSspExDykrKNKSspExDyuqRdURZSZmGlJWUaUhZSZmGlJWUaUhZSZlGlDWSMg0pKynTkLKSMg0pKynTkLJ6ZB1RVlKm78saF7PJmp4Hvivr7SPNBuVZ1oMiyMtaBMmU2tF2KevR1qZPR/+WlZRpSFlJmYaUlZRpSFlJmUaUNZEyDSkrKdOQspIyDSkrKdOQsnpkHVFWUqYhZSVlGlJWUqYhZSVlGlJWUqYuZfXOrUf7XFsijN5+HBzjowRc3JtleSw+Lk/D2D84mu3oaMNSOdokE7eqSr/XJ88/vWy8YzFPtZt3Ds63pdKPg7ON9vngX3Weid2o8xnqnBySOp+hzglmqfMZ6pykmjqfoc49dU6dT1DnrGVQ5zPUOYs71PkMdc5qF3U+Q52z/Eedz1DnrIdS5xPUeWE9lDqfoc5ZD6XOZ6hz1kOp8xnqnPVQ6nyGOvfUOXU+QZ2zHkqdz1DnrIdS5zPUOeuh1PkMdc56KHU+Q52zHkqdj1/ncWE9lDqfoc5ZD6XOr9e5DWmr81z7aJPjNupf//afjv9djaxaUo16qpG1RapRTzV6qpFqVFONrNNRjXqqkdU0qlFPNbLmRTXqqUZWpqhGPdXI+hHVqKYaDas8VKOeamQthmrUU42sxVCNeqqRtRiqUU81eqqRalRTjazFKKnGtD1rdfvn56N/C8UyRSdCkeB3IhThdidCkfv2IZQlEu1EKNLCToQiSOtEKDKmToTyCNWHUCQTnQhFMtGJUCQTnQhFMtGJUCQT3xbKuWQ3KD7YCnpzG8y2dGFyevwQOu4KtdhNKGufjv0lkyOX6EImUokuZCKT+LZMfknbuL3xqSJTXB5bPzwBzOEOnoxBCLwHvAx4MgAh8Hh6IfB4dCHweG4h8HhoGfAeVywEHp8rBB7nKgQe5yoE3gNeBjzOVQg8zvX74KMvG/hY/VGLdWklb115Wg3L5cchssfndiETrrgLmfDQPcgUcNxdyIQ/70Im3HwXMuH9u5DJI1MPMpErdCETKUQXMpFCdCETKUQXMpFC9CBTJIV4mUzebFtKeb98kuk3epIFMfSkBWLoSQDE0HvQS6HHqYuhx32LocdRi6HHJYuhx/lKoU+4WTH0uFkx9LhZMfS4WTH0HvRS6HGzYuhxs2LocbNi6HGzYuhxs1LoM25WDD1uVgw9blYMPW5WDL0HvRR63KwYetysGHrcrBh63KwYetysFPqCmxVDj5sVQ4+bFUOPmxVD70EvhR43K4YeNyuGHjcrhh43K4YeNyuEPi24WTH0uFkx9LhZMfS4WTH0HvRS6HGzYuhxs2LocbNi6HGzYuhxs1LoDW5WDD1uVgw9blYMPW5WDL0HvRR63KwYetysGHrcrBh63KwYetysFHqLmxVDj5sVQ4+bFUOPmxVD70EvhR43K4YeNyuGHjcrhh43K4YeNyuF3uFmxdDjZsXQ42bF0ONmxdB70Euhx82KocfNiqHHzYqhx82KocfNSqH3uFkx9LhZMfS4WTH0uFkx9B70Uuhxs2LocbNi6HGzYuhxs2LocbNS6ANuVgw9blYMPW5WDD1uVgy9nxm98xt6l2Lt6JhX8u62sPoE3txRTu1O26Kc2m22RTm1e2yLcmo32Bbl1O6uKco4tVtri3Jq99UW5dRuqi3Kqd1RW5QelK1Q4naaocTtNEOJ22mGErfTDCVupxXKhNtphhK30wwlbqcZStxOM5QelK1Q4naaocTtNEOJ22mGErfTDCVupxXKjNtphhK30wwlbqcZStxOM5QelK1Q4naaocTtNEOJ22mGErfTDCVupxXKgttphhK30wwlbqcZStxOM5QelK1Q4naaocTtNEOJ22mGErfTDCVupxHKvOB2mqHE7TRDidtphhK30wylB2UrlLidZihxO81Q4naaocTtNEOJ22mF0uB2mqHE7TRDidtphhK30wylB2UrlLidZihxO81Q4naaocTtNEOJ22mF0uJ2mqHE7TRDidtphhK30wylB2UrlLidZihxO81Q4naaocTtNEOJ22mF0uF2mqHE7TRDidtphhK30wylB2UrlLidZihxO81Q4naaocTtNEOJ22mF0uN2mqHE7TRDidtphhK30wylB2UrlLidZihxO81Q4naaocTtNEOJ22mFMuB2mqHE7TRDidtphhK30wylB2UrlLidZihxO81Q4naaocTtNEOJ22mFMuJ2mqHE7TRDidtphhK30wylB2UrlLidZihxO81Q4naaocTtNEOJ22mFMuF2mqHE7TRDidtphhK30wylB2UrlLidZihxO81Q4naaocTtNEOJ22mFMuN2mqHE7TRDidtphhK30wylB2UrlLidZihxO81Q4naaocTtNEOJ22mFsuB2mqHE7TRDidtphhK30wylB2UrlLidZihxO81Q4naaocTtNEOJ22mEsiy4nWYocTvNUOJ2mqHE7TRD6UHZCiVupxlK3E4zlLidZihxO81Q4nZaoTS4nWYocTvNUOJ2mqHE7TRD6UHZCiVupxlK3E4zlLidZihxO81Q4na+i9K7xX4c7V2In1DujMSnFYkJ5mkkeW/ccckfB0f79Mk5/BbJ4qM6EAmH1oFIeL8ORMJVdiCSRyT9IuGEOxAJj92BSLj3DkQiF+hAJBIH/SI5EocORCJx6EAkEocORJo7ccjr0c7b8Ono33A8cI7hzO2wK3DmdrYVOHM7ygqcuZ1cBc7cDuocjp/buVTgzO0YKnDm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db2r+j4kfVdvXe9Qvg9J39Vb17t970PSd/XW9c7Z+5D0Xb11vQv1PiR9V29d7+i8D0nf1VvXuyPvQ9J39db1TsP7kPRdvXW9a+8+JH1Xb13vgLsPSd/VW9e7ye5D0nf11vXOrPuQ9F29db3L6T4kfVdvXe8Yug9J39Vb17tv7kPSd/XW9U6W+5D0Xb11vSvkPiR9V29d77C4D0nf1VvXuxXuQ9J39da15/99SPqu3rr2or8PSd/VW9ce6fch6bt669q7+z4kfVdvXXtK34ek7+qta6/j+5D0Xb117cF7H5K+q7eu/VjvQ9J39da1H+Z9SPqu3rr2I7wPSd3V2+jaD+4+JHVXb6NrP677kNRdvc2i7uptdO3ncx+Suqu30bWfyn1I6q7eRtdmGb+HpGsnifuQ9F29de1BcB+Svqu3rl+v34ek7+qt63fP9yHpu3rr+sXsfUj6rt76fmtp9P3W0uj7raXR91tLo++3lkbfby2Nvt9aGn2/tTT6fmtp9P3W0uj7raXR91tLo++3lkbfby2Nvt9aGn2/tTT6fmtp9P3W0uj7raXR91tLo++3lqbRb5qW9BiSSU9D+v0lP//9zf00d+00f+20cO20eO20dO20fO20cum0n/8+4X6auXbatSqJ16okXquSeK1K4rUqideqJF6rknitStK1KknXqiRdq5J0rUrStSpJ16okXauSdK1K0rUqSdeqJF+rknytSvK1KsnXqiRfq5J8rUrytSrJ16okX6uSfK1KyrUqKdeqpFyrknKtSsq1KinXqqRcq5JyrUrKtSopl6rELsu108y10+y109y10/y108K10+K109K10/K1065ViblWJeZalZhrVWKuVYm5ViXmWpWYa1VirlWJuVYl5lqV2GtVYq9Vib1WJfZaleyvz/i4nfbptTiP08L+aeZxml3+6zwTyMv2oh732Kb2FkfsHFvyGmiU8vnY+3CiruEkXcPJuoZTVA1nf71EbjhG13CsruE4XcPxuoaj66rsdF2Vna6rstN1VXbvvipvr+kzy2K/jscvysZjlI3HKhuPUzYer2w8P74230+L105Ll05rtDHf6VKfbbTVXuVL3Du+xL/jS8I7viS+40vaPJTgzeNLQnn6kp+thN+HlPUNqagbUqNN6H4wJH+Li9crlf1aSY22oGs4IKttQG9/mKx2A3z/7nPVEQV1I4rq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",
      "brillig_names": [
        "get_total_deposited_assets"
      ]
    },
    {
      "name": "withdraw_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "secret",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "market_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "collateral_asset",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "decompose_hint",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_invert"
      ],
      "verification_key": "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\nPa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "_withdraw",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "owner",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "market_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "collateral_asset",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5235018679007078561": {
            "error_kind": "string",
            "string": "Invalid asset or market id"
          },
          "6787403583199288031": {
            "error_kind": "string",
            "string": "Insufficient balance"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "10435052277855889085": {
            "error_kind": "string",
            "string": "Function _withdraw can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "15333773746166717806": {
            "error_kind": "string",
            "string": "Insufficient collateral"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "_withdraw"
      ]
    },
    {
      "name": "withdraw_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "market_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "collateral_asset",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "1Zzdbts8DIbvJcc5IEWKonYrHz4M/UmHAEFapO2Aodi9T87iOEvrOBBMxj4p7ILMw1eSZUqW9LF4XN2///i+3j49vy6+/fex2Dw/3L2tn7fl7uP3cnG/W2826x/fT/+9gOYPRt07vL7cbZv717e73dviG1LguFysto/NNSmUH3lab1blDsr1Z3sIoTUHDkfrnL4w5gzpYMwZ5Wgs8QtjZdaDsbLwqfH/ywUKjRN+zq05YnYMf6TSj3osfR0ofYypDb+UHl0OP0fig3EufufhJxk7fAz/hN9AlD0g+UtIYDq268Lr3CIZt4zMPQGl3AWU0+WAIigcrMulDgQUsS1QjQSfAuoroQBdQEkvB3RZdAB2YDjoQAcdqPaMQA4MBx3koIOSPYODA0PsGREdGA46BBwY0YExRp8YBNtXU5CTXKEkhHtIYg+IhxL1UKLqAMnkAXFQQkAekOQAweABEQdIQA+IhxICD8gY3YpQ29FL7AZ3Wf4SsjWByZxgriGaa4jmGsRcg6g1IZlrSMmaoGhOiOYE89aazXs+jxyEPXIQBg8l6KEEHbIpDsED4qGEPJSQQzbFjB6Q6ACJ4AFxUeIwcGbzrITNsxJOwZwg1gQFc4K5hmyuIVtnVhHAnMDmBOsnLmIwJ1i31hjQnDBGa0WF9nsvKuo5g8zbK5k/c2xeE2z+RJjPUETzGYoo5jUt5hrMZyhiMm9Lat67qvUsS8zW9SDmb2oB6+dBEM0J1jUt5u9RCeb1YP4WlVG+JAwM5oQcRozCHkrYQ0kkD4jD5KCIhxLxUJKCB8RhclAUPSAOk4OSPZTk6AGxzj+T+eg+mY/uk/noPpmP7lMw1xDMNRCaE8w1MJgTzJ+4a2YPyvD8MgGFpbUW6dZy819GDA6MZM8QHIOBAY87Iopv7My/2j9BwHiwJoj/LPJvQkowvZDi5ELS6VWc6uRCumZawzukPLWQFCbXvBVuUkq5taaQBjYfIWA6hgKBzleE6zU7WCauQOeuINDsFcy+DvgWLyqSNj8kOtnO2aMgER0VpPhZwS26R6b2x4k5DSlQOCZ5oJ92HirfojdlxE6BDinIx62T5TrquYJIs1egc1cgYfYK0twVpNnXwTVbvyauYPa9aZ59HeS510GGuddBhtnXAc49q8g496wih7m/0fI1XxamrYCn1RftQ5pWw25CmtgYZB/SLRLaGNoVrhQHh6ZIuTs1iAOdK7jJoGJcBTJ3BQlnr2D2daDjTDKRckeBcKqgoYz0PeQyBQHQByMumJ6vf8xHN45d9QeRg1uucusZHw+6aZVbDnVuqcYNe9pFtwoIJXTTr9x6xRovhBqvUMXqObPh4qf34pVqvKRKV89iwAGvntX5Q15VLK1iaRWrp9UPeUmFVwCo8uIqr1zjhTWtt+/0vAGvwDVePSurhrykxqvnhLghr6rSiFWsWKWrr9/o9/pd7n7e7dZ395vV4Rjcp/ftw8mpuG+/XlZnB+S+7J4fVo/vu1VzVG53Sm5T7aWQlgRUomk6WQJeUtT966TclqdrGQD3D1pjC6HccomhxPEH",
      "brillig_names": [
        "withdraw_public"
      ]
    },
    {
      "name": "_compute_utilization_rate",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "market_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "asset_address",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "precision",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "deposit_accumulator",
            "type": {
              "kind": "struct",
              "path": "accumulator::Accumulator",
              "fields": [
                {
                  "name": "value",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 128
                  }
                },
                {
                  "name": "last_updated_ts",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 64
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "borrow_accumulator",
            "type": {
              "kind": "struct",
              "path": "accumulator::Accumulator",
              "fields": [
                {
                  "name": "value",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 128
                  }
                },
                {
                  "name": "last_updated_ts",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 64
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 128
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "12348881442450494403": {
            "error_kind": "string",
            "string": "Function _compute_utilization_rate can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "_compute_utilization_rate"
      ]
    },
    {
      "name": "_compute_borrow_rate",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "asset",
            "type": {
              "kind": "struct",
              "path": "asset::Asset",
              "fields": [
                {
                  "name": "asset_address",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "loan_to_value",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 128
                  }
                },
                {
                  "name": "oracle",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "is_borrowable",
                  "type": {
                    "kind": "boolean"
                  }
                },
                {
                  "name": "optimal_utilization_rate",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 128
                  }
                },
                {
                  "name": "under_optimal_slope",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 128
                  }
                },
                {
                  "name": "over_optimal_slope",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 128
                  }
                },
                {
                  "name": "deposit_cap",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 128
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "utilization_rate",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "precision",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 128
          },
          "visibility": "public"
        },
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17134621154673181869": {
            "error_kind": "string",
            "string": "Function _compute_borrow_rate can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBPJwAABAMnAgsECicCDAQAHxgADAALgEQdAIBFgEUGHQCAR4BHAR0AgEiASAYdAIBJgEkGHQCASoBKBh0AgEuASwYdAIBMgEwGHQCATYBNBi4IgEQAAS4IgEUAAi4IgEYAAy4IgEcABC4IgEgABS4IgEkABi4IgEoABy4IgEsACC4IgEwACS4IgE0ACiUAAAC5JQAAALouBAABgE4oAgACBIBOJwIDBAE7DQACAAMmJQAAAeUeAgALAB4CAAwAMzgACwAMAA0nAgsBASQCAA0AAADjJQAAAg4eAgALAR4CAAwACjgLDA0kAgANAAAA/yUAAAIgLQgBCwAAAQIBJwIMBgAtDgwLDDgJBQwkAgAMAAABpCMAAAEjAjgJBQEOOAUJAiQCAAIAAAE6JQAAAjIEOAEHAicCBAYACjgEBwMkAgADAAABaAY4AgcJCjgJAQgkAgAIAAABaCUAAAJEAjgKBQEOOAUKAyQCAAMAAAF/JQAAAjIGOAIBAwA4BgMBDjgGAQIkAgACAAABmyUAAAJWLQ4BCyMAAAHgBDgJBgEnAgMGAAo4AwYCJAIAAgAAAdIGOAEGBwo4BwkEJAIABAAAAdIlAAACRAY4AQUCLQ4CCyMAAAHgLQ0LASYoAIAEBHgADQAAAIAEgAMkAIADAAACDSoBAAEF96Hzr6Wt1Mo8AQECJioBAAEFvh4//z6k9vo8AQECJioBAAEF7cpnKDUwRK08AQECJioBAAEFKIaSsEfc/UM8AQECJioBAAEFZGGIqMbPlMs8AQECJioBAAEFRafKcRlB5BU8AQECJg==",
      "debug_symbols": "vZfbbqswEEX/hWcePB5fZvorR0cVSUiFhEhEkkpV1H+v3XJrMKUdRXmJ7Ggv9rbxAHPNduXm8vJcNfvDKXv6d83qw7Y4V4cmzK7vebZpq7quXp6nf2cq/gDDJ3A6Fk2cn85Fe86eALWxeVY2uzhGUuEi+6ouw0yF8VyvtO7lyuhBzT4hNqx8JzYMbhA7mxCTMdSJyTgzFf/PQ3x3n/jMvRyAHxZfqzvtvqVh92ll98H6Pj44xJ/js0XTiTlws/h87/igv8WPJmAeYKL1I0x80gSYsafCiYAVE6tIdfIwpJXzZ6FfAFlUtzcQ08sOKfyYCP1KontWBP5mj5C/JYqc0TLOKiFnU5x2DH3BhLEey8viF8YizBkZJnPzuIChGzGyt1j6VRKuhtBjflpDPeYkGCqQYSzC0g+hiKkBM4pmGIswLXPTMrd0ya1i6Ypbx2RuC/W2hjmVxgzoEbNmhlkR5mVunkQY4S+2xNoZtuCGSv+EMcowkZtRToQBiDC9cN8UDc9JD5pmmBVhKHNDmZtBGUYizMrcHMgwt4ThiDl9i3kQYaT+frjew+y1aKtiU5ddM7a/NNtJb3Z+O5Y3bdqxPWzL3aUtY8M26dWiP7mcIXY+cQ1MefgeCSbB6AM=",
      "brillig_names": [
        "_compute_borrow_rate"
      ]
    },
    {
      "name": "repay_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "owner",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "market_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "asset_address",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBMJwAABAMnAgYEBScCBwQAHxgABwAGgEcdAIBHgEcGLgiARwABLgiASAACLgiASQADLgiASgAELgiASwAFJQAAAGQlAAAAnygCAAEEgEwnAgIEADsNAAEAAiwAgEMAMGROcuExoCm4UEW2gYFYXSgz6Eh5uXCRQ+H1k/AAAAAoAIBEBAAAKACARQEAASgAgEYEAAEmJQAABe0eAgAGAB4CAAcAMzgABgAHAAgkAgAIAAAAwyUAAAYWHgIABgEeAgAHACcCCQQAJwILBAMAOAkLCi0IAQgAEAEKAScDCAQBACgIAgotDgkKACgKAgotDgkKJwIKBAMAOAgKCS0NCAkAKAkCCS0OCQgnAgoEAScCDAQDADgKDAstCAEJABABCwEnAwkEAQAoCQILLQ4KCwAoCwILLQ4KCycCCwQDADgJCwotDAoLLQ4GCycCCwQMLQgADC4IgEQADS0MCA4uCIBGAA8tDAkQABAACwAlAAAGKC0EAAAtDA0GLQwOCi0NCgkAKAkCCS0OCQonAgsEAScCDQQDADgLDQwtCAEJABABDAEnAwkEAQAoCQIMLQ4LDAAoDAIMLQ4LDCcCDAQDADgJDAstDAsMLQ4HDCcCDAQNLQgADS0MBg4tDAoPLgiARgAQLQwJEQAQAAwAJQAABigtBAAALQwOBy0MDwstDQsGACgGAgYtDgYLHAwBBgAAKAcCAS4EAAuAAygAgAQEAAElAAAG9y4IgAUACS4IgAYACi0OBgotDQkHACgHAgctDgcJACgBAgcuBAAJgAMoAIAEBAABJQAABvcuCIAFAAouCIAGAAstDgILLQ0KAQAoAQIBLQ4BCikCAAEAjJ5UcgAoBwICLgQACoADKACABAQAASUAAAh3LgiABQAJLgiABgALLQ4BCwAoCQIKLQ0KBycCCwQCADgKCwE5A4iAQ4BDAAUAAQAHIAIAASECAAItCAEJACgJAgwtDQwLJwINBAIAOAwNCiI0gEQAAgAKLQwCCycCDQQDADgLDQwAEAEMAScDCQQBACgJAg0tDgsNACgNAg0tDgsNLQwLBwYoBwIHJAIAAQAAA2AjAAADNy0NCQEAKAECAS0OAQkAKAkCCi0NCgInAgsEAgA4CgsBPA0BAiMAAANgCygAB4BEAAEkAgABAAADeScCAgQAPAkBAh4CAAEALQ0IAgAoAgICLQ4CCCcCBwQBJwIKBAMAOAcKCS0IAQIAEAEJAScDAgQBACgCAgktDgcJACgJAgktDgcJJwIJBAMAOAIJBy0MBwktDgMJJwIJBAotCAAKLgiARAALLQwIDC4IgEYADS0MAg4AEAAJACUAAAYoLQQAAC0MCwMtDAwHLQ0HAgAoAgICLQ4CBwAoAwICLgQAB4ADKACABAQAASUAAAb3LgiABQAILgiABgAJLQ4GCS0NCAMAKAMCAy0OAwgAKAICAy4EAAiAAygAgAQEAAElAAAG9y4IgAUABi4IgAYABy0OBActDQYCACgCAgItDgIGJwIEBAEnAggEAwA4BAgHLQgBAgAQAQcBJwMCBAEAKAICBy0OBAcAKAcCBy0OBAcnAgcEAwA4AgcELQwEBy0OBQcnAgcECC0IAAgtDAMJLQwGCi4IgEYACy0MAgwAEAAHACUAAAYoLQQAAC0MCQQtDAoFLQ0FAgAoAgICLQ4CBSkCAAIAJPhqngAoBAIDLgQABYADKACABAQAASUAAAh3LgiABQAGLgiABgAHLQ4CBwAoBgIFLQ0FBCcCBwQCADgFBwI5A4iAQ4BDAAEAAgAEIAIAASECAAItCAEEACgEAgctDQcGJwIIBAIAOAcIBSI0gEQAAgAFLQwCBicCCAQDADgGCAcAEAEHAScDBAQBACgEAggtDgYIACgIAggtDgYILQwGAwYoAwIDJAIAAQAABdMjAAAFqi0NBAEAKAECAS0OAQQAKAQCBS0NBQInAgYEAgA4BQYBPA0BAiMAAAXTCygAA4BEAAEkAgABAAAF7CcCAgQAPAkBAiYoAIAEBHgADQAAAIAEgAMkAIADAAAGFSoBAAEF96Hzr6Wt1Mo8AQECJioBAAEFvh4//z6k9vo8AQECJiUAAAXtLQgBBgAAAQIBLQ4BBi0IAQEAAAECAS0OAgEtDQQCACgCAgItDgIELgiARAAFIwAABl8MOAUDAiQCAAIAAAaCIwAABnEtDQYCLQ0BAy0MAgEtDAMCJiQCAAIAAAaPJQAACfEnAggEAwA4BAgHADgHBQgtDQgCLQ0GBy0NAQgtDQgJACgJAgktDgkIACgHAgkuBAAIgAMoAIAEBAABJQAABvcuCIAFAAouCIAGAAstDgILLQ4JBi0OCgEBKAAFgEYAAi0MAgUjAAAGXy4BgAOABwEAgAMAAoALLgGAC4AIAQCACwACgAsuAYALgAkBAIALAAKACgEAgAiABIALDwCAC4AJgAwLAIAHAAKADSQAgAwAAAdGIwAAB7YkAIANAAAHUyMAAAdsLgCAA4AFAQCABQACgA4uAoALgA4jAAAHsSgAgA8EAAMBAIAJgA+ADi4AAAGABQEAAAGADgABKAGABQQAAQEAgAUAAoAOLgKAC4AOAQCADgACgA4uAoAJgA4jAAAHsSMAAAgKKACADwQAAgUAgAuAD4AOKACAEAQAAwEAgA6AEIAPLgAAAYAFAQAAAYAPAAEoAYAFBAABAQCABQACgA8uAoALgA8BAIAPAAKADy4CgA6ADyMAAAgKKACADQQAAwEAgAWADYAMCwCAA4AFgA0kAIANAAAIbgEAgAqACIAPLgCACoAQLgCADIARCwCAEIAPgBIkAIASAAAIbi4BgBCADi4CgA6AEQEAgBAAAoAQAQCAEQACgBEjAAAIPQEAgAyACIAGJi4BgAOABwEAgAMAAoALLgGAC4AIAQCACwACgAsuAYALgAkBAIALAAKACgEAgAiABIALDwCAC4AJgAwLAIAHAAKADSQAgAwAAAjGIwAACTYkAIANAAAI0yMAAAjsLgCAA4AFAQCABQACgA4uAoALgA4jAAAJMSgAgA8EAAMBAIAJgA+ADi4AAAGABQEAAAGADgABKAGABQQAAQEAgAUAAoAOLgKAC4AOAQCADgACgA4uAoAJgA4jAAAJMSMAAAmKKACADwQAAgUAgAuAD4AOKACAEAQAAwEAgA6AEIAPLgAAAYAFAQAAAYAPAAEoAYAFBAABAQCABQACgA8uAoALgA8BAIAPAAKADy4CgA6ADyMAAAmKKACADQQAAwEAgAWADYAMAQCADIAEgA0DAIAIAAKADgEAgA2ADoAPAQCACoAOgBANAIAQgAqADiQAgA4AAAnqLgGAEIARLgKAEYAPAwCAEAACgBADAIAPAAKADyMAAAm5LgCADIAGJioBAAEFxWvEWg4QAAI8AQECJg==",
      "debug_symbols": "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",
      "brillig_names": [
        "repay_public"
      ]
    },
    {
      "name": "_repay",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "owner",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "market_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "asset_address",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5235018679007078561": {
            "error_kind": "string",
            "string": "Invalid asset or market id"
          },
          "6787403583199288031": {
            "error_kind": "string",
            "string": "Insufficient balance"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "13135008234568508716": {
            "error_kind": "string",
            "string": "Function _repay can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "_repay"
      ]
    },
    {
      "name": "add_asset",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "market_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "asset_address",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "oracle",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "loan_to_value",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "is_borrowable",
            "type": {
              "kind": "boolean"
            },
            "visibility": "private"
          },
          {
            "name": "optimal_utilization_rate",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "under_optimal_slope",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "over_optimal_slope",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "deposit_cap",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "add_asset"
      ]
    },
    {
      "name": "get_accumulators",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "market_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "asset_address",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "tuple",
            "fields": [
              {
                "kind": "struct",
                "path": "accumulator::Accumulator",
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "last_updated_ts",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  }
                ]
              },
              {
                "kind": "struct",
                "path": "accumulator::Accumulator",
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "last_updated_ts",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  }
                ]
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_accumulators"
      ]
    },
    {
      "name": "borrow_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "secret",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "market_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "asset_address",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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x4fWZ44Prc689xNMh2SOD63PHB9anzk+tDpzVWcoxveDw7aPDeETxftMNWXXn83UTzPTFo7+cUD9mgn+3Uvf49+Uxx+Uxx+Vx590x9/k/EjJ+E3X8fvF7Qco+yWlzEs7fxQLzsensNePu22TcxbbzdZNNVs/1Wz7rhukZ9t3lSE9275rEunZ9l3BSM+273pHeLah7+pIerZT1VJBby11j19vdXSP3yuPX28Fc49fb01yj19vlXGPv/O6wRwNRe+Mz7x0XPzebHePudroTsamuL9wSp/H3rl0XmG04hI7r0Wacem8amnGpfP6phmXzuumZlw8XE65dF7nNePSef3YjEvndWkzLtS751yod0+5JOrdcy7Uu+dcfOdczN6P9Mae9ANS73VGLv7e64Fc/L2v27n4e19fc/H3vg6+j98uva9Xufh7X1dy8ffe78jF33tfIhe/7vXXLrrXX7voXn/tonv9tYvu9dcuytdfo3z9NcrXX6N8/TXK198m+/tLxq98/TXK11+jfP01ytdfo3z9tcrXX6t8/bXK11+rfP1tsq+xZPzK11+rfP21ytdfq3z9tcrXX6d8/XXK11+nfP11ytffJvs5SsavfP11ytdfp3z9dcrXX6d8/fXK11+vfP31ytdfr3z99crXX698/fXK11+vfP31ytdfr3z9XZWvv6vy9XdVvv6uytffJnsOSsavfP3tfCfBfPzK19/OdxLMx698/e18J8F8/MrX3973BszGr3z97X3/vmz8ytff3vfYy8avfP3tfR+8bPzK19/e96rLxq98/e19P7ls/MrX3973k8vGr3z97X0/uWz8ytff7veTy8WvfP3tfn+2XPzK19/u9zvLxa98/e1+/7Bc/MrX3+7348rFr3z97X5/q1z8ytff7veLysWvfP1NytffpHz9Vb7/lVW+/5VVvv+VVb7/lVW+/5VVvv+VU77/lVO+/5VTvv+VU77/lVt0r7+u+/2vLttXdNvHmmWxnwbfwUy70XUOzLQ7XefATLvVdQ7MtHtdZ8B0v3lZMzB6TzG5x6/3tJF7/F55/Hqrmnv8eouPe/x6a4R7/HqX8nv8elfc3/F3v6tYLn69pzXc41e+/na/q1gufuXrb/e7iuXiV77+dr+rWC5+5etv97uKZeLvflexXPzK19/udxXLxa98/e1+V7Fc/MrX3+53FcvFr3z97X5X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WbKVZclWliVbWZZsZVmylWVJKMuSUJYloSxLQlmWhLIsCWVZEsqyJJRlSSjLklCWJbEsS2JZlsSyLIllWRLLsiSWZUksy5JYliWxLEtiWZaksixJZVmSyrIklWVJKsuSVJYlqSxLUlmWpLIsKeu9mrLeqynrvZqy3qsp672ast6rKeu9mrLeqynrvZqy3qsp672ast6rKeu9mrLeqynrvZqy3qsp672ast6rKeu9mrLeqynrvZqy3qsp672ast6rKeu9mrLeqynrvZqy3qsp672ast6rKeu9mrLeqynrvZqy3qsp672ast6rKeu9mrLeqynrvZqy3qsp672ast6rKeu9mrLeqynrvZqy3qsp672ast6rKeu9mrLeqynrvZqy3qsp672ast6rKeu9mrLeqynrvZqy3qsp672ast6rKeu9mrLeqynrvZqy3qsp672ast6rKeu9mrLeqynrvZqy3qsp672ast6rKeu9mrLeqynrvZqy3qt50XtNxzcMTfLm5LIXWXJs6WdSsp8uO9vKV+igkFs4oa9wYl/hpK7CedXbbhWO6Ssc21c4rq9wfF/hrH2F09ddOfZ1V4593ZVjX3fl1NddOfV1V0593ZVTX3flVPuu/PaMq1s8a2fxbJ3FEzqLJ3YWT+oqHnv+BNfeStePy6w1ayaem0NfjvC38NfdC25vYmq8ia3xJk7kTdz2eJPNPb3JyS/yots3BnLL875Py/l2qsux59riHr+9T/Yjft95/OvBf1ud+xr/qjz+TXn8QXn8UXn8SXf8ZlEev1Eev1Uef+/rby5+5euvUb7+GuXrr1G+/hrl669Rvv5a5euvVb7+WuXrr1W+/lrl669Vvv5a5euvVb7+WuXrr1W+/jrl669Tvv465euvU77+OuXrr1O+/jrl669Tvv465euvU77+euXrr1e+/nrl669Xvv565euvV77+euXrr1e+/nrl669Xvv6uytffVfn6uypff1fl6++qfP1dla+/q/L1d1W+/q7K199V+fq7KV9/N+Xr76Z8/d2Ur7+b8vV3U77+bsrX3035+rspX3835etvUL7+BuXrb1C+/gbl629Qvv4G5etvUL7+BuXrb1C+/gbl629Uvv5G5etvVL7+RuXrb1S+/kbl629Uvv5G5etvVL7+RuXrb1K+/ibl629Svv4m5etvUr7+JuXrb1K+/ibl629Svv4m3euvW3Svv27Rvf66Rff667rf/yoXv+711ynf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KK9//yivf/8or3//KK9//yi+611+vfP8r3/3+V4+X3kIyz/GfDd6j3uL2eOG4fsy197Vacq69r+uSc+29BhCca/f7dUnOtffaQnKundcha1rjY672/Vx9SHscPrp4DLYpnoZtwhG188do59IHm85rnKZsPGxesum8Ngurtx+jw7Zs79k4t491/inos6Hrtu4hr2F5Gvyr/vsac0rHKy9L/DT6jrHzElELxs6rTy0YOy9stWDsvGZWgrH37fu0YOy80teCsXMToQVj535DC0YPRgmMuBgRjLgYEYy4GBGMuBgRjLgYCYy9b4KqBSMuRgQjLkYEIy5GBKMHowRGXIwIRlyMCEZcjAhGXIwIRlyMBMbet5LWghEXI4IRFyOCERcjgtGDUQIjLkYEIy5GBCMuRgQjLkYEIy5GAmPvG/JrwYiLEcGIixHBiIsRwejBKIERFyOCERcjghEXI4IRFyOCERcjgbH3Y020YMTFiGDExYhgxMWIYPRglMCIixHBiIsRwYiLEcGIixHBiIuRwNj74VBaMOJiRDDiYkQw4mJEMHowSmDExYhgxMWIYMTFiGDExYhgxMVIYOz9iD0tGHExIhhxMSIYcTEiGD0YJTDiYkQw4mJEMOJiRDDiYkQw4mIkMPZ+UKkWjLgYEYy4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",
      "brillig_names": [
        "discover_new_messages",
        "decompose_hint",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_invert"
      ],
      "verification_key": "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\nPa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "borrow_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "market_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "asset_address",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "1VztbuI6EH0XfvPD8+nxvsrV1aofdIWEaEXbK11V++6bsCSwFIjkctjkT0WqOXPOjB1n7MT+mD0u7t9/fF+un55fZ9/++Zitnh/u3pbP6+bq4+d8dr9ZrlbLH98P/z1L7R+y2AJeX+7W7fXr293mbfaNhNXms8X6sf0tkRonT8vVorlKze/P9om5M0/KvXXJJ4y1pLwz1kLeG7udMA7V2BmHuh4a/zufkct15JfSmROVG8q/UvYt+uzHQPbJcie/yZ5cll9MdGdcGtyx/OzXlk/8h/yWJPQWJOUUScnch59133om4H5R9LQc815OHpBjKdLOuPkZA3KMumSGSfok50x2iHs5ZpflXA6Yk8IZ4DEQPAYKNAMLnAEeg8BjkIxmUIYzOJrBCM4Aj8ETnMHgDF8f+dipK5DYD+qAptjbUmTFU+CjCHwUEXCKIngKeBSSBE+R4RTEeAqHUzDhKfBRSMJTfH0AcemGcrf95Kz4b/8F618F7B+s38D6Dazfwfo9sP4zWH/OWP9BYP8G9g/unwU8vuHrCsXXFZrwURA+CoJXR8qMp8BHIfgoBF4dqRKewuAUlvAUN4gCPtVVcKWh4EpDM4P9O9Z/JLB/sP4C1l+wlZKlBPavYP/Y+8uIwf6x/dOYwP6/3j8pUvdykYLimEHAPVTAd5iCW0DBdwB4LcHAawnm4PZ1sH7wWoJlcP8J8Aga2LUQK9j8O/gJ7Anb/50I7B/bvg5+QjqD8w9+PvoV1vIHJmEu8HmeKz4KxUdhgqeAL9q546NwfBSZ8RTwRTsPwlPAF+284KMohqfAVpIZPBfP4Ll4Bs/FM3gunhmsn8H6hcD+wfo1gf2D76/hmX5wuuyfXLsvp8l9b6y/GYzhDBnN4PR1BmLq9wYQ60GjndpJIElpZy3J/vjgvRWU09gE2cgExdiaLGJkgoYXIW4tqIxLUKSRdepIfyFDpbMWzgMbbyhR7vbFUGI5/lo6hndxjFx/TFs/y8T1Tzz/evuHknhX/YkcbF88oz+L9PqzfdZ/+wFRpcuoqOYh/ZH6Mi7Fp712obcfP5Vorz+G9Jd+q2Dz2+JYv8nE9ce09TtPXH+etv488fwPb4Iauf6Jj59l4vkv085/SdPOf0kTzz9Nu34oNO36ofC0n19l+G3AuPXrmMafraAxdehW0KhmGFtBty9ZrT+YRmxwyklS9mffKMux/r8wZbiufp+2/kwT1z/x/Mc1lowkdM+R+FB/y3GVNxmXOSglugWJ34Dk9Ls6Uu1havtmZ/cdrFTBzhwxNgiLKljhOliugdHpPkH7b3LIeb+Iqh3KalCUalBcxXX6rILLL8kbVK5BeVVcZw73G0BlqUJVcUUVV1Rxnen1QyivQHFKVSitQpUaFNX03jPnvw2hWGtQQlUor0EpV6GqsmFVXFYV17lx4zzqZ3P1391meXe/WuwOb316Xz8cnOX69v/L4uhY15fN88Pi8X2zaA943Z/t2jZ7k6S5JGnUtINs8+p+Lhbbx0lz2dxdc060vdFa28TNpTYaGh2/AA==",
      "brillig_names": [
        "borrow_public"
      ]
    },
    {
      "name": "constructor",
      "is_unconstrained": false,
      "custom_attributes": [
        "private",
        "initializer"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_contract_instance_internal",
        "decompose_hint",
        "lte_hint",
        "discover_new_messages",
        "notify_created_nullifier_oracle_wrapper",
        "directive_invert"
      ],
      "verification_key": "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\nPa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "repay_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "secret",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "on_behalf_of",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "market_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "asset_address",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "decompose_hint",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_invert"
      ],
      "verification_key": "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\nPa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "deposit_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "secret",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "on_behalf_of",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "market_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "collateral_asset",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "decompose_hint",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "directive_invert"
      ],
      "verification_key": "AAAAAAAEAAAAAAAAAAAAEgAAAAAAAAAQAAAAAAAAVgkAAAAA//////////8AF1IE2JoXsW3aAh2e\n/+aYzCJ0VFh66B1KK1PhQc751g0A98oZCvcmYj3RFsditgtTlcGGteAV80jKeJzboEcBkAp7tixy\nkdrKNl9yLZd2nv2iolyYQfzzElqewZSZOUxOCm/w500X+oGYScRg61HbalCNUPuiFjL7j3Sypl7Z\nmnYZ+RCFgwkThPvzDYpR1a1PDcra547fXrdCisnin3y5xAVQfj335lE2jIGd7JLhOUcM2QZD6Guq\nJdzrVT8fT5XlA0WMQi1MqckiLjAYG8YPoy1yEZzOPDRXCNkixT8xuh8EpDQixEhyBM8oKU2pRPo9\nrAhQDbIAI4Uj9AMNiOhQywT4zbFdYi3adrTPARyhxuUKuzBpFVMXd5NVkSRcGso0J6NIzuKBtLoB\nMgpFY9bORSN+PKj+cg3faLtJ0/z7lS4vHzU2/ylVXYHECBifnJtkLXY55fcNQOdif0M2HzLxFR4f\nJTwGKYZ5r4G4Bh6A//B2mHiBaxaToiN8XNQfyLkLIuSmLVifXcWOAD4X0sKeZqqcjXq3WBuYEO2n\nPlPhfd8OP4PTyf+mJHwLpRXOLm9SrLCVbfb6d5ltuCSwof5icAWAOdGTIloJDBxD6rJm2uBK2eUa\nTtY3AGgmVXq4Em0rBT5bIVQbAIXof+fe3dWp52EULvP6uuwTnmbsSVeRCscL+vSkM20pMpJ5KO8E\n9RjpuPK7ZOCs6Ymc9SfGYotTsCH9Bh+YUgpQdO4JrAuHWF5+LRnpOVeiw1L5Cvgq/rjwFBJcRAuc\n+FPnUAAcQeyOoMwNNP5lXcyJjU+f46Opdmwror7nvog5DaBlqdEFoPk5kVppnlK/yLlA6mj0g7rC\nNRxQB88rrhfp0vxeXOODJDgDisdO9pvUO73UKqpQJKv+BlgGiTOf86hGeVae2tgwKINa6VLDSfY6\nzW4e+dRuXDAUoX18ClXS1F7o7fbsFlwRPSgrmEfVYv1BQCIOR+GCrxpw0tC/U/KBmNxua015bsn0\nE4YWuRKVxKct3D6sKlhhBKPAVJbx4iZbVFCwXy6Z3gl2josHROSNZhQ03gkdW9UCi+FP3Kyr+6Fo\nkZdNqBbVLtMYmiA76El/6KK/jec6AAo+N1hCM0U/IGtFlmhdw4XZX9/p6CDpwqNN1jIzommpGCYF\nRBjTTOrkbvKJMks2ABCotQaHcKFM6o/+Gzp8vYgfGv4Yaj8PvT7+UIPWdDe8B0RaEK5NwyqhLhlw\nQscMwQJYmijX5ozKjHO6S6Eyq2mwSG1gFALa661o+cdIDRJZLC9VIZPhm7UlK6OiiGlCx1oNVn4B\n6NkjI2Ot0tJANYgpiG4JRn1A+SecAbxx50ITugbp2pVJoUHHnCLd5/p2eAbwPOYGuNNpzZT+175H\ntvsoK+oZzpvEIHt7ui/sHie8Fp28Sm8qUX5rrFaaXsghiNWMKRHYA/bF7BVHT6LCN70pIGIqQbqy\nK6cTMbOD+vU1bO4+Obi5UxUE6LKBHiaarykRvgyj0gsW5SBzwwT5krbBeK8s1Is9jQ8bFHxPyMmL\nJkwASr1wmW4UWXdmUKl9lgOmMggdiuLPBqzWCqf27tMFvGwHil6S7DtV9dTzvDn3IxOU67sWWT5V\nI2iOeVMSswiYNs6jM3IiavhAJH7jKauRtJ1EcCOMoa5Hn3rFJWBOGVsdLm+pB0Qt/d28yS3wSOKp\n7H3PBIZwDqvfj+Y8UGQZYCOyKw46we/dC5HM8GlTtjM6Lucwh8clihCVYS9QbiXJGPRadUM+dWUb\nLH0pvzwOEKyi5LeCCPjli9ielFS9IySWWvDOm0wo7N1qC/gtoyma+6aoClL/fiNrpCchWa4R4dX+\ngb0T1jS7SEWzbilwr/zkaUQeG93W7npGbkiOfiTWvHWd/IyUcPmmHlCqR1Gc+Wlcp8yPYCr7/6iW\nKoxoFrrWO/J20yopZbBGS4Dg+XBj6s+1vuEvoTj1TED/XgsF+d37hYhDIQ+I3KPgKkXzd0fli04q\n3pCfVR6ykxCzmCGxPS1MgeUKgMU302ghQxecbQNrEFnEE0rNRgN5dQ5GFsp+JZndkmQspDVI1R+c\nnjdbR1FZXbc42Iv5BABlXYMpH/2Vm8T6LK0gU+xDvqefhWipXhrCZPJbmhQZIwSMyw7WXkKxGe9B\nZzEuX3hU5Wfta0fJKZOa4pIPLxgyKlSwAvnkq7aZzHvUUQk6+5Otfh5qJJR1B4gKxHentAPG7qEA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAACCvoo6rtcp8yNqsI17MHPtT0xwmc38cDD/iaaYV8VmiwNS9DTUM4kISxrrTu0rJrfhq5Z\nPvjaw7YL6WvnfXhn4ADENyb3W2/aDeIs4ODfq2vMegX/lalrKJQkxfczZw2WL5tuC04sAZaN5cMk\ngqp9HQoJ1xeOyTuteFj5bmTwtI0dWKphxkrVIgQ9ecSAIhnlW6GXUa3+bDYyTT+2wtoJiS18GKk8\nPa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "deposit_public",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "on_behalf_of",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "market_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "collateral_asset",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "deposit_public"
      ]
    },
    {
      "name": "_liquidate",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "market_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "collateral_token",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "debt_token",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "user",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "debt_to_liquidate_amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "1840251649407153602": {
            "error_kind": "string",
            "string": "Insufficient borrowed amount"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14434150440419769526": {
            "error_kind": "string",
            "string": "collateral >= debt"
          },
          "15333773746166717806": {
            "error_kind": "string",
            "string": "Insufficient collateral"
          },
          "16523063005220065570": {
            "error_kind": "string",
            "string": "Function _liquidate can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "_liquidate"
      ]
    },
    {
      "name": "_deposit",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "owner",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "market_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "collateral_asset",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "951653053333916160": {
            "error_kind": "string",
            "string": "Deposit cap exceeded"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5235018679007078561": {
            "error_kind": "string",
            "string": "Invalid asset or market id"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "16022896159229267359": {
            "error_kind": "string",
            "string": "Function _deposit can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBRJwAABAMnAgUEBCcCBgQAHxgABgAFgE0dAIBOgE4GLgiATQABLgiATgACLgiATwADLgiAUAAEJQAAAF4lAAAA0SgCAAEEgFEnAgIEADsNAAEAAiwAgEMAMGROcuExoCm4UEW2gYFYXSgz6Eh5uXCRQ+H1k/AAAAAoAIBEBAADKACARQEAACgAgEYEAAAoAIBHAAAAKACASAEAASgAgEkEAAEoAIBKAABfKACASwAAZCsAgEwAAAAAAAAAAAIAAAAAAAAAACYlAAAUtS0IAQYAAAECAS4KgEUABi0IAQcAAAECAS4KgEcABy0IAQgAAAECAScCCQACLQ4JCB4CAAkAHgIACgAzOAAJAAoACyQCAAsAAAElJQAAFN4eAgAJAR4CAAoACjgJCgskAgALAAABQSUAABTwLQgBCScCCgQEABABCgEnAwkEAQAoCQIKLQwKCy4KgEcACwAoCwILLgqARwALACgLAgsuCoBHAAstCAEKJwILBAUAEAELAScDCgQBACgKAgstDAsMLgqARwAMACgMAgwuCoBHAAwAKAwCDC4KgEcADAAoDAIMLgqATAAMLQgBCwAAAQIBLQ4JCy0IAQkAAAECAS0OCgktCAEKAAABAgEuCoBGAAotCAEMAAABAgEuCoBFAAwnAg0AAScCDgQPLQgADy0MCxAtDAkRLQwKEi0MDBMtDA0UABAADgAlAAAVAi0EAAAnAg4EDy0IAA8tDAsQLQwJES0MChItDAwTLQwDFAAQAA4AJQAAFQItBAAALQ0MDgsoAA6ARQAPJAIADwAAAmwnAhAEADwJARAnAg4EDy0IAA8tDAsQLQwJES0MChItDAwTABAADgAlAAAWKy0EAAAtDQsOLQ0JDy0NChAtDg4LLQ4PCS0OEAouCoBIAAwBKAAPgEkACi0NCgkLKAAJgEcACgsoAAqARQALJAIACwAAAtolAAAXPi0IAQonAgsEBAAQAQsBJwMKBAEAKAoCCy0MCwwuCoBHAAwAKAwCDC4KgEcADAAoDAIMLgqARwAMLQgBCycCDAQFABABDAEnAwsEAQAoCwIMLQwMDi4KgEcADgAoDgIOLgqARwAOACgOAg4uCoBHAA4AKA4CDi4KgEwADi0IAQwAAAECAS0OCgwtCAEKAAABAgEtDgsKLQgBCwAAAQIBLgqARgALLQgBDgAAAQIBLgqARQAOJwIPBBAtCAAQLQwMES0MChItDAsTLQwOFC0MCRUAEAAPACUAABUCLQQAACcCCQQPLQgADy0MDBAtDAoRLQwLEi0MDhMtDAQUABAACQAlAAAVAi0EAAAtDQ4JCygACYBFAA8kAgAPAAAEACcCEAQAPAkBECcCCQQPLQgADy0MDBAtDAoRLQwLEi0MDhMAEAAJACUAABYrLQQAAC0NDAktDQoPLQ0LEC0OCQwtDg8KLQ4QCy4KgEgADgEoAA+ASQAKLQ0KCQsoAAmARwAKCygACoBFAAskAgALAAAEbiUAABc+LQgBCicCCwQJABABCwEnAwoEAQAoCgILLQwLDC4KgEcADAAoDAIMLgqARwAMACgMAgwuCoBHAAwAKAwCDC4KgEcADAAoDAIMLgqARwAMACgMAgwuCoBHAAwAKAwCDC4KgEcADAAoDAIMLgqARwAMLQgBCwAAAQIBLQ4KCycCCgQILgiARgAFIwAABPoMOAUKDCQCAAwAABRmIwAABQwtDQsFASgABYBJAAstDQsJJwILBAIAOAULDi0NDgwtCAEOJwIPBAIAEAEPAScDDgQBACgOAg8tDA8QLQ4MECcCDwQQLQgAEC0MDhEAEAAPACUAABdQLQQAAC0MEQwnAg4EBQA4BQ4QLQ0QDy0IAQ4nAhAEAgAQARABJwMOBAEAKA4CEC0MEBEtDg8RJwIQBBEtCAARLQwOEgAQABAAJQAAF1AtBAAALQwSDycCDgQGADgFDhEtDREQLQgBDicCEQQCABABEQEnAw4EAQAoDgIRLQwREi0OEBInAhEEEi0IABItDA4TABAAEQAlAAAXUC0EAAAtDBMQJwIOBAcAOAUOEi0NEhEtCAEOJwISBAIAEAESAScDDgQBACgOAhItDBITLQ4REycCEgQTLQgAEy0MDhQAEAASACUAABdQLQQAAC0MFBEAOAUKEi0NEg4tCAEFJwIKBAIAEAEKAScDBQQBACgFAgotDAoSLQ4OEicCDgQSLQgAEi0MBRMAEAAOACUAABdQLQQAAC0MEwoKOAkEBSQCAAUAAAaqJQAAF3UeAgAFACcCDgQBJwITBAMAOA4TEi0IAQkAEAESAScDCQQBACgJAhItDg4SACgSAhItDg4SJwISBAMAOAkSDi0MDhItDgMSLQ0JDgAoDgIOLQ4OCScCEgQBJwIUBAMAOBIUEy0IAQ4AEAETAScDDgQBACgOAhMtDhITACgTAhMtDhITJwITBAMAOA4TEi0MEhMtDgQTJwIUBBUtCAAVLgiASQAWLQwJFy4IgEkAGC0MDhkAEAAUACUAABeHLQQAAC0MFhItDBcTLQ0TFAAoFAIULQ4UEykCABQAcW4J0QAoEgIVLgQAE4ADKACABAQAASUAABhWLgiABQAWLgiABgAXLQ4UFwAoFgIULQ0UEycCFwQCADgUFxI5A4iAQ4BDAAUAEgATIAIABSECABItCAEUACgUAhctDRcWJwIYBAIAOBcYFSI0gEYAEgAVLQwSFicCGAQDADgWGBcAEAEXAScDFAQBACgUAhgtDhYYACgYAhgtDhYYLQwWEwYoEwITJAIABQAACF4jAAAINS0NFAUAKAUCBS0OBRQAKBQCDy0NDwwnAhAEAgA4DxAFPA0FDCMAAAheCygAE4BGAAUkAgAFAAAIdycCDAQAPAkBDC0IAQUnAgwEBAAQAQwBJwMFBAEAKAUCDC0MDA8uCoBHAA8AKA8CDy4KgEcADwAoDwIPLgqARwAPLQgBDCcCDwQFABABDwEnAwwEAQAoDAIPLQwPEC4KgEcAEAAoEAIQLgqARwAQACgQAhAuCoBHABAAKBACEC4KgEwAEC0IAQ8AAAECAS0OBQ8tCAEFAAABAgEtDgwFLQgBDAAAAQIBLgqARgAMLQgBEAAAAQIBLgqARQAQJwIRAAgnAhIEEy0IABMtDA8ULQwFFS0MDBYtDBAXLQwRGAAQABIAJQAAFQItBAAAJwIRBBItCAASLQwPEy0MBRQtDAwVLQwQFi0MAxcAEAARACUAABUCLQQAAC0NEBELKAARgEUAEiQCABIAAAmiJwITBAA8CQETJwIRBBItCAASLQwPEy0MBRQtDAwVLQwQFgAQABEAJQAAFistBAAALQ0PES0NBRItDQwTLQ4RDy0OEgUtDhMMLgqASAAQASgAEoBJAAwtDQwFCygABYBHAAwLKAAMgEUADyQCAA8AAAoQJQAAFz4tCAEMJwIPBAQAEAEPAScDDAQBACgMAg8tDA8QLgqARwAQACgQAhAuCoBHABAAKBACEC4KgEcAEC0IAQ8nAhAEBQAQARABJwMPBAEAKA8CEC0MEBEuCoBHABEAKBECES4KgEcAEQAoEQIRLgqARwARACgRAhEuCoBMABEtCAEQAAABAgEtDgwQLQgBDAAAAQIBLQ4PDC0IAQ8AAAECAS4KgEYADy0IAREAAAECAS4KgEUAEScCEgQTLQgAEy0MEBQtDAwVLQwPFi0MERctDAUYABAAEgAlAAAVAi0EAAAnAgUEEi0IABItDBATLQwMFC0MDxUtDBEWLQwEFwAQAAUAJQAAFQItBAAALQ0RBQsoAAWARQASJAIAEgAACzYnAhMEADwJARMnAgUEEi0IABItDBATLQwMFC0MDxUtDBEWABAABQAlAAAWKy0EAAAtDRAFLQ0MEi0NDxMtDgUQLQ4SDC0OEw8uCoBIABEBKAASgEkADC0NDAULKAAFgEcADAsoAAyARQAPJAIADwAAC6QlAAAXPi8MAAUADAA4BQ0PLwwADwAFLQgBDScCDwQCABABDwEnAw0EAQAoDQIPLQwPEC0ODBAnAg8EEC0IABAtDA0RABAADwAlAAAXUC0EAAAtDBEMHAwFDwUcDA8NAB4CAAUALQ0JDwAoDwIPLQ4PCS0NDg8AKA8CDy0ODw4nAhEEEi0IABIuCIBJABMtDAkULgiASQAVLQwOFgAQABEAJQAAF4ctBAAALQwTDy0MFBAtDRAJACgJAgktDgkQHAwMCQAnAhEEAicCEwQDADgRExItCAEOABABEgEnAw4EAQAoDgISLQ4REgAoEgISLQ4REicCEgQDADgOEhEtDBESLQ4JEgAoEgISLQ4NEicCEQQSLQgAEi0MDxMtDBAULQwLFS0MDhYAEAARACUAABeHLQQAAC0MEwktDBQNLQ0NCwAoCwILLQ4LDSkCAAsAjDAZFAAoCQIOLgQADYADKACABAQAASUAABhWLgiABQAPLgiABgAQLQ4LEAAoDwINLQ0NCycCEAQCADgNEAk5A4iAQ4BDAAUACQALIAIABSECAAktCAENACgNAhAtDRAPJwIRBAIAOBARDiI0gEYACQAOLQwJDycCEQQDADgPERAAEAEQAScDDQQBACgNAhEtDg8RACgRAhEtDg8RLQwPCwYoCwILJAIABQAADcgjAAANny0NDQUAKAUCBS0OBQ0AKA0CDi0NDgknAg8EAgA4Dg8FPA0FCSMAAA3ICygAC4BJAAUkAgAFAAAN4ScCCQQAPAkBCQEoAA2ARAAJLQ0JBRwMBQsGHAwLCQAcDAkFBgA4BQIJDjgFCQskAgALAAAOEyUAABnQDDgJCgUkAgAFAAAOJSUAABniLQgBBScCCQQEABABCQEnAwUEAQAoBQIJLQwJCi4KgEcACgAoCgIKLgqARwAKACgKAgouCoBHAAotCAEJJwIKBAUAEAEKAScDCQQBACgJAgotDAoLLgqARwALACgLAgsuCoBHAAsAKAsCCy4KgEcACwAoCwILLgqATAALLQgBCgAAAQIBLQ4FCi0IAQUAAAECAS0OCQUtCAEJAAABAgEuCoBGAAktCAELAAABAgEuCoBFAAsnAg0ABCcCDgQPLQgADy0MChAtDAURLQwJEi0MCxMtDA0UABAADgAlAAAVAi0EAAAnAg0EDi0IAA4tDAoPLQwFEC0MCREtDAsSLQwDEwAQAA0AJQAAFQItBAAALQ0LDQsoAA2ARQAOJAIADgAAD1AnAg8EADwJAQ8nAg0EDi0IAA4tDAoPLQwFEC0MCREtDAsSABAADQAlAAAWKy0EAAAtDQoNLQ0FDi0NCQ8tDg0KLQ4OBS0ODwkuCoBIAAsBKAAOgEkACS0NCQULKAAFgEcACQsoAAmARQAKJAIACgAAD74lAAAXPi0IAQknAgoEBAAQAQoBJwMJBAEAKAkCCi0MCgsuCoBHAAsAKAsCCy4KgEcACwAoCwILLgqARwALLQgBCicCCwQFABABCwEnAwoEAQAoCgILLQwLDS4KgEcADQAoDQINLgqARwANACgNAg0uCoBHAA0AKA0CDS4KgEwADS0IAQsAAAECAS0OCQstCAEJAAABAgEtDgoJLQgBCgAAAQIBLgqARgAKLQgBDQAAAQIBLgqARQANJwIOBA8tCAAPLQwLEC0MCREtDAoSLQwNEy0MBRQAEAAOACUAABUCLQQAACcCBQQOLQgADi0MCw8tDAkQLQwKES0MDRItDAQTABAABQAlAAAVAi0EAAAtDQ0FCygABYBFAA4kAgAOAAAQ5CcCDwQAPAkBDycCBQQOLQgADi0MCw8tDAkQLQwKES0MDRIAEAAFACUAABYrLQQAAC0NCwUtDQkOLQ0KDy0OBQstDg4JLQ4PCi4KgEgADQEoAA6ASQAJLQ0JBQsoAAWARwAJCygACYBFAAokAgAKAAARUiUAABc+JwIOBA8tCAAPLQwGEC0MBxEtDAgSLQwFEy4IgEsAFC0MARUAEAAOACUAABn0LQQAAC0MEAktDBEKLQwSCy0MEw0vDAANAAEtCAEFJwIOBAIAEAEOAScDBQQBACgFAg4tDA4PLQ4BDycCDgQPLQgADy0MBRAAEAAOACUAABdQLQQAAC0MEAEpAgAFBjuaygAEOAIFDgY4DgUQCjgQAg8kAgAPAAAR/SUAAB3SBjgODAIAOAECBQ44AQUMJAIADAAAEhklAAAZ0BwMBQEAMAwAAQANLQgBAScCBQQEABABBQEnAwEEAQAoAQIFLQwFDC4KgEcADAAoDAIMLgqARwAMACgMAgwuCoBHAAwtCAEFJwIMBAUAEAEMAScDBQQBACgFAgwtDAwNLgqARwANACgNAg0uCoBHAA0AKA0CDS4KgEcADQAoDQINLgqATAANLQgBDAAAAQIBLQ4BDC0IAQEAAAECAS0OBQEtCAEFAAABAgEuCoBGAAUtCAENAAABAgEuCoBFAA0nAg4ABicCDwQQLQgAEC0MDBEtDAESLQwFEy0MDRQtDA4VABAADwAlAAAVAi0EAAAnAg4EDy0IAA8tDAwQLQwBES0MBRItDA0TLQwDFAAQAA4AJQAAFQItBAAALQ0NAwsoAAOARQAOJAIADgAAE08nAg8EADwJAQ8nAgMEDi0IAA4tDAwPLQwBEC0MBREtDA0SABAAAwAlAAAWKy0EAAAtDQwDLQ0BDi0NBQ8tDgMMLQ4OAS0ODwUuCoBIAA0BKAAOgEkAAy0NAwELKAABgEcAAwsoAAOARQAFJAIABQAAE70lAAAXPicCDgQPLQgADy0MBhAtDAcRLQwIEi0MARMuCIBKABQtDAQVABAADgAlAAAZ9C0EAAAtDBADLQwRBS0MEgwtDBMNLwwADQABLQgBBCcCBgQCABABBgEnAwQEAQAoBAIGLQwGBy0OAQcnAgYEDi0IAA4tDAQPABAABgAlAAAXUC0EAAAtDA8BADgBAgQOOAEEBiQCAAYAABRaJQAAGdAcDAQBADAMAAEADSYtDQsMHAwFDgAAOAkODy8MAA8ADi4EAAyAAygAgAQEAAklAAAd5C4IgAUADwAoDwIQADgQBREtDg4RLQ4PCwEoAAWASQAMLQwMBSMAAAT6KACABAR4AA0AAACABIADJACAAwAAFN0qAQABBfeh86+lrdTKPAEBAiYqAQABBb4eP/8+pPb6PAEBAiYqAQABBd5cwynz1M2fPAEBAiYlAAAUtS0NAwYtDQQHCygAB4BFAAgkAgAIAAAVKCcCCQQAPAkBCQsoAAaARAAHJAIABwAAFbcjAAAVPS0NAQYtDQIHLQ0DCC0NBAkNKAAIgEQACiQCAAoAABViJQAAHnIuBAAGgAMoAIAEBAAEJQAAHeQuCIAFAAoAKAoCCwA4CwgMLQ4FDAEoAAiASQAFDjgIBQYkAgAGAAAVoiUAABnQLQ4KAS0OBwItDgUDLQ4JBCMAABYqJwIGBActCAAHLQwBCC0MAgktDAMKLQwECwAQAAYAJQAAFistBAAALQ0BBi0NAgctDQQILgQABoADKACABAQABCUAAB3kLgiABQAJACgJAgoBKAAKgEYACy0OBQstDgkBLQ4HAi4KgEkAAy0OCAQjAAAWKiYlAAAUtS4IgEYABSMAABY7DSgABYBEAAYkAgAGAAAWqyMAABZQLQ0BBS0NAgYtDQMHLQ0ECC0NBgkAKAkCCS0OCQYnAgkEBC0IAQonAgsEBQAQAQsBJwMKBAEAKAYCCycCDAQEACgKAg0/DwALAA0tDgUBLQ4KAi0OBwMtDggEJi0NAwYMOAUGBwEoAAWASQAGJAIABwAAFskjAAAXNS0NAQctDQIILQ0DCS0NBAoAKAgCDAA4DAUNLQ0NCwAoBwINADgNBQ4tDQ4MADgLDA0uBAAIgAMoAIAEBAAFJQAAHeQuCIAFAAsAKAsCDAA4DAUOLQ4NDi0OBwEtDgsCLQ4JAy0OCgQjAAAXNS0MBgUjAAAWOyoBAAEFAtxuJ4B2Ep08AQECJiUAABS1ASgAAYBJAAMtDQMCHAwCAwYcDAMBABwMAQIGLQwCASYqAQABBUimhcCSwGihPAEBAiYlAAAUtS0IAQYAAAECAS0OAQYtCAEBAAABAgEtDgIBLQ0EAgAoAgICLQ4CBC4IgEYABSMAABe+DDgFAwIkAgACAAAX4SMAABfQLQ0GAi0NAQMtDAIBLQwDAiYkAgACAAAX7iUAAB5yJwIIBAMAOAQIBwA4BwUILQ0IAi0NBgctDQEILQ0ICQAoCQIJLQ4JCAAoBwIJLgQACIADKACABAQAASUAAB6ELgiABQAKLgiABgALLQ4CCy0OCQYtDgoBASgABYBJAAItDAIFIwAAF74uAYADgAcBAIADAAKACy4BgAuACAEAgAsAAoALLgGAC4AJAQCACwACgAoBAIAIgASACw8AgAuACYAMCwCABwACgA0kAIAMAAAYpSMAABkVJACADQAAGLIjAAAYyy4AgAOABQEAgAUAAoAOLgKAC4AOIwAAGRAoAIAPBAADAQCACYAPgA4uAAABgAUBAAABgA4AASgBgAUEAAEBAIAFAAKADi4CgAuADgEAgA4AAoAOLgKACYAOIwAAGRAjAAAZaSgAgA8EAAIFAIALgA+ADigAgBAEAAMBAIAOgBCADy4AAAGABQEAAAGADwABKAGABQQAAQEAgAUAAoAPLgKAC4APAQCADwACgA8uAoAOgA8jAAAZaSgAgA0EAAMBAIAFgA2ADAEAgAyABIANAwCACAACgA4BAIANgA6ADwEAgAqADoAQDQCAEIAKgA4kAIAOAAAZyS4BgBCAES4CgBGADwMAgBAAAoAQAwCADwACgA8jAAAZmC4AgAyABiYqAQABBUWnynEZQeQVPAEBAiYqAQABBQ0082jxYkoAPAEBAiYlAAAUtS0IAQsnAgwEBAAQAQwBJwMLBAEAKAsCDC0MDA0uCoBHAA0AKA0CDS4KgEcADQAoDQINLgqARwANLQgBDCcCDQQFABABDQEnAwwEAQAoDAINLQwNDi4KgEcADgAoDgIOLgqARwAOACgOAg4uCoBHAA4AKA4CDi4KgEwADi0IAQ0AAAECAS0OCw0tCAELAAABAgEtDgwLLQgBDAAAAQIBLgqARgAMLQgBDgAAAQIBLgqARQAOJwIPBBAtCAAQLQwNES0MCxItDAwTLQwOFC0MBBUAEAAPACUAABUCLQQAACcCBAQPLQgADy0MDRAtDAsRLQwMEi0MDhMtDAYUABAABAAlAAAVAi0EAAAtDQ4ECygABIBFAAYkAgAGAAAbHycCDwQAPAkBDycCBAQPLQgADy0MDRAtDAsRLQwMEi0MDhMAEAAEACUAABYrLQQAAC0NDQQtDQsGLQ0MDy0OBA0tDgYLLQ4PDC4KgEgADgEoAAaASQALLQ0LBCcCBgBOCjgFBgsLKAAEgEcABiQCAAsAAB2XIwAAG48nAgsAWQo4BQsMJAIADAAAHW0jAAAbpicCCwBbCjgFCwwkAgAMAAAdQyMAABu9JwILAF0KOAULDCQCAAwAAB0ZIwAAG9QLKAAFgEoACyQCAAsAABzvIwAAG+knAgsAYgo4BQsMJAIADAAAHMUjAAAcAAsoAAWASwALJAIACwAAHJsjAAAcFScCCwBnCjgFCwwkAgAMAAAccSMAABwsJwILAGoKOAULDCQCAAwAABxHJwINBAA8CQENCygABoBFAAUkAgAFAAAcXCUAABc+LQwBBy0MAggtDAMJLQwECiMAAB3BCygABoBFAAUkAgAFAAAchiUAABc+LQwBBy0MAggtDAMJLQwECiMAAB3BCygABoBFAAUkAgAFAAAcsCUAABc+LQwBBy0MAggtDAMJLQwECiMAAB3BCygABoBFAAUkAgAFAAAc2iUAABc+LQwBBy0MAggtDAMJLQwECiMAAB3BCygABoBFAAUkAgAFAAAdBCUAABc+LQwBBy0MAggtDAMJLQwECiMAAB3BCygABoBFAAUkAgAFAAAdLiUAABc+LQwBBy0MAggtDAMJLQwECiMAAB3BCygABoBFAAUkAgAFAAAdWCUAABc+LQwBBy0MAggtDAMJLQwECiMAAB3BCygABoBFAAUkAgAFAAAdgiUAABc+LQwBBy0MAggtDAMJLQwECiMAAB3BCygABoBFAAUkAgAFAAAdrCUAABc+LQwBBy0MAggtDAMJLQwECiMAAB3BLQwKBC0MBwEtDAgCLQwJAyYqAQABBWRhiKjGz5TLPAEBAiYuAYADgAYLAIAGAAKAByQAgAcAAB3/IwAAHgouAIADgAUjAAAecS4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAB5dLgGACoAILgKACIALAQCACgACgAoBAIALAAKACyMAAB4sKAGABQQAAQMAgAYAAoAGIwAAHnEmKgEAAQXFa8RaDhAAAjwBAQImLgGAA4AHAQCAAwACgAsuAYALgAgBAIALAAKACy4BgAuACQEAgAsAAoAKAQCACIAEgAsPAIALgAmADAsAgAcAAoANJACADAAAHtMjAAAfQyQAgA0AAB7gIwAAHvkuAIADgAUBAIAFAAKADi4CgAuADiMAAB8+KACADwQAAwEAgAmAD4AOLgAAAYAFAQAAAYAOAAEoAYAFBAABAQCABQACgA4uAoALgA4BAIAOAAKADi4CgAmADiMAAB8+IwAAH5coAIAPBAACBQCAC4APgA4oAIAQBAADAQCADoAQgA8uAAABgAUBAAABgA8AASgBgAUEAAEBAIAFAAKADy4CgAuADwEAgA8AAoAPLgKADoAPIwAAH5coAIANBAADAQCABYANgAwLAIADgAWADSQAgA0AAB/7AQCACoAIgA8uAIAKgBAuAIAMgBELAIAQgA+AEiQAgBIAAB/7LgGAEIAOLgKADoARAQCAEAACgBABAIARAAKAESMAAB/KAQCADIAIgAYm",
      "debug_symbols": "",
      "brillig_names": [
        "_deposit"
      ]
    },
    {
      "name": "sync_notes",
      "is_unconstrained": true,
      "custom_attributes": [
        "aztec::macros::functions::utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "sync_notes"
      ]
    },
    {
      "name": "get_total_borrowed_assets",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "market_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "asset_address",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 128
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_total_borrowed_assets"
      ]
    },
    {
      "name": "get_position",
      "is_unconstrained": true,
      "custom_attributes": [
        "utility",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "owner",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "market_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "asset_address",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "position::Position",
            "fields": [
              {
                "name": "collateral",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 128
                }
              },
              {
                "name": "scaled_debt",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 128
                }
              },
              {
                "name": "debt",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 128
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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lLKSMk0pKynTlLJGZJ1RVlKmKWUlZZpSVlKmKWUlZZpSVlKmGWWNpExTykrKNKWspExTykrKNKWsEVlnlJWUaUpZSZmmlJWUaUpZSZmmlJWUaUZZEynTlLKSMk0pKynTlLKSMk0pa0TWGWUlZZpSVlKmKWUlZZpSVlKmKWUlZZpR1kzKNKWspExTykrKpERWH9OGsJ7JGtsma1qW9l1WUqYpZY3IOqOspExTykrKNKWspExTykrKNKWspEwzylpImaaUlZRpSllJmaaUlZRpSlkjss4oKynTlLKSMk0pKynTlLKSMk0pKynTjLJWUqYpZSVlmlJWUqYpZSVlmlLWiKwzykrKNKWspExTykrKNKWspExTykrKNKOsjZRpSllJmaaUlZRpSllJmaaUNSLrjLKSMk0pKynTlLKSMk0pKynTlLKSMk0o6+1/Q9YZZSVlmlJWUqYpZSVlmlLWiKwzykrKNKWspExTykrKNKWspExTykrKNKOsjpRpSllJmaaUlZRpSllJmaaUNSLrjLKSMk0pKynTlLKSMk0pKynTlLKSMs0oqydlmlJWUqYpZSVlmlJWUqYpZY3IOqOspExTykrKNKWspExTykrKNKWspEwzyhpImaaUlZRpSllJmaaUlZRpSlkjss4oKynTlLKSMk0pKynTlLKSMk0pKynTjLJGUqYpZSVlmlJWUqYpZSVlmlLWiKwzykrKNKWspExTykrKNKWspExTykrKNKOsiZRpSllJmaaUlZRpSllJmaaUNSLrjLKSMk0pKynTlLKSMk0pKynTlLKSMs0oayZlmlJWUqYpZSVlmlJWUqYpZY3IOqOspExTykrKNKWspExTykrKNKWspEwzylpImaaUlZRpSllJmaaUlZRpSlkjss4oKynTlLKSMk0pKynTlLKSMk0pKynTjLJWUqYpZSVlmlJWUqYpZSVlmlLWiKwzykrKNKWspExTykrKNKWspExTykrK9HNZ8+I2WcvzxHdlvX2k26A8y/qiCOqyFkFx7exov7T1aO/Lb0f/krWRMk0pKynTlLKSMk0pKynTlLJGZJ1RVlKmKWUlZZpSVlKmKWUlZZpSVlKmCWXNCynTlLKSMk0pKynTlLKSMg0pawxhPTrWs1uEOfqvg3N+lEDIe6tsj5uPy9M09g/Objs6+7ScHO2Ky1tVlb/uTx5/ett45+aearfu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SMvwK3DDr8APv4Iw/Ari8CtIw69g+GtyGv6KlvRf0Q53HvDL/r65vuS6/rDDl+LiY9xXR7i/o+wPxsXOcalzXO4cVzrH1c5xrW/c/rPrPxjnOsd11kvprJfSWS+ls15KZ72UznopnfVSOuul/qRefP0+znWO853jQue42DkudY7LneNK57jaOa71jWud9dI666V11kvrrJfWWS+ts15aZ720znppP6mXmL+Pa13j3LJ0jnOd43znuNA5LnaOS53jcue40jmudo7rrBfXWS+us15cZ724znpxnfXiXtRLXcI27jnXTXuxrstly3Xz0702l+vO0f72P6+f7erj6LznK1yLbT14ceX44OJWF1Xyk71Je8fGun5uet6tLpUvLtkqF7cWTAplh0uByy6XCpddLg0ue1z8ApddLg4uu1z8TFyWB5d2wiX4x6Nf4SloCGFvA9RbP7ryuLWYj88Oae/o6tY51xBPjs2bPjnk34696xPQR7U+EX1+pE92mz5l2eE4lV8Q5DiVvxDkOJUfEeQ4lX8R5DiV35HjGKbyR4IcJfxU2jj6JT6juU/J65tS0DelqG9KSd+Usr4pFX1TenVxr26b0vPOAOvNgdD6xsWlc5zrHOc7x4XOcbFzXOoclzvHlc5xnfUSO+slddZL6qyX1FkvqbNeUme9pM56SZ31kn5SL/77TcRUO8e1vnF56RznOsf5znGhc1zsHJc6x+XOcZ31kjvrJXfWS+msl9JZL6WzXkpnvbz68WLbrISvi6uDmKXrbuK/+nHm/FyObya9+vGpeS4FLrtcKlx2uTS47HF59eNv81zcTFzmu0n86iEC9FGiTxDQ52W0tqdP8+tif72LJm2H+1a/lhDHX0Iafwl5/CWU8ZdQx19CG34JbdG9hFja+tRyrKHuLMCNvgA/+gKUX5fPF6D8qny+AOXX5PMFKL8iny9g/3pcl7h9SXVL+Pd/zG5fPDh5Pq51jfMvHpw8H+c6x/nOcaFzXOwcl16NK49xPn0flzvHvagXt3krX/2Sv4+rneNa37gXD06ej3Od43znuNA5LnaOS53jcue4znpxnfXiOuvFd9aL76wX31kvvrNefGe9+J/Uy9Nmi9u43DmudI6rneNa37iwdI5zneN857jQOS52juusl9BZL6GzXkJnvYTOeomd9RI76yV21kv8Sb2E+n1c7ByXOsflznGl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stfYl73Gvuw19mWvsS97jX3Za+zLXmNf9hr7stf4Intt2y8MXYtuZ9iLKtm29HPPr4j5Nez7zxjrsj4rW8PjMdHbfeOdY1td3xDT2u/H3qcTdE0n6ppO0jWdrGs6Rdd0qq7pNFXTeXXvQGo6Ttd0dJ2Vg66zctB1Vg66zspB11k56DorB11n5aDrrBw/fVbO2y4ry/Pblbf5OGXz8crmE5TNJyqbT1I2n/0N1F1d9xnx3qWT+bhclm36uXzbvSDu3++9+kvqJ76kXfIlIT++JIenL9l5Iq+GdWOgsDzv+7Tsb6e6bHuuLeHx7H2776wU929qK5p/2vjnFML3+bvB5+8Hn38YfP5x8PmnweefB59/GXz+dfD5a7/+nsw/D379zYNff/Pg1988+PU3D379zYNff/Pg1988+PU3D379zYNff8vg198y+PW3DH79LYNff8vg198y+PW3DH79LYNff8vg198y+PW3Dn79rYNff+vg1986+PW3Dn79rYNff+vg1986+PW3Dn79rYNff9vg1982+PW3DX79bYNff9vg1982+PW3DX79bYNff9vg19829vU3LWNff9My9vU3LWNff9My9vU3LWNff9My9vU3LWNff9My9vU3LWNff9My+PXXDX79dYNff93g1183+PXXDX79dYNff93g1183+PXXDX79dYNff/3g118/+PXXD3799YNff/3g118/+PXXD3799YNff/3g118/+PU3DH79DYNff8Pg198w+PU3DH79DYNff8Pg198w+PU3DH79DYNff+Pg1984+PU3Dn79jYNff+Pg1984+PU3Dn79jYNff+Pg11/1+1+dzH/w/a/S4PtfpcH3v0qD73+VBt//Kg2+/1UafP+rNPj+V2nw/a/S4PtfpcH3v0qD73+VBt//Kg2+/1UafP+rNPj+V2nw/a/S4PtfpcH3v0qD73+VBt//Kg2+/1UafP+rNPj+V2nw/a/S4PtfpcH3v0qD73+VBt//Kg2+/1UafP+rNPj+V2nw/a/S4PtfpcH3v0qD73+VBt//Kg2+/1UafP+rNPj+V2nw/a/S4PtfpcH3v0qD73+VBt//Kg2+/1UafP+rNPj+V2nw/a/S4Ptf5cH3v8qD73+VB9//Kg++/1Vexr7+5sH3v8qD73+VB9//Kg++/1UefP+rPPj+V3nw/a/y4Ptf5cH3v8qD73+V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",
      "brillig_names": [
        "get_position"
      ]
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "951653053333916160": {
            "error_kind": "string",
            "string": "Deposit cap exceeded"
          },
          "1602191554767750373": {
            "error_kind": "string",
            "string": "Function _borrow can only be called internally"
          },
          "1840251649407153602": {
            "error_kind": "string",
            "string": "Insufficient borrowed amount"
          },
          "2830029349304997821": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4270187767586857285": {
            "error_kind": "string",
            "string": "Function _compute_total_collateral_value can only be called internally"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5235018679007078561": {
            "error_kind": "string",
            "string": "Invalid asset or market id"
          },
          "6787403583199288031": {
            "error_kind": "string",
            "string": "Insufficient balance"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8945853978429536226": {
            "error_kind": "string",
            "string": "Function _compute_collateral_debt_value can only be called internally"
          },
          "10435052277855889085": {
            "error_kind": "string",
            "string": "Function _withdraw can only be called internally"
          },
          "12348881442450494403": {
            "error_kind": "string",
            "string": "Function _compute_utilization_rate can only be called internally"
          },
          "13135008234568508716": {
            "error_kind": "string",
            "string": "Function _repay can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14434150440419769526": {
            "error_kind": "string",
            "string": "collateral >= debt"
          },
          "14687457983715723088": {
            "error_kind": "string",
            "string": "Asset is not borrowable"
          },
          "15333773746166717806": {
            "error_kind": "string",
            "string": "Insufficient collateral"
          },
          "16022896159229267359": {
            "error_kind": "string",
            "string": "Function _deposit can only be called internally"
          },
          "16523063005220065570": {
            "error_kind": "string",
            "string": "Function _liquidate can only be called internally"
          },
          "17134621154673181869": {
            "error_kind": "string",
            "string": "Function _compute_borrow_rate can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "compute_total_deposited_assets",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "market_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "asset_address",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "deposit_accumulator",
            "type": {
              "kind": "struct",
              "path": "accumulator::Accumulator",
              "fields": [
                {
                  "name": "value",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 128
                  }
                },
                {
                  "name": "last_updated_ts",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 64
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 128
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "compute_total_deposited_assets"
      ]
    },
    {
      "name": "_compute_total_collateral_value",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "market_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "owner",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 128
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "4270187767586857285": {
            "error_kind": "string",
            "string": "Function _compute_total_collateral_value can only be called internally"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "_compute_total_collateral_value"
      ]
    },
    {
      "name": "_borrow",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "owner",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "market_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "asset_address",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "1602191554767750373": {
            "error_kind": "string",
            "string": "Function _borrow can only be called internally"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14687457983715723088": {
            "error_kind": "string",
            "string": "Asset is not borrowable"
          },
          "15333773746166717806": {
            "error_kind": "string",
            "string": "Insufficient collateral"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "_borrow"
      ]
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "PriceFeed"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "assets",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Token"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "minters",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000002"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "symbol",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "name",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "decimals",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000a"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Lending"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "market_assets",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "market_assets_list",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000002"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "market_assets_list_len",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "scaled_deposited_assets",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "scaled_borrowed_assets",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "scaled_total_deposited_assets",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "scaled_total_borrowed_assets",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000007"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "deposit_accumulators",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "borrow_accumulators",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000009"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "secret",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "on_behalf_of",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "market_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "collateral_asset",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Lending::deposit_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Lending::deposit_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "secret",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "market_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "asset_address",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Lending::borrow_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Lending::borrow_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "owner",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "market_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "asset_address",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Lending::_borrow_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Lending::_borrow_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "market_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "asset_address",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "deposit_accumulator",
                    "type": {
                      "fields": [
                        {
                          "name": "value",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 128
                          }
                        },
                        {
                          "name": "last_updated_ts",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 64
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "accumulator::Accumulator"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Lending::compute_total_deposited_assets_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 128
              }
            }
          ],
          "kind": "struct",
          "path": "Lending::compute_total_deposited_assets_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "market_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "owner",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Lending::_compute_total_collateral_value_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 128
              }
            }
          ],
          "kind": "struct",
          "path": "Lending::_compute_total_collateral_value_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "market_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "owner",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Lending::_compute_collateral_debt_value_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 128
              }
            }
          ],
          "kind": "struct",
          "path": "Lending::_compute_collateral_debt_value_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "owner",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "market_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "asset_address",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Lending::repay_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Lending::repay_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "market_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "collateral_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "debt_token",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "user",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "debt_to_liquidate_amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  }
                ],
                "kind": "struct",
                "path": "Lending::_liquidate_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Lending::_liquidate_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "market_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "collateral_asset",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Lending::withdraw_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Lending::withdraw_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "owner",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "market_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "collateral_asset",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Lending::_withdraw_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Lending::_withdraw_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "market_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "asset_address",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Lending::borrow_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Lending::borrow_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "on_behalf_of",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "market_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "collateral_asset",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Lending::deposit_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Lending::deposit_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "market_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "asset_address",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "oracle",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "loan_to_value",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "is_borrowable",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "optimal_utilization_rate",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "under_optimal_slope",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "over_optimal_slope",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "deposit_cap",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  }
                ],
                "kind": "struct",
                "path": "Lending::add_asset_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Lending::add_asset_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "asset",
                    "type": {
                      "fields": [
                        {
                          "name": "asset_address",
                          "type": {
                            "fields": [
                              {
                                "name": "inner",
                                "type": {
                                  "kind": "field"
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                          }
                        },
                        {
                          "name": "loan_to_value",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 128
                          }
                        },
                        {
                          "name": "oracle",
                          "type": {
                            "fields": [
                              {
                                "name": "inner",
                                "type": {
                                  "kind": "field"
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                          }
                        },
                        {
                          "name": "is_borrowable",
                          "type": {
                            "kind": "boolean"
                          }
                        },
                        {
                          "name": "optimal_utilization_rate",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 128
                          }
                        },
                        {
                          "name": "under_optimal_slope",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 128
                          }
                        },
                        {
                          "name": "over_optimal_slope",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 128
                          }
                        },
                        {
                          "name": "deposit_cap",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 128
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "asset::Asset"
                    }
                  },
                  {
                    "name": "utilization_rate",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "precision",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  }
                ],
                "kind": "struct",
                "path": "Lending::_compute_borrow_rate_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 128
              }
            }
          ],
          "kind": "struct",
          "path": "Lending::_compute_borrow_rate_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "market_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "collateral_asset",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "debt_asset",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "user",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "debt_to_cover",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  }
                ],
                "kind": "struct",
                "path": "Lending::liquidate_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Lending::liquidate_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "secret",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "on_behalf_of",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "market_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "asset_address",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Lending::repay_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Lending::repay_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "market_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "asset_address",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "precision",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "deposit_accumulator",
                    "type": {
                      "fields": [
                        {
                          "name": "value",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 128
                          }
                        },
                        {
                          "name": "last_updated_ts",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 64
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "accumulator::Accumulator"
                    }
                  },
                  {
                    "name": "borrow_accumulator",
                    "type": {
                      "fields": [
                        {
                          "name": "value",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 128
                          }
                        },
                        {
                          "name": "last_updated_ts",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 64
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "accumulator::Accumulator"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Lending::_compute_utilization_rate_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 128
              }
            }
          ],
          "kind": "struct",
          "path": "Lending::_compute_utilization_rate_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "secret",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "market_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "collateral_asset",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Lending::withdraw_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Lending::withdraw_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "owner",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "market_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "asset_address",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Lending::_repay_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Lending::_repay_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Lending::constructor_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Lending::constructor_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "owner",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "market_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "collateral_asset",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Lending::_deposit_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Lending::_deposit_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "market_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "asset_address",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Lending::update_accumulators_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Lending::update_accumulators_abi"
        }
      ]
    }
  },
  "file_map": {
    "100": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    },
    "102": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/notes.nr",
      "source": "use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n"
    },
    "103": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/storage.nr",
      "source": "use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    },
    "104": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/utils.nr",
      "source": "use std::meta::unquote;\n\npub(crate) comptime fn get_fn_visibility(f: FunctionDefinition) -> Quoted {\n    if f.has_named_attribute(\"private\") {\n        quote { private }\n    } else if f.has_named_attribute(\"public\") {\n        quote { public }\n    } else {\n        panic(f\"Function is neither private nor public\")\n    }\n}\n\npub(crate) comptime fn is_fn_private(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"private\")\n}\n\npub(crate) comptime fn is_fn_public(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"public\")\n}\n\npub(crate) comptime fn is_fn_utility(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"utility\")\n}\n\npub(crate) comptime fn is_fn_contract_library_method(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"contract_library_method\")\n}\n\npub(crate) comptime fn is_fn_test(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"test\")\n}\n\npub(crate) comptime fn is_fn_view(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"view\")\n}\n\npub(crate) comptime fn is_fn_internal(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"internal\")\n}\n\npub(crate) comptime fn is_fn_initializer(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"initializer\")\n}\n\npub(crate) comptime fn fn_has_noinitcheck(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"noinitcheck\")\n}\n\n/// Takes a function body as a collection of expressions, and alters it by prepending and appending quoted values.\npub(crate) comptime fn modify_fn_body(body: [Expr], prepend: Quoted, append: Quoted) -> Expr {\n    // We need to quote the body before we can alter its contents, so we fold it by quoting each expression.\n    let mut body_quote = body.fold(quote {}, |full_quote: Quoted, expr: Expr| {\n        let expr_quote = expr.quoted();\n        quote {\n                $full_quote\n                $expr_quote\n            }\n    });\n    body_quote = quote {\n        {\n            $prepend\n            $body_quote\n            $append\n        }\n    };\n    let body_expr = body_quote.as_expr();\n    body_expr.expect(f\"Body is not an expression: {body_quote}\")\n}\n\npub(crate) comptime fn add_to_field_slice(slice_name: Quoted, name: Quoted, typ: Type) -> Quoted {\n    if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        quote { $slice_name = $slice_name.push_back($name as Field); }\n    } else if typ.as_data_type().is_some() {\n        // We invoke serialize as a static trait function rather than calling $name.serialize() directly in the quote\n        // to avoid \"trait not in scope\" compiler warnings.\n        quote { $slice_name = $slice_name.append(aztec::protocol_types::traits::Serialize::serialize($name)); }\n    } else if typ.as_array().is_some() {\n        let (element_type, _) = typ.as_array().unwrap();\n        let serialized_name = f\"{name}_serialized\".quoted_contents();\n        // We invoke serialize as a static trait function rather than calling x.serialize() directly in the quote\n        // to avoid \"trait not in scope\" compiler warnings.\n        quote {\n            let $serialized_name = $name.map(|x: $element_type | aztec::protocol_types::traits::Serialize::serialize(x));\n            for i in 0..$name.len() {\n                $slice_name = $slice_name.append($serialized_name[i].as_slice());\n            }\n        }\n    } else if typ.as_str().is_some() {\n        quote {\n            $slice_name = $slice_name.append($name.as_bytes().map(| byte: u8 | byte as Field).as_slice());\n        }\n    } else {\n        panic(\n            f\"Cannot add to slice: unsupported type {typ} variable {name}\",\n        )\n    }\n}\n\n/// Adds a value to a hash::ArgsHasher. Structs and values inside arrays are required to implement the Serialize trait.\npub(crate) comptime fn add_to_hasher(hasher_name: Quoted, name: Quoted, typ: Type) -> Quoted {\n    if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        quote { $hasher_name.add($name as Field); }\n    } else if typ.as_data_type().is_some() {\n        quote { $hasher_name.add_multiple(dep::aztec::protocol_types::traits::Serialize::serialize($name)); }\n    } else if typ.as_array().is_some() {\n        let (element_type, _) = typ.as_array().unwrap();\n        let serialized_name = f\"{name}_serialized\".quoted_contents();\n        quote {\n           let $serialized_name = $name.map(|x: $element_type | dep::aztec::protocol_types::traits::Serialize::serialize(x));\n            for i in 0..$name.len() {\n                $hasher_name.add_multiple($serialized_name[i]);\n            }\n        }\n    } else if typ.as_str().is_some() {\n        quote {\n            $hasher_name.add_multiple($name.as_bytes().map(| byte: u8 | byte as Field));\n        }\n    } else {\n        panic(\n            f\"Cannot add to hasher: unsupported type {typ} of variable {name}\",\n        )\n    }\n}\n\ncomptime fn signature_of_type(typ: Type) -> Quoted {\n    if typ.is_field() {\n        quote {Field}\n    } else if typ.as_integer().is_some() {\n        let (is_signed, bit_size) = typ.as_integer().unwrap();\n        if is_signed {\n            f\"i{bit_size}\".quoted_contents()\n        } else {\n            f\"u{bit_size}\".quoted_contents()\n        }\n    } else if typ.is_bool() {\n        quote {bool}\n    } else if typ.as_str().is_some() {\n        let str_len_typ = typ.as_str().unwrap();\n        let str_len = str_len_typ.as_constant().unwrap();\n        f\"str<{str_len}>\".quoted_contents()\n    } else if typ.as_array().is_some() {\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let element_typ_quote = signature_of_type(element_type);\n        f\"[{element_typ_quote};{array_len}]\".quoted_contents()\n    } else if typ.as_data_type().is_some() {\n        let (s, generics) = typ.as_data_type().unwrap();\n        let field_signatures = s\n            .fields(generics)\n            .map(|(_, typ): (Quoted, Type)| signature_of_type(typ))\n            .join(quote {,});\n        f\"({field_signatures})\".quoted_contents()\n    } else if typ.as_tuple().is_some() {\n        // Note that tuples are handled the same way as structs\n        let types = typ.as_tuple().unwrap();\n        let field_signatures = types.map(|typ: Type| signature_of_type(typ)).join(quote {,});\n        f\"({field_signatures})\".quoted_contents()\n    } else {\n        panic(f\"Unsupported type {typ}\")\n    }\n}\n\npub(crate) trait AsStrQuote {\n    fn as_str_quote(self) -> (Self, u32);\n}\n\nimpl<let N: u32, Env> AsStrQuote for Quoted {\n    // Used to convert an arbitrary quoted type into a quoted string, removing whitespace between tokens\n    comptime fn as_str_quote(self) -> (Quoted, u32) {\n        let tokens = self.tokens();\n        let mut acc: [u8] = &[];\n        let mut total_len: u32 = 0;\n        for token in tokens {\n            let token_as_fmt_str = f\"{token}\";\n            let token_as_str = unquote!(quote {$token_as_fmt_str});\n            let token_len = unquote!(quote { $token_as_str.as_bytes().len() });\n            let token_as_bytes = unquote!(quote { $token_as_str.as_bytes().as_slice() });\n            total_len += token_len;\n            acc = acc.append(token_as_bytes);\n        }\n        let result = unquote!(\n            quote {\n                let signature_as_array: [u8; $total_len] = $acc.as_array();\n                signature_as_array.as_str_unchecked()\n            },\n        );\n        (quote { $result }, total_len)\n    }\n}\n\npub(crate) comptime fn compute_fn_selector(f: FunctionDefinition) -> Field {\n    // The function selector is computed from the function signature, which is made up of the function name and types of\n    // parameters, but not including the return type. For example, given:\n    //\n    // fn foo(a: Field, b: AztecAddress) -> Field\n    //\n    // The signature will be \"foo(Field,AztecAddress)\".\n    let fn_name = f.name();\n    let args_signatures =\n        f.parameters().map(|(_, typ): (Quoted, Type)| signature_of_type(typ)).join(quote {,});\n    let signature_quote = quote { $fn_name($args_signatures) };\n    let (signature_str_quote, _) = signature_quote.as_str_quote();\n\n    let computation_quote = quote {\n        protocol_types::traits::ToField::to_field(protocol_types::abis::function_selector::FunctionSelector::from_signature($signature_str_quote))\n    };\n    unquote!(computation_quote)\n}\n\npub(crate) comptime fn compute_event_selector(s: TypeDefinition) -> Field {\n    // The event selector is computed from the type signature of the struct in the event, similar to how one might type\n    // the constructor function. For example, given:\n    //\n    // struct Foo {\n    //   a: Field,\n    //   b: AztecAddress,\n    // }\n    //\n    // The signature will be \"Foo(Field,AztecAddress)\".\n    let event_name = s.name();\n    let args_signatures = s\n        .fields_as_written()\n        .map(|(_, typ): (Quoted, Type)| {\n            // signature_of_type can handle structs, so this supports nested structs\n            // FIXME: Field generics are not handled here!\n            signature_of_type(typ)\n        })\n        .join(quote {,});\n    let signature_quote = quote { $event_name($args_signatures) };\n    let (signature_str_quote, _) = signature_quote.as_str_quote();\n\n    let computation_quote = quote {\n        protocol_types::traits::ToField::to_field(protocol_types::abis::event_selector::EventSelector::from_signature($signature_str_quote))\n    };\n    unquote!(computation_quote)\n}\n\n/// Returns how many storage slots a type needs to reserve for itself. State variables must implement the Storage trait\n/// for slots to be allocated for them.\npub(crate) comptime fn get_storage_size(typ: Type) -> u32 {\n    // We create a type variable for the storage size. We can't simply read the value used in the implementation because\n    // it may not be a constant (e.g. N + 1). We then bind it to the implementation of the Storage trait.\n    let storage_size = std::meta::typ::fresh_type_variable();\n    assert(\n        typ.implements(quote { crate::state_vars::Storage<$storage_size> }.as_trait_constraint()),\n        f\"Attempted to fetch storage size, but {typ} does not implement the Storage trait\",\n    );\n\n    storage_size.as_constant().unwrap()\n}\n\npub(crate) comptime fn module_has_storage(m: Module) -> bool {\n    m.structs().any(|s: TypeDefinition| {\n        s.has_named_attribute(\"storage\") | s.has_named_attribute(\"storage_no_init\")\n    })\n}\n\npub(crate) comptime fn module_has_initializer(m: Module) -> bool {\n    m.functions().any(|f: FunctionDefinition| is_fn_initializer(f))\n}\n\npub(crate) comptime fn is_note(typ: Type) -> bool {\n    typ.as_data_type().map_or(false, |struc: (TypeDefinition, [Type])| {\n        let (def, _) = struc;\n        def.has_named_attribute(\"note\")\n            | def.has_named_attribute(\"partial_note\")\n            | def.has_named_attribute(\"custom_note\")\n    })\n}\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `noir-protocol-circuits/crates/types/src/meta/mod.nr`. We maintain separate\n/// copies because importing it here from there would cause the `target_trait` to be interpreted in the context\n/// of the protocol circuits types crate, making it impossible to compile code for traits from this crate\n/// (e.g. NoteType).\npub(crate) comptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Type does not implement trait\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n"
    },
    "105": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr",
      "source": "use protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n"
    },
    "106": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr",
      "source": "use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash =\n            compute_unique_note_hash(nonce, compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash));\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.nonce, note_and_data.nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == first_note_and_data.nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == second_note_and_data.nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n"
    },
    "107": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    pending_partial_notes.for_each(|i, pending_partial_note: DeliveredPendingPartialNote| {\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log sans the extra\n            // fields) to get the complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                // temporary node connectivity issue - is simply throwing good enough here?\n                assert(\n                    deliver_note(\n                        contract_address,\n                        pending_partial_note.storage_slot,\n                        discovered_note.nonce,\n                        complete_packed_note,\n                        discovered_note.note_hash,\n                        discovered_note.inner_nullifier,\n                        log.tx_hash,\n                        pending_partial_note.recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n"
    },
    "109": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_logs.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{\n            ComputeNoteHashAndNullifier,\n            partial_notes::process_partial_note_private_msg,\n            pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n            private_notes::process_private_note_msg,\n        },\n        encoding::decode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        msg_type::{\n            PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n        },\n    },\n    oracle::{logs::store_private_event_log, message_discovery::sync_notes},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `syncNotes` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    sync_notes(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get the logs from the capsule array and process them one by one\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    logs.for_each(|i, log: PendingTaggedLog| {\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n        logs.remove(i);\n    });\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(log_plaintext);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            pending_tagged_log.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        // In the case of events, the msg metadata is the event selector.\n        let event_selector = EventSelector::from_field(msg_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            msg_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n            pending_tagged_log.tx_index_in_block,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n"
    },
    "110": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr",
      "source": "use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n        // issue, and we should perhaps not have marked the tag index as taken.\n        assert(\n            oracle::message_discovery::deliver_note(\n                contract_address,\n                storage_slot,\n                discovered_note.nonce,\n                packed_note,\n                discovered_note.note_hash,\n                discovered_note.inner_nullifier,\n                tx_hash,\n                recipient,\n            ),\n            \"Failed to deliver note\",\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n"
    },
    "111": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/encoding.nr",
      "source": "// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\nglobal MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n"
    },
    "112": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr",
      "source": "use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n"
    },
    "12": {
      "path": "std/convert.nr",
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n"
    },
    "133": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr",
      "source": "use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n"
    },
    "136": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n"
    },
    "139": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
    },
    "140": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n"
    },
    "141": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(notifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "142": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "143": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "144": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "149": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n"
    },
    "150": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "151": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr",
      "source": "use crate::messages::encoding::MAX_MESSAGE_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        msg_content,\n        tx_hash,\n        log_index_in_tx,\n        tx_index_in_block,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {}\n"
    },
    "152": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr",
      "source": "use crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn sync_notes(pending_tagged_log_array_base_slot: Field) {\n    sync_notes_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n"
    },
    "154": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
      "source": "use crate::{\n    note::{note_interface::NoteType, note_metadata::NoteMetadata, retrieved_note::RetrievedNote},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::IndexedTaggingSecret,\n    traits::{FromField, Packable},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {\n    // This wrapper exists to extract the ORACLE_RETURN_FIELD_LENGTH generic numeric param into a value and pass it to\n    // the oracle, so that it knows how big the return array must be.\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        ORACLE_RETURN_FIELD_LENGTH,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let MAX_NOTES: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    _placeholder_fields: [Field; ORACLE_RETURN_FIELD_LENGTH], // TODO: Compute this value automatically from MAX_NOTES\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let fields: [_; ORACLE_RETURN_FIELD_LENGTH] = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n\n    let mut opt_notes = [Option::none(); MAX_NOTES];\n    for i in 0..opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let maybe_nonce = fields[read_offset];\n            let maybe_note_hash_counter = fields[read_offset + 1] as u32;\n            let packed_note = array::subarray(fields, read_offset + 2);\n\n            let note = Note::unpack(packed_note);\n            let retrieved_note = RetrievedNote {\n                note,\n                contract_address,\n                metadata: NoteMetadata::from_raw_data(maybe_note_hash_counter != 0, maybe_nonce),\n            };\n\n            opt_notes[i] = Option::some(retrieved_note);\n        };\n    }\n    opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n"
    },
    "156": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
      "source": "use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n"
    },
    "157": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"
    },
    "159": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "16": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: x_coordinates_match,\n        };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n"
    },
    "168": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr",
      "source": "use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "182": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "185": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "186": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "188": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
      "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
    },
    "189": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
      "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
    },
    "19": {
      "path": "std/hash/mod.nr",
      "source": "// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n"
    },
    "191": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/field.nr",
      "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
    },
    "193": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
    },
    "204": {
      "path": "/home/jean/nargo/github.com/noir-lang/poseidon/v0.1.0/src/poseidon2.nr",
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "221": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "223": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "25": {
      "path": "std/meta/expr.nr",
      "source": "//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n"
    },
    "266": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "269": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr",
      "source": "use crate::{\n    address::{aztec_address::AztecAddress, salted_initialization_hash::SaltedInitializationHash},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    pub inner: Field,\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress,\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer),\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n    ) -> Self {\n        PartialAddress::from_field(poseidon2_hash_with_separator(\n            [contract_class_id.to_field(), salted_initialization_hash.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
    },
    "271": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr",
      "source": "use crate::{\n    address::aztec_address::AztecAddress, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    pub inner: Field,\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(poseidon2_hash_with_separator(\n            [salt, initialization_hash, deployer.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
    },
    "276": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr",
      "source": "use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress},\n    constants::CONTRACT_INSTANCE_LENGTH,\n    contract_class_id::ContractClassId,\n    public_keys::PublicKeys,\n    traits::{Deserialize, FromField, Hash, Serialize, ToField},\n};\n\npub struct ContractInstance {\n    pub salt: Field,\n    pub deployer: AztecAddress,\n    pub contract_class_id: ContractClassId,\n    pub initialization_hash: Field,\n    pub public_keys: PublicKeys,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys.eq(other.public_keys)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        let public_keys_serialized = self.public_keys.serialize();\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            public_keys_serialized[0],\n            public_keys_serialized[1],\n            public_keys_serialized[2],\n            public_keys_serialized[3],\n            public_keys_serialized[4],\n            public_keys_serialized[5],\n            public_keys_serialized[6],\n            public_keys_serialized[7],\n            public_keys_serialized[8],\n            public_keys_serialized[9],\n            public_keys_serialized[10],\n            public_keys_serialized[11],\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys: PublicKeys::deserialize([\n                serialized[4],\n                serialized[5],\n                serialized[6],\n                serialized[7],\n                serialized[8],\n                serialized[9],\n                serialized[10],\n                serialized[11],\n                serialized[12],\n                serialized[13],\n                serialized[14],\n                serialized[15],\n            ]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    pub fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer,\n            ),\n        )\n    }\n}\n"
    },
    "283": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "284": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    poseidon::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as poseidon::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = poseidon::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = poseidon::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "298": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint =\n        quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_pack & typ.implements(packable_constraint)) {\n        // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n        let name_at_one_token = collapse_to_one_token(name);\n        let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n        // We add the individual fields to the fields array\n        let pack_method = get_trait_impl_method(\n            typ,\n            quote { crate::traits::Packable<$packed_len> },\n            quote { pack },\n        );\n        let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n        for i in 0..packed_len {\n            fields = fields.push_back(quote { $packed_struct_name[$i] });\n        }\n\n        // We add the new auxiliary variable to the aux_vars array\n        aux_vars = aux_vars.push_back(packed_struct);\n    } else if typ.is_field() {\n        // For field we just add the value to fields\n        fields = fields.push_back(name);\n    } else if typ.as_integer().is_some() | typ.is_bool() {\n        // For integer and bool we just cast to Field and add the value to fields\n        fields = fields.push_back(quote { $name as Field });\n    } else if typ.as_data_type().is_some() {\n        // For struct we pref\n        let nested_struct = typ.as_data_type().unwrap();\n        let params = nested_struct.0.fields(nested_struct.1);\n        let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n            let maybe_prefixed_name = if name == quote {} {\n                // Triggered when the param name is of a value available in the current scope (e.g. a function\n                // argument) --> then we don't prefix the name with anything.\n                param_name\n            } else {\n                // Triggered when we want to prefix the param name with the `name` from function input. This\n                // can typically be `self` when implementing a method on a struct.\n                quote { $name.$param_name }\n            };\n            generate_serialize_to_fields(quote {$maybe_prefixed_name}, param_type, should_pack)\n        });\n        let struct_flattened_fields = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n        );\n        let struct_flattened_aux_vars = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n        );\n        fields = fields.append(struct_flattened_fields);\n        aux_vars = aux_vars.append(struct_flattened_aux_vars);\n    } else if typ.as_array().is_some() {\n        // For array we recursively call `generate_serialize_to_fields(...)` for each element\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        for i in 0..array_len {\n            let (element_fields, element_aux_vars) =\n                generate_serialize_to_fields(quote { $name[$i] }, element_type, should_pack);\n            fields = fields.append(element_fields);\n            aux_vars = aux_vars.append(element_aux_vars);\n        }\n    } else if typ.as_str().is_some() {\n        // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n        // then we add each byte to fields as a Field\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let as_member = name.as_expr().unwrap().as_member_access();\n        let var_name = if as_member.is_some() {\n            as_member.unwrap().1\n        } else {\n            name\n        };\n        let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n        let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n        for i in 0..str_len {\n            fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n        }\n        aux_vars = aux_vars.push_back(as_bytes);\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"
    },
    "300": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "301": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "310": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "321": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "335": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n"
    },
    "339": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "340": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "356": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"
    },
    "359": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "369": {
      "path": "/home/jean/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "400": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/uint-note/src/uint_note.nr",
      "source": "use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER},\n        hash::poseidon2_hash_with_separator,\n        traits::{Deserialize, Hash, Packable, Serialize, ToField},\n        utils::arrays::array_concat,\n    },\n};\n\n// UintNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the amount).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n/// A private note representing a numeric value associated to an account (e.g. a token balance).\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct UintNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The number stored in the note.\n    value: u128,\n}\n\nimpl NoteHash for UintNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because UintNote has just one variant (where the value is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            UintPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note = PartialUintNote {\n            commitment: private_content.compute_partial_commitment(storage_slot),\n        };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.value)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: u128, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness }\n    }\n\n    pub fn get_value(self) -> u128 {\n        self.value\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the value, since the note will be later\n    /// completed in public. This is a powerful technique for scenarios in which the value cannot be known in private\n    /// (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// The returned `PartialUintNote` value must be sent to public execution via a secure channel, since it is not\n    /// possible to verify the integrity of its contents due to it hiding information. The recommended ways to do this\n    /// are to retrieve it from public storage, or to receive it in an internal public function call.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` from `sender` so that they can\n    /// discover the note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        sender: AztecAddress,\n    ) -> PartialUintNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = UintPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        let encrypted_log =\n            note::compute_partial_note_log(private_log_content, storage_slot, recipient, sender);\n        context.emit_private_log(encrypted_log);\n\n        PartialUintNote { commitment }\n    }\n}\n\n/// The private content of a partial UintNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct UintPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of UintNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl UintPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            array_concat(self.pack(), [storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateUintPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateUintPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        UintNote::get_id()\n    }\n}\n\n/// A partial instance of a UintNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the value field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the value to the public), resulting in a UintNote that can be used like any other one (except\n/// of course that its value is known).\n#[derive(Packable, Serialize, Deserialize)]\npub struct PartialUintNote {\n    commitment: Field,\n}\n\nimpl PartialUintNote {\n    pub fn commitment(self) -> Field {\n        self.commitment\n    }\n}\n\nimpl PartialUintNote {\n    /// Completes the partial note, creating a new note that can be used like any other UintNote.\n    pub fn complete(self, value: u128, context: &mut PublicContext) {\n        // A note with a value of zero is valid, but we cannot currently complete a partial note with such a value\n        // because this will result in the completion log having its last field set to 0. Public logs currently do not\n        // track their length, and so trailing zeros are simply trimmed. This results in the completion log missing its\n        // last field (the value), and note discovery failing.\n        // TODO(#11636): remove this\n        assert(value != 0, \"Cannot complete a PartialUintNote with a value of 0\");\n\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the value). The contract will later find it by searching\n        //  for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(value));\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    fn compute_note_completion_log(self, value: u128) -> [Field; 2] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, value.to_field()]\n    }\n\n    fn compute_complete_note_hash(self, value: u128) -> Field {\n        // Here we finalize the note hash by including the (public) value into the partial note commitment. Note that we\n        // use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator(\n            [self.commitment, value.to_field()],\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\nmod test {\n    use super::{\n        PartialUintNote, PrivateUintPartialNotePrivateLogContent, UintNote,\n        UintPartialNotePrivateContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Packable},\n            utils::arrays::array_concat,\n        },\n        utils::array::subarray,\n    };\n\n    global value: u128 = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a UintNote has the same note hash as a PartialUintNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = UintNote { value, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialUintNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(value);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular UintNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular UintNote.\n\n        let note = UintNote { value, randomness, owner };\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        let partial_note = PartialUintNote { commitment };\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(value)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in UintNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(value), 1);\n\n        assert_eq(\n            array_concat(private_log_without_public_tag, public_log_without_tag),\n            note.pack(),\n        );\n    }\n}\n"
    },
    "42": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "43": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "46": {
      "path": "std/slice.nr",
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n"
    },
    "52": {
      "path": "/home/jean/work/noir/comet/contracts/src/helpers.nr",
      "source": "use dep::aztec::hash::pedersen_hash;\nuse std::ops::{Add, Sub};\n\n// Utility used to easily get a \"id\" for a private user that sits in the same\n// \"space\" as the public users.\n// It help us to have a single mapping for collateral that have both public and private users.\npub fn compute_identifier(secret: Field, on_behalf_of: Field, self: Field) -> Field {\n    // EITHER secret OR on_behalf_of MUST be set. But not both\n    assert(!((secret == 0) as bool & (on_behalf_of == 0) as bool));\n    if (secret != 0) {\n        pedersen_hash([self, secret], 0)\n    } else {\n        on_behalf_of\n    }\n}\n\npub fn covered_by_collateral(\n    collateral_price: u128,\n    borrow_price: u128,\n    loan_to_value: u128,\n    collateral: u128,\n    increase: u128,\n    decrease: u128,\n) -> u128 {\n    let price_precision = 1000000000 as u128;\n    let ltv_precision = 10000 as u128;\n\n    let collateral = (collateral + increase) - decrease;\n\n    let collateral_value = (collateral * collateral_price) / price_precision;\n    let debt_covered = (collateral_value * loan_to_value * price_precision) / (borrow_price * ltv_precision);\n\n    debt_covered\n}\n\npub struct DebtReturn {\n    debt_value: u128,\n    static_debt: u128,\n}\n\nfn div_up(a: u128, b: u128) -> u128 {\n    let div = a / b;\n    if div * b < a {\n        div + (1 as u128)\n    } else {\n        div\n    }\n}\n\npub fn debt_updates(\n    interest_accumulator: u128,\n    static_debt: u128,\n    increase: u128,\n    decrease: u128,\n) -> DebtReturn {\n    assert(interest_accumulator > (0 as u128));\n    let accumulator_precision = 1000000000 as u128;\n\n    let current_debt_value = (static_debt * interest_accumulator) / accumulator_precision;\n    let new_debt_value = current_debt_value.add(increase).sub(decrease);\n\n    // static_debt_increase = amount / accumulator\n    // rounding up new debt.\n    let static_debt_increase = div_up(increase * accumulator_precision, interest_accumulator);\n    // rounding down repayment.\n    let static_debt_decrease = (decrease * accumulator_precision) / interest_accumulator;\n\n    // We need to allow repaying of the entire debt as well etc. This is very prone to failing\n    // if you try to repay exact due to time diff between sim and execution.\n    let new_static_debt = static_debt.add(static_debt_increase).sub(static_debt_decrease);\n\n    DebtReturn { debt_value: new_debt_value, static_debt: new_static_debt }\n}\n\npub fn debt_value(static_debt: u128, interest_accumulator: u128) -> u128 {\n    let accumulator_precision = 1000000000 as u128;\n    div_up(static_debt * interest_accumulator, accumulator_precision)\n}\n"
    },
    "53": {
      "path": "/home/jean/work/noir/comet/contracts/src/main.nr",
      "source": "mod asset;\nmod position;\nmod helpers;\nmod accumulator;\n\nuse dep::aztec::macros::aztec;\n\n#[aztec]\npub contract Lending {\n    use dep::aztec::prelude::{AztecAddress, Map, PublicMutable};\n\n    use crate::asset::Asset;\n    use crate::helpers::{compute_identifier};\n    use crate::position::Position;\n    use dep::price_feed::PriceFeed;\n    use dep::token::Token;\n    use crate::accumulator::Accumulator;\n    use dep::aztec::macros::{\n        functions::{initializer, internal, private, public, view, utility},\n        storage::storage,\n    };\n    use dep::aztec::protocol_types::traits::{FromField, ToField};\n\n    #[storage]\n    struct Storage<Context> {\n        market_assets: Map<Field, Map<AztecAddress, PublicMutable<Asset, Context>, Context>, Context>,\n        market_assets_list: Map<Field, Map<u64, PublicMutable<AztecAddress, Context>, Context>, Context>,\n        market_assets_list_len: Map<Field, PublicMutable<u64, Context>, Context>,\n        scaled_deposited_assets: Map<Field, Map<AztecAddress, Map<AztecAddress, PublicMutable<u128, Context>, Context>, Context>, Context>,\n        scaled_borrowed_assets: Map<Field, Map<AztecAddress, Map<AztecAddress, PublicMutable<u128, Context>, Context>, Context>, Context>, // static debt\n        scaled_total_deposited_assets: Map<Field, Map<AztecAddress, PublicMutable<u128, Context>, Context>, Context>,\n        scaled_total_borrowed_assets: Map<Field, Map<AztecAddress, PublicMutable<u128, Context>, Context>, Context>, // static debt\n        deposit_accumulators: Map<Field, Map<AztecAddress, PublicMutable<Accumulator, Context>, Context>, Context>,\n        borrow_accumulators: Map<Field, Map<AztecAddress, PublicMutable<Accumulator, Context>, Context>, Context>,\n    }\n\n    #[private]\n    #[initializer]\n    fn constructor() {}\n\n    #[public]\n    fn liquidate_public(market_id: Field, collateral_asset: AztecAddress, debt_asset: AztecAddress, user: AztecAddress, debt_to_cover: u128) {\n        let _ = Lending::at(context.this_address())._liquidate(market_id, collateral_asset, debt_asset, user, debt_to_cover).call(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _liquidate(market_id: Field, collateral_token: AztecAddress, debt_token: AztecAddress, user: AztecAddress, debt_to_liquidate_amount: u128) {\n        Lending::at(context.this_address()).update_accumulators(market_id, collateral_token).call(&mut context);\n        Lending::at(context.this_address()).update_accumulators(market_id, debt_token).call(&mut context);\n\n        let scaled_borrowed_amount_loc = storage.scaled_borrowed_assets.at(market_id).at(debt_token).at(user);\n        let scaled_borrowed_amount: u128 = scaled_borrowed_amount_loc.read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(debt_token);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n        let borrowed_amount = (scaled_borrowed_amount * borrow_accumulator.value) / 1000000000 as u128;\n\n        assert(borrowed_amount >= debt_to_liquidate_amount, \"Insufficient borrowed amount\");\n\n        let total_collateral_value: u128 = Lending::at(context.this_address())._compute_total_collateral_value(market_id, user).call(&mut context);\n        let collateral_debt_value = Lending::at(context.this_address())._compute_collateral_debt_value(market_id, user).call(&mut context);\n\n        assert(collateral_debt_value > total_collateral_value, \"collateral >= debt\");\n\n        let debt_asset_loc = storage.market_assets.at(market_id).at(debt_token);\n        let debt_asset: Asset = debt_asset_loc.read();\n        let debt_asset_price = PriceFeed::at(debt_asset.oracle).get_price(0).view(&mut context).price;\n        let debt_to_liquidate_price = (debt_to_liquidate_amount * debt_asset_price) / 1000000000 as u128;\n\n        let collateral_asset_loc = storage.market_assets.at(market_id).at(collateral_token);\n        let collateral_asset: Asset = collateral_asset_loc.read();\n        let collateral_asset_price = PriceFeed::at(collateral_asset.oracle).get_price(0).view(&mut context).price;\n        let collateral_amount_to_liquidate = (debt_to_liquidate_price * 1000000000 as u128) / collateral_asset_price;\n\n        let collateral_deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(collateral_token);\n        let collateral_deposit_accumulator: Accumulator = collateral_deposit_accumulator_loc.read();\n        let scaled_collateral_deposit_amount_loc = storage.scaled_deposited_assets.at(market_id).at(collateral_token).at(user);\n        let scaled_collateral_deposit_amount: u128 = scaled_collateral_deposit_amount_loc.read();\n        let collateral_deposit_amount = (scaled_collateral_deposit_amount * collateral_deposit_accumulator.value) / 1000000000 as u128;\n\n        assert(collateral_deposit_amount >= collateral_amount_to_liquidate, \"Insufficient collateral\");\n\n        let scaled_collateral_amount_to_liquidate = (collateral_amount_to_liquidate * 1000000000 as u128) / collateral_deposit_accumulator.value;\n\n        let debt_borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(debt_token);\n        let debt_borrow_accumulator: Accumulator = debt_borrow_accumulator_loc.read();\n        let scaled_debt_amount_to_liquidate = (debt_to_liquidate_amount * 1000000000 as u128) / debt_borrow_accumulator.value;\n\n        let scaled_user_deposited_amount_loc = storage.scaled_deposited_assets.at(market_id).at(collateral_token).at(user);\n        let scaled_user_deposited_amount: u128 = scaled_user_deposited_amount_loc.read();\n        scaled_user_deposited_amount_loc.write(scaled_user_deposited_amount - scaled_collateral_amount_to_liquidate);\n\n        let scaled_total_deposited_asset_loc = storage.scaled_total_deposited_assets.at(market_id).at(collateral_token);\n        let scaled_total_deposited_asset: u128 = scaled_total_deposited_asset_loc.read();\n        scaled_total_deposited_asset_loc.write(scaled_total_deposited_asset - scaled_collateral_amount_to_liquidate);\n\n        let scaled_user_borrowed_amount_loc = storage.scaled_borrowed_assets.at(market_id).at(debt_token).at(user);\n        let scaled_user_borrowed_amount: u128 = scaled_user_borrowed_amount_loc.read();\n        scaled_user_borrowed_amount_loc.write(scaled_user_borrowed_amount - scaled_debt_amount_to_liquidate);\n\n        let scaled_total_borrowed_asset_loc = storage.scaled_total_borrowed_assets.at(market_id).at(debt_token);\n        let scaled_total_borrowed_asset: u128 = scaled_total_borrowed_asset_loc.read();\n        scaled_total_borrowed_asset_loc.write(scaled_total_borrowed_asset - scaled_debt_amount_to_liquidate);\n    }\n\n\n\n    #[private]\n    fn repay_private(\n        from: AztecAddress,\n        amount: u128,\n        nonce: Field,\n        secret: Field,\n        on_behalf_of: Field,\n        market_id: Field,\n        asset_address: AztecAddress,\n    ) {\n        let on_behalf_of =\n            compute_identifier(secret, on_behalf_of, context.msg_sender().to_field());\n        // docs:start:private_call\n        let _ = Token::at(asset_address).transfer_to_public(from, context.this_address(), amount, nonce).call(&mut context);\n        // docs:end:private_call\n        let _ = Lending::at(context.this_address())\n            ._repay(AztecAddress::from_field(on_behalf_of), amount, market_id, asset_address)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    fn repay_public(amount: u128, nonce: Field, owner: AztecAddress, market_id: Field, asset_address: AztecAddress) {\n        let _ = Token::at(asset_address).transfer_in_public(context.msg_sender(), context.this_address(), amount, nonce).call(&mut context);\n        let _ = Lending::at(context.this_address())._repay(owner, amount, market_id, asset_address).call(\n            &mut context,\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _repay(owner: AztecAddress, amount: u128, market_id: Field, asset_address: AztecAddress) {\n        let asset_loc = storage.market_assets.at(market_id).at(asset_address);\n        let asset: Asset = asset_loc.read();\n        assert(asset.asset_address == asset_address, \"Invalid asset or market id\");\n\n        Lending::at(context.this_address()).update_accumulators(market_id, asset_address).call(&mut context);\n\n        let scaled_user_borrowed_amount_loc = storage.scaled_borrowed_assets.at(market_id).at(asset_address).at(owner);\n        let scaled_user_borrowed_amount: u128 = scaled_user_borrowed_amount_loc.read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n        let scaled_amount = (amount * 1000000000 as u128) / borrow_accumulator.value;\n\n        assert(scaled_user_borrowed_amount >= scaled_amount, \"Insufficient balance\");\n        scaled_user_borrowed_amount_loc.write(scaled_user_borrowed_amount - scaled_amount);\n\n        let scaled_total_borrowed_asset_loc = storage.scaled_total_borrowed_assets.at(market_id).at(asset_address);\n        let scaled_total_borrowed_asset: u128 = scaled_total_borrowed_asset_loc.read();\n        scaled_total_borrowed_asset_loc.write(scaled_total_borrowed_asset - scaled_amount);\n    }\n\n     #[private]\n    fn borrow_private(secret: Field, to: AztecAddress, amount: u128, market_id: Field, asset_address: AztecAddress) {\n        let on_behalf_of = compute_identifier(secret, 0, context.msg_sender().to_field());\n        let _ = Lending::at(context.this_address())\n            ._borrow(AztecAddress::from_field(on_behalf_of), to, amount, market_id, asset_address)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    fn borrow_public(to: AztecAddress, amount: u128, market_id: Field, asset_address: AztecAddress) {\n        let _ = Lending::at(context.this_address())._borrow(context.msg_sender(), to, amount, market_id, asset_address).call(\n            &mut context,\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _borrow(owner: AztecAddress, to: AztecAddress, amount: u128, market_id: Field, asset_address: AztecAddress) {\n        let asset_loc = storage.market_assets.at(market_id).at(asset_address);\n        let asset: Asset = asset_loc.read();\n\n        assert(asset.is_borrowable, \"Asset is not borrowable\");\n\n        let total_collateral_value: u128 = Lending::at(context.this_address())._compute_total_collateral_value(market_id, owner).call(&mut context);\n        let collateral_debt_value = Lending::at(context.this_address())._compute_collateral_debt_value(market_id, owner).call(&mut context);\n\n        let borrow_price = PriceFeed::at(asset.oracle).get_price(0).view(&mut context).price;\n        let min_collateral_for_borrow = (amount * borrow_price * 10000 as u128) / (asset.loan_to_value * 1000000000 as u128);\n\n        assert(collateral_debt_value + min_collateral_for_borrow <= total_collateral_value, \"Insufficient collateral\");\n        \n        let scaled_user_borrowed_amount_loc = storage.scaled_borrowed_assets.at(market_id).at(asset_address).at(owner);\n        let scaled_user_borrowed_amount: u128 = scaled_user_borrowed_amount_loc.read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n        let scaled_amount = (amount * 1000000000 as u128) / borrow_accumulator.value;\n        scaled_user_borrowed_amount_loc.write(scaled_user_borrowed_amount + scaled_amount);\n\n        let scaled_total_borrowed_asset_loc = storage.scaled_total_borrowed_assets.at(market_id).at(asset_address);\n        let scaled_total_borrowed_asset: u128 = scaled_total_borrowed_asset_loc.read();\n        scaled_total_borrowed_asset_loc.write(scaled_total_borrowed_asset + scaled_amount);\n        \n        let _ = Token::at(asset_address)\n            .transfer_in_public(context.this_address(), to, amount, 0)\n            .call(&mut context);\n    }\n\n    #[private]\n    fn withdraw_private(secret: Field, to: AztecAddress, amount: u128, market_id: Field, collateral_asset: AztecAddress) {\n        let on_behalf_of = compute_identifier(secret, 0, context.msg_sender().to_field());\n        Lending::at(context.this_address())\n            ._withdraw(AztecAddress::from_field(on_behalf_of), to, amount, market_id, collateral_asset)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    fn withdraw_public(to: AztecAddress, amount: u128, market_id: Field, collateral_asset: AztecAddress) {\n        let _ = Lending::at(context.this_address())\n            ._withdraw(context.msg_sender(), to, amount, market_id, collateral_asset)\n            .call(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _withdraw(owner: AztecAddress, to: AztecAddress, amount: u128, market_id: Field, collateral_asset: AztecAddress) {\n        let asset_loc = storage.market_assets.at(market_id).at(collateral_asset);\n        let asset: Asset = asset_loc.read();\n        assert(asset.asset_address == collateral_asset, \"Invalid asset or market id\");\n        \n        Lending::at(context.this_address()).update_accumulators(market_id, collateral_asset).call(&mut context);\n\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(collateral_asset);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n\n        let scaled_user_deposited_amount_loc = storage.scaled_deposited_assets.at(market_id).at(collateral_asset).at(owner);\n        let scaled_user_deposited_amount: u128 = scaled_user_deposited_amount_loc.read();\n        let user_deposited_amount = (scaled_user_deposited_amount * deposit_accumulator.value) / 1000000000 as u128 ;\n        assert(user_deposited_amount >= amount, \"Insufficient balance\");\n\n        let total_collateral_value: u128 = Lending::at(context.this_address())._compute_total_collateral_value(market_id, owner).call(&mut context);\n\n        let collateral_debt_value = Lending::at(context.this_address())._compute_collateral_debt_value(market_id, owner).call(&mut context);\n\n        let collateral_price = PriceFeed::at(asset.oracle).get_price(0).view(&mut context).price;\n        let withdraw_amount_value = (amount * collateral_price) / 1000000000 as u128;\n\n        let total_collateral_value_after_withdraw = total_collateral_value - withdraw_amount_value;\n\n        assert(collateral_debt_value <= total_collateral_value_after_withdraw, \"Insufficient collateral\");\n\n        let scaled_withdraw_amount = (amount * 1000000000 as u128) / deposit_accumulator.value;\n        scaled_user_deposited_amount_loc.write(scaled_user_deposited_amount - scaled_withdraw_amount);\n\n        let scaled_total_deposited_asset_loc = storage.scaled_total_deposited_assets.at(market_id).at(collateral_asset);\n        let scaled_total_deposited_asset: u128 = scaled_total_deposited_asset_loc.read();\n        scaled_total_deposited_asset_loc.write(scaled_total_deposited_asset - scaled_withdraw_amount);\n\n        let _ = Token::at(collateral_asset)\n            .transfer_in_public(context.this_address(), to, amount, 0)\n            .call(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _compute_total_collateral_value(market_id: Field, owner: AztecAddress) -> u128 {\n        let mut total_collateral_value: u128 = 0 as u128;\n\n        let market_assets_list_len_loc = storage.market_assets_list_len.at(market_id);\n        let market_assets_list_len: u64 = market_assets_list_len_loc.read();\n        let market_assets_list_loc = storage.market_assets_list.at(market_id);\n\n        for i in 0..market_assets_list_len {\n            let market_asset_loc = market_assets_list_loc.at(i);\n            let market_asset: AztecAddress = market_asset_loc.read();\n            Lending::at(context.this_address()).update_accumulators(market_id, market_asset).call(&mut context);\n            let collateral_asset_loc = storage.market_assets.at(market_id).at(market_asset);\n            let collateral_asset: Asset = collateral_asset_loc.read();\n            let collateral_price = PriceFeed::at(collateral_asset.oracle).get_price(0).view(&mut context).price;\n            let scaled_collateral_amount_loc = storage.scaled_deposited_assets.at(market_id).at(market_asset).at(owner);\n            let scaled_collateral_amount: u128 = scaled_collateral_amount_loc.read();\n            let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(market_asset);\n            let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n            let collateral_amount = (scaled_collateral_amount * deposit_accumulator.value) / 1000000000 as u128;\n            total_collateral_value += (collateral_amount * collateral_price);\n        }\n        total_collateral_value / 1000000000 as u128\n    }\n\n    #[public]\n    #[internal]\n    fn _compute_collateral_debt_value(market_id: Field, owner: AztecAddress) -> u128 {\n        let mut min_collateral_value: u128 = 0 as u128;\n\n        let market_assets_list_len_loc = storage.market_assets_list_len.at(market_id);\n        let market_assets_list_len: u64 = market_assets_list_len_loc.read();\n        let market_assets_list_loc = storage.market_assets_list.at(market_id);\n\n        for i in 0..market_assets_list_len {\n            let market_asset_loc = market_assets_list_loc.at(i);\n            let market_asset: AztecAddress = market_asset_loc.read();\n            Lending::at(context.this_address()).update_accumulators(market_id, market_asset).call(&mut context);\n            let debt_asset_loc = storage.market_assets.at(market_id).at(market_asset);\n            let debt_asset: Asset = debt_asset_loc.read();\n            if(debt_asset.is_borrowable) {\n                let scaled_user_borrowed_amount_loc = storage.scaled_borrowed_assets.at(market_id).at(market_asset).at(owner);\n                let scaled_user_borrowed_amount: u128 = scaled_user_borrowed_amount_loc.read();\n                let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(market_asset);\n                let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n                let user_borrowed_amount = (scaled_user_borrowed_amount * borrow_accumulator.value) / 1000000000 as u128;\n                \n                let borrow_price= PriceFeed::at(debt_asset.oracle).get_price(0).view(&mut context).price;\n\n                min_collateral_value += (user_borrowed_amount * borrow_price * 10000 as u128) / debt_asset.loan_to_value;\n            }\n        }\n        min_collateral_value / 1000000000 as u128\n    }\n\n    #[private]\n    fn deposit_private(\n        from: AztecAddress,\n        amount: u128,\n        nonce: Field,\n        secret: Field,\n        on_behalf_of: Field,\n        market_id: Field,\n        collateral_asset: AztecAddress,\n    ) {\n        let on_behalf_of =\n            compute_identifier(secret, on_behalf_of, context.msg_sender().to_field());\n        let _res = Token::at(collateral_asset)\n            .transfer_to_public(from, context.this_address(), amount, nonce)\n            .call(&mut context);\n        Lending::at(context.this_address())\n            ._deposit(AztecAddress::from_field(on_behalf_of), amount, market_id,collateral_asset)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    fn deposit_public(\n        amount: u128,\n        nonce: Field,\n        on_behalf_of: Field,\n        market_id: Field,\n        collateral_asset: AztecAddress,\n    ) {\n        // docs:start:public_to_public_call\n        let _ = Token::at(collateral_asset)\n            .transfer_in_public(context.msg_sender(), context.this_address(), amount, nonce)\n            .call(&mut context);\n        // docs:end:public_to_public_call\n        let _ = Lending::at(context.this_address())\n            ._deposit(AztecAddress::from_field(on_behalf_of), amount, market_id, collateral_asset)\n            .call(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _deposit(owner: AztecAddress, amount: u128, market_id: Field, collateral_asset: AztecAddress) {\n        let asset_loc = storage.market_assets.at(market_id).at(collateral_asset);\n        let asset: Asset = asset_loc.read();\n        assert(asset.asset_address == collateral_asset, \"Invalid asset or market id\");\n        \n        Lending::at(context.this_address()).update_accumulators(market_id, collateral_asset).call(&mut context);\n\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(collateral_asset);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n\n        let total_deposited_assets = Lending::at(context.this_address()).compute_total_deposited_assets(market_id, collateral_asset, deposit_accumulator).call(&mut context);\n        assert((total_deposited_assets + amount) < asset.deposit_cap, \"Deposit cap exceeded\");\n\n        let scaled_user_deposited_asset_loc = storage.scaled_deposited_assets.at(market_id).at(collateral_asset).at(owner);\n        let scaled_user_deposited_asset: u128 = scaled_user_deposited_asset_loc.read();\n        let scaled_amount = (amount * 1000000000 as u128) / deposit_accumulator.value;\n        scaled_user_deposited_asset_loc.write(scaled_user_deposited_asset + scaled_amount);\n\n        let scaled_total_deposited_asset_loc = storage.scaled_total_deposited_assets.at(market_id).at(collateral_asset);\n        let scaled_total_deposited_asset: u128 = scaled_total_deposited_asset_loc.read();\n        scaled_total_deposited_asset_loc.write(scaled_total_deposited_asset + scaled_amount);\n    }\n\n    #[public]\n    fn compute_total_deposited_assets(market_id: Field, asset_address: AztecAddress, deposit_accumulator: Accumulator) -> u128 {\n        let scaled_total_deposited_asset_static = storage.scaled_total_deposited_assets.at(market_id).at(asset_address).read();\n        let total_deposited_asset = scaled_total_deposited_asset_static * deposit_accumulator.value / 1000000000 as u128;\n        total_deposited_asset\n    }\n\n    #[public]\n    fn add_asset(market_id: Field, asset_address: AztecAddress, oracle: AztecAddress, loan_to_value: u128, is_borrowable: bool, optimal_utilization_rate: u128, under_optimal_slope: u128, over_optimal_slope: u128, deposit_cap: u128) {\n        let asset_loc = storage.market_assets.at(market_id).at(asset_address);\n        let asset: Asset = asset_loc.read();\n\n        assert(loan_to_value <= (10000 as u128));\n\n        asset_loc.write(Asset {\n            asset_address,\n            oracle,\n            loan_to_value,\n            is_borrowable,\n            optimal_utilization_rate,\n            under_optimal_slope,\n            over_optimal_slope,\n            deposit_cap,\n        });\n\n        let market_assets_list_len_loc = storage.market_assets_list_len.at(market_id);\n        let market_assets_list_len: u64 = market_assets_list_len_loc.read();\n        let market_assets_list_loc = storage.market_assets_list.at(market_id).at(market_assets_list_len);\n        market_assets_list_loc.write(asset_address);\n        market_assets_list_len_loc.write(market_assets_list_len + 1);\n\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(asset_address);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n\n        assert(deposit_accumulator.last_updated_ts == 0);\n        assert(deposit_accumulator.value == 0 as u128);\n\n        deposit_accumulator_loc.write(Accumulator {\n            // 10**9\n            value: 1000000000 as u128,\n            last_updated_ts: context.timestamp(),\n        });\n\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n\n        assert(borrow_accumulator.last_updated_ts == 0);\n        assert(borrow_accumulator.value == 0 as u128);\n\n        borrow_accumulator_loc.write(Accumulator {\n            // 10**9\n            value: 1000000000 as u128,\n            last_updated_ts: context.timestamp(),\n        });\n    }\n\n\n    // Create a position.\n    #[public]\n    fn update_accumulators(market_id: Field, asset_address: AztecAddress) {\n        let asset_loc = storage.market_assets.at(market_id).at(asset_address);\n        let asset: Asset = asset_loc.read();\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(asset_address);\n        let mut deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let mut borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n\n        let timestamp = context.timestamp();\n        let time_delta = timestamp - deposit_accumulator.last_updated_ts;\n\n        // Only update if time has passed.\n        if !(time_delta == 0) {\n            let precision = 1000000000 as u128; // 10**9\n            let utilization_rate = _compute_utilization_rate(market_id, asset_address, precision, deposit_accumulator, borrow_accumulator);\n            let borrow_rate_per_year = _compute_borrow_rate(asset, utilization_rate, precision);\n            // TODO: let supply_rate_per_year = borrow_rate_per_year * utilization_rate * (1 - reserve_factor);\n            let supply_rate_per_year = (borrow_rate_per_year * utilization_rate) / precision;\n\n            let new_borrow_accumulator = ((borrow_accumulator.value * borrow_rate_per_year * time_delta as u128) / 31536000 as u128) / precision;\n            let new_deposit_accumulator = ((deposit_accumulator.value * supply_rate_per_year * time_delta as u128) / 31536000 as u128) / precision;\n\n            borrow_accumulator.value += new_borrow_accumulator;\n            borrow_accumulator.last_updated_ts = timestamp;\n            borrow_accumulator_loc.write(borrow_accumulator);\n            deposit_accumulator.value += new_deposit_accumulator;\n            deposit_accumulator.last_updated_ts = timestamp;\n            deposit_accumulator_loc.write(deposit_accumulator);\n        }\n    }\n\n    #[public]\n    #[internal]\n    fn _compute_utilization_rate(market_id: Field, asset_address: AztecAddress, precision: u128, deposit_accumulator: Accumulator, borrow_accumulator: Accumulator) -> u128 {\n        \n        let scaled_total_deposited_asset = storage.scaled_total_deposited_assets.at(market_id).at(asset_address).read();\n        let scaled_total_borrowed_asset = storage.scaled_total_borrowed_assets.at(market_id).at(asset_address).read();\n\n        let total_deposited_assets = (scaled_total_deposited_asset * deposit_accumulator.value) / precision;\n        let total_borrowed_assets = (scaled_total_borrowed_asset * borrow_accumulator.value) / precision;\n        let mut utilization_rate = 0 as u128;\n        if (total_borrowed_assets != 0) {\n            utilization_rate = (total_borrowed_assets * precision) / total_deposited_assets;\n        } else {\n            utilization_rate = 0;\n        }\n\n        utilization_rate\n    }\n\n    #[public]\n    #[internal]\n    fn _compute_borrow_rate(asset: Asset, utilization_rate: u128, precision: u128) -> u128 {\n        let mut rate = 0 as u128;\n        if utilization_rate < asset.optimal_utilization_rate {\n            // rate = base + utilization * slope1 / optimal No base for now\n            rate = (utilization_rate * asset.under_optimal_slope) / asset.optimal_utilization_rate;\n        } else {\n            // rate = base +slope1 + (utilization - optimal) * slope2 / (1 - optimal) No base for now\n            rate = asset.under_optimal_slope + (utilization_rate - asset.optimal_utilization_rate) * asset.over_optimal_slope / (precision - asset.optimal_utilization_rate);\n        }\n        rate\n    }\n\n    #[utility]\n    #[view]\n    unconstrained fn get_position(owner: AztecAddress, market_id: Field, asset_address: AztecAddress) -> pub Position {\n        let scaled_user_deposited_asset_loc = storage.scaled_deposited_assets.at(market_id).at(asset_address).at(owner);\n        let scaled_user_deposited_asset: u128 = scaled_user_deposited_asset_loc.read();\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(asset_address);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n        let collateral = (scaled_user_deposited_asset * deposit_accumulator.value) / 1000000000 as u128;\n        let scaled_user_borrowed_amount_loc = storage.scaled_borrowed_assets.at(market_id).at(asset_address).at(owner);\n        let scaled_user_borrowed_amount: u128 = scaled_user_borrowed_amount_loc.read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n        let debt = (scaled_user_borrowed_amount * borrow_accumulator.value) / 1000000000 as u128;\n        Position { collateral, scaled_debt:scaled_user_borrowed_amount, debt }\n    }\n\n    #[utility]\n    #[view]\n    unconstrained fn get_total_deposited_assets(market_id: Field, asset_address: AztecAddress) -> u128 {\n        let scaled_total_deposited_asset = storage.scaled_total_deposited_assets.at(market_id).at(asset_address).read();\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(asset_address);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n        let total_deposited_assets = (scaled_total_deposited_asset * deposit_accumulator.value) / 1000000000 as u128;\n        total_deposited_assets\n    }\n\n    #[utility]\n    #[view]\n    unconstrained fn get_total_borrowed_assets(market_id: Field, asset_address: AztecAddress) -> u128 {\n        let scaled_total_borrowed_asset = storage.scaled_total_borrowed_assets.at(market_id).at(asset_address).read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n        let total_borrowed_assets = (scaled_total_borrowed_asset * borrow_accumulator.value) / 1000000000 as u128;\n        total_borrowed_assets\n    }\n\n\n    #[utility]\n    #[view]\n    unconstrained fn get_accumulators(market_id: Field, asset_address: AztecAddress) -> (Accumulator, Accumulator) {\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(asset_address);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n        (deposit_accumulator, borrow_accumulator)\n    }\n}\n"
    },
    "56": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n"
    },
    "57": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static: true }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "64": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "65": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(\n            gas_opts.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_FIELD_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(\n            gas_opts.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_FIELD_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\nunconstrained fn call_static(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_static_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "66": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr",
      "source": "use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n}\n"
    },
    "67": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "71": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "88": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    },
    "92": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/aztec.nr",
      "source": "use crate::{\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_notes` utility function PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    // TODO(https://github.com/noir-lang/noir/issues/7912): Doing the following unfortunately doesn't work. Once\n    // the issue is fixed uncomment the following and remove the workaround from TS (look for the issue link in the\n    // codebase).\n    // let utility: fn(FunctionDefinition) -> () = crate::macros::functions::utility;\n    // quote {\n    //     #[$utility]\n    //     unconstrained fn sync_notes() {\n    //     }\n    // }\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[aztec::macros::functions::utility]\n        unconstrained fn sync_notes() { }\n    }\n}\n"
    },
    "93": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    },
    "96": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/functions/call_interface_stubs.nr",
      "source": "use crate::macros::utils::{\n    add_to_field_slice, AsStrQuote, compute_fn_selector, is_fn_private, is_fn_view,\n};\nuse std::meta::{type_of, unquote};\n\ncomptime global FROM_FIELD: TypedExpr = {\n    let from_field_trait = quote { protocol_types::traits::FromField }.as_trait_constraint();\n    let function_selector_typ =\n        quote { protocol_types::abis::function_selector::FunctionSelector }.as_type();\n    function_selector_typ.get_trait_impl(from_field_trait).unwrap().methods().filter(|m| {\n        m.name() == quote { from_field }\n    })[0]\n        .as_typed_expr()\n};\n\ncomptime global SERIALIZED_ARGS_SLICE_NAME: Quoted = quote { serialized_args };\n\npub comptime fn stub_fn(f: FunctionDefinition) -> Quoted {\n    let is_static_call = is_fn_view(f);\n    let is_void = f.return_type() == type_of(());\n\n    if is_fn_private(f) {\n        if is_static_call {\n            if is_void {\n                create_private_static_void_stub(f)\n            } else {\n                create_private_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_private_void_stub(f)\n            } else {\n                create_private_stub(f)\n            }\n        }\n    } else {\n        if is_static_call {\n            if is_void {\n                create_public_static_void_stub(f)\n            } else {\n                create_public_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_public_void_stub(f)\n            } else {\n                create_public_stub(f)\n            }\n        }\n    }\n}\n\n/// Utility function creating stubs used by all the stub functions in this file.\ncomptime fn create_stub_base(\n    f: FunctionDefinition,\n) -> (Quoted, Quoted, Quoted, Quoted, u32, Field) {\n    let fn_name = f.name();\n    let fn_parameters = f.parameters();\n    let fn_parameters_list =\n        fn_parameters.map(|(name, typ): (Quoted, Type)| quote { $name: $typ }).join(quote {,});\n\n    // Example of what the fold(...) below will generate for `target_address` and `fee_juice_limit_per_tx` function\n    // parameters:\n    // ```\n    // let mut serialized_args =  &[];\n    // serialized_args = serialized_args.append(aztec::protocol_types::traits::Serialize::serialize(target_address));\n    // serialized_args = serialized_args.push_back(fee_juice_limit_per_tx as Field);\n    // ```\n    let serialized_args_slice_construction = fn_parameters.fold(\n        quote {\n            let mut $SERIALIZED_ARGS_SLICE_NAME = &[];\n        },\n        |args, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let arg_to_append = add_to_field_slice(SERIALIZED_ARGS_SLICE_NAME, name, typ);\n            quote {\n                $args\n                $arg_to_append\n            }\n        },\n    );\n\n    let (fn_name_str, _) = fn_name.as_str_quote();\n    let fn_name_len: u32 = unquote!(quote { $fn_name_str.as_bytes().len()});\n    let fn_selector: Field = compute_fn_selector(f);\n\n    (\n        fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len,\n        fn_selector,\n    )\n}\n\ncomptime fn create_private_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_private_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_public_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_public_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n"
    },
    "97": {
      "path": "/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    }
  }
}
