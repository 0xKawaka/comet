{"noir_version":"1.0.0-beta.4+0000000000000000000000000000000000000000","name":"Lending","functions":[{"name":"borrow_private","hash":"8007596872612068981","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"H4sIAAAAAAAA/+19B5wbx3X+4hp5R57u2CRKpESqS6QKenGlreKq5t5t3AGQJZGiJFKFTQSrKIoSJarLvffeWxw7/iduceLYcU9sJ46dxE4cJ46dOLHzn5HwgHffvV0siDdHjMj5/d7dYmfme9+86bOzs4ngEbeyPwgG+h+5Thjpb/zvM7Ic7tF/fj0ohJsj3BsV7o0J9+YJ9442sgruLRPCLRfunSjcO0m4d7pwb4WRejDVJRr/VzX+Z5L5bLZaSFdTmVQ5mS5NFHPJbG4iX0wVU7lirpIuZjLVYrZYKE2UCslSKpuppmq5UqaWfMQl+ltYya5cetIlz76D55nHG5bbfCMDjKu1wx8a12cEresz2XVfIwzF62+U3UEjQ/2t++T6wQbJ7lxqhSJWf79e3sxSK0PJpEv7rVTEGlC032xP7HeWItagov2GFe0ntQ2zWNswm10Ps+shaBtGzO85RuYaGRXahj7lvDk90LPnUXr2TPH+zOIud2yHoxTL1ZgjO4w17DAANuAuoWyXROCmjQl0eU40AQcakpgB45wR6DYg5Mb7HRJuggd6JZ4MPhNGV8RK8ho0r2GX+f2QAO3uUNPw8+I3W5NtsFLzFbvDmSwQmrWQF4gFjYxf6LpAnKFYIBYoFoiFyuOj2UaGmR2b2MVMtVBKpSrFTC5ZKuTTJcMgX8hlUrXJVG6yXKsUSuViaaJanZzIlErJTC1fyhXSk/lMvpYt58p/ALxUuVDLVWvlcqVQyxiAdK5cShVrmeTkZLFSyGQytcnJ8kTBeE+WkrVUtlItpiYmJ3PpYq1UyuQqf9DN3+S0Ap/LlsvFfLmQmZwoljPZXDpXzU1MVCv5ajYzUU6lSsVqMZ+s5WqZUi6ZzhdrhVSlls2VUhOVajaZRn7pZKkyWZuopc2fXKFWquWTWWOZbKWQKk/ma+VasZA2KmuThWyyMJnMVify6VQ5ny4WJsuTqXTedXrTlVpxopRNVnPFUrKaNcWxUKgmc5lCplau5kvlVKWQy5o8zeSqxijF5EQ+ny9lC1mT/+nJyuS0/EhXJyvFYiWVK+ULE5O5zESxaGyTriYrqXwxn0+ZtE5O5MvlyXQlUyvmqmmTzkK1WptIT6ZKprC5SO9QA+vhtSA2vp/Prhew64WNa0Ueae10WbxFhufRRo6BRlB7nWax3nrShEuexyrwTE+aSm4Ku0uexx08zwLekOa2i1lZPpZdL2LXx8Hcdon5vdTI8UZOmIF1rzMVsZYozg+XebJuo7luuFTRfssPw3XD4xXtd6Ljda9lrA1Yzq5PZNcnQNtwkvl9spFTjJw6A22D5prkSYp5c5rjvDmN5cHJ7PoUdn0q5M3p5vcZRs40sqK/tcTSx/JFcqt00pHn4yttHdgXa09OFzloq7Q5KvaTzjiu8IDjSg84nuWAowuepzvq45uuT5nwmGInsNLRA4SV7AFCfzC9k3WRka4eIPhS4LR5jnnCsz+Y4QrcbaXTTPzZjhKvnWbFypk6x5M09ymm+VxP0qxYGVPJGUpzsjuXSinab8STRjcd+MEz4wnPrCc8c57wzHvCs+AJz6InPEue8HyMJzwf6wnPx3nC8/Ge8HyCJzyf6AnPVZ7wfJInPJ/sCc/zPOF5vic8L/CE54We8HyKJzyf6gnPp3nC8+me8HyGJzyf6QnPizzhebEnPC/xhOelnvC8zBOez/KE57M94fkcT3g+1xOez3PEs5efCz5/htKc7M6lXqBov6M8eV70wsAPni/yhOeLPeH5Ek94vtQTni/zhOfLPeH5Ck94lj3hOeEJz0lPeFY84Vn1hGfNE56Xe8LzlZ7wvMITnld6wvMqT3iu9oTnGk94Xu0Jz7We8LzGE57XesLzOk94rvOE53pPeF7vCc8bPOF5oyc8b/KE5wZPeG70hOcmT3hu9oTnFk943uwJz62e8Kx7wnObJzy3e8Jzhyc8d3rCc5cnPHd7wvMWT3ju8YTnrZ7w3OsJz9s84bnPE563e8LzDk947veE552e8LzLE54HPOF5tyc87/GE572e8LzPE573e8LzAU94PugJz4c84fkqT3i+2hOer/GE52s94fk6T3i+3hOeb/CE5xs94fkmT3i+2ROeb/GE51s94fk2T3i+3ROe7/CE5zs94fkuT3i+2xOe7/GE53s94fk+T3i+3xOeH/CE5wc94fkhT3h+2BOeH/GE50c94fkxT3h+3BOen/CE5yc94fkpT3h+2hOen/GE5x95wvOznvD8Y094fs4Tnp/3hOefeMLzC57w/H+e8PxTT3j+mSc8v+gJzy95wvPLnvD8iic8v+oJzz/3hOfXPOH5F57w/EtPeH7dE55/5QnPb3jC85ue8PxrT3h+yxOe3/aE53c84fldT3h+zxOe3/eE5w884fk3nvD8W094/tATnj/yhOePPeH5d57w/HtPeP7EE57/4AnPn3rC82ee8PxHT3j+kyc8/9kTnj/3hOcvPOH5L57w/FdPeP7SE57/5gnPX3nC89894fkfnvD8tSc8/9MTnr/xhOdvPeH5X57w/G9PeP7OE57/4wnP//WE5+894fkHT3j+nyc8LaAPPBOe8OzzhGe/JzwHPOE56AnPIU94zvKE52xPeA57wnPEE55zPOE51xOeo57wPMoTnmOe8Bz3hOc8T3jO94TnAk94LvSE5yJPeB7tCc9jPOG52BOex3rC8zhPeC7xhOdST3ge7wnPEzzhucwTnss94XmiJzxP8oTnyZ7wPMUTnqd6wvM0T3ie7gnPMzzheaYnPFd4wnOlJzzP8oTn2Z7wPMcTnud6wjPpCc+UJzzTnvDMeMIz6wnPnCc8857wLHjCs+gJz5InPB/jCc/HesLzcZ7wfLwnPJ/giGcf8Mwk89lstZCupjKpcjJdmijmktncRL6YKqZyxVwlXcxkqsVssVCaKBWSpVQ2U03VcqVMrYGdUEzzEw/DNK/yJM39iml+0gylOdmdSz05oWe/0/v9SPN5imke6/ejrT3fkz7hAk94XugJz6d4wvOpnvB8mic8n+4Jz2d4wvOZnvC8yBOeF3vC8xJPeF7qCc/LPOH5LE94PtsTns/xhOdzPeH5PE94Pt8Tni/whOcLPeH5Ik94vtgTni/xhOdLPeH5Mk94vtwTnq/whGfZE54TnvCc9IRnxROeVU941jzhebknPF/pCc8rPOF5pSc8r/KE52pPeK7xhOfVnvBc6wnPazzhea0nPK/zhOc6T3iu94Tn9Z7wvMETnjd6wvMmT3hu8ITnRk94bvKE52ZPeG7xhOfNnvDc6gnPuic8t3nCc7snPHd4wnOnJzx3ecJztyc8b/GE5x5PeN7qCc+9nvC8zROe+zzhebsnPO/whOd+T3je6QnPuzzhecATnnd7wvMeT3je6wnP+zzheb8nPB/whOeDnvB8yBOer/KE56s94fkaT3i+1hOer/OE5+s94fkGT3i+0ROeb/KE55s94fkWT3i+1ROeb/OE59s94fkOT3i+0xOe7/KE57s94fkeT3i+1xOe7/OE5/s94fkBT3h+0BOeH/KE54c94fkRT3h+1BOeH/OE58c94fkJT3h+0hOen/KE56c94fkZT3j+kSc8P+sJzz/2hOfnPOH5eU94/oknPL/gCc//5wnPP/WE5595wvOLnvD8kic8v+wJz694wvOrnvD8c094fs0Tnn/hCc+/9ITn1z3h+Vee8PyGJzy/6QnPv/aE57c84fltT3h+xxOe3/WE5/c84fl9T3j+wBOef+MJz7/1hOcPPeH5I094/tgTnn/nCc+/94TnTzzh+Q+e8PypJzx/5gnPf/SE5z95wvOfPeH5c094/sITnv/iCc9/9YTnLz3h+W+e8PyVJzz/3ROe/+EJz197wvM/PeH5G094/tYTnv/lCc//9oTn7zzh+T+e8PxfT3j+3hOef/CE5/95wjPo84NnwhOefZ7w7PeE54AnPAc94TnkCc9ZnvCc7QnPYU94jnjCc44nPOd6wnPUE55HecJzzBOe457wnOcJz/me8FzgCc+FnvBc5AnPoz3heYwnPBd7wvNYT3ge5wnPJZ7wXOoJz+M94XmCJzyXecJzuSc8T/SE50me8DzZE56neMLzVE94nuYJz9M94XmGJzzP9ITnCk94rvSE51me8DzbE57neMLzXE94Jj3hmfKEZ9oTnhlPeGY94ZnzhGfeE54FT3gWPeFZ8oTnYzzh+VhPeD7OE56P94TnEzzh+URPeK7yhOeTPOH5ZE94nucJz/M94XmBJzwv9ITnUzzh+VRPeD7NE55P94TnMzzh+UxPeF7kCc+LPeF5iSc8L/WE52We8HyWJzyf7QnP53jC87me8HyeJzyf7wnPF3jC84We8HyRJzxf7AnPl3jC86We8HyZJzxf7gnPV3jCs+wJzwlPeE56wrPiCc+qJzxrnvC83BOer/SE5xWe8LzSE55XecJztSc813jC82pPeK71hOc1nvC81hOe13nCc50nPNd7wvN6T3je4AnPGz3heZMnPDd4wnOjJzw3ecJzsyc8t3jC82ZPeG71hGfdE57bPOG53ROeOzzhudMTnrs84bnbE563eMJzjyc8b/WE515PeN7mCc99nvC83ROed3jCc78nPO/0hOddnvA84AnPuz3heY8nPO/1hOd9nvC83xOeD3jC80FPeD7kCc9XecLz1Z7wfI0nPF/rCc/XecLz9Z7wfIMnPN/oCc83ecLzzZ7wfIsnPN/qCc+3ecLz7Z7wfIcnPN/pCc93ecLz3Z7wfI8nPN/rCc/3ecLz/Z7w/IAnPD/oCc8PecLzw57w/IgnPD/qCc+PecLz457w/IQnPD/pCc9PecLz057w/IwnPP/IE56f9YTnH3vC83Oe8Py8Jzz/xBOeX/CE5//zhOefesLzzzzh+UVPeH7JE55f9oTnVzzh+VVPeP65Jzy/5gnPv/CE5196wvPrnvD8K094fsMTnt/0hOdfe8LzW57w/LYnPL/jCc/vesLze57w/L4jnn3AM5PMZ7PVQrqayqTKyXRpophLZnMT+WKqmMoVc5V0MZOpFrPFQmmiVEiWUtlMNVXLlTK1Bvbpimn+wQylOdmdS/1Nn579Vvb7kc8Divb7W0/K9qBimn/oSZqHFNP8I0/SPEsxzT/2JM2zFdP8d56keVgxzX/vSZpHFNP8E0/SPEcxzf/gSZrnKqb5p56keVQxzT/zJM1HKab5Hz1J85himv/JkzSPK6b5nz1J8zzFNP/ckzTPV0zzLzxJ8wLFNP+LJ2leqJjmf/UkzYsU0/xLT9J8tGKa/82TNB+jmOZfeZLmxYpp/ndP0nysYpr/w5M0H6eY5l97kuYlimn+T0/SvFQxzb/xJM3HK6b5t56k+QTFNP+XJ2leppjm//YkzcsV0/w7T9J8omKa/8eTNJ+kmOb/9STNJyum+feepPkUxTT/wZM0n6qY5v/zJM2nKaY5UNxbYaAe3uPzzUaCzzZyjpFzLbaRlJG0Tb+RrJGckbyRgpGikZKRxxh5rJHHGXm8kScYeWIjvU8y8mQj5xk538gFRi408hQjTzXyNCNPN/IMI880cpGRi41cYuRSI5cZeZaRZxt5jpHnGnmekecbeYGRFxp5kZEXG3mJkZcaeZmRlxt5hZGykQkjk0YqRqpGakYuN/JKI1cYudLIVUZWG1lj5Goja41cY+RaI9cZWWdkvZHrjdxg5EYjNxnZYGSjkU1GNhvZYuRmI1uN1I1sM7LdyA4jO43sMrLbyC1G9hi51cheI7cZ2WfkdiN3GNlv5E4jdxk5YORuI/cYudfIfUbuN/KAkQeNPGTkVUZebeQ1Rl5r5HVGXm/kDUbeaORNRt5s5C1G3mrkbUbebuQdRt5p5F1G3m3kPUbea+R9Rt5v5ANGPmjkQ0Y+bOQjRj5q5GNGPm7kE0Y+aeRTRj5t5DNG/sjIZ438sZHPGfm8kT8x8gUj/8/Inxr5MyNfNPIlI1828hUjXzXy50a+ZuQvjPylka8b+Ssj3zDyTSN/beRbRr5t5DtGvmvke0a+b+QHRv7GyN8a+aGRHxn5sZG/M/L3Rn5i5B+M/NTIz4z8o5F/MvLPRn5u5BdG/sXIvxr5pZF/M/IrI/9u5D+M/NrIfxr5jZHfGvkvI/9t5HdG/sfI/xr5vZE/GPk/I7ZiJYz0Gek3MmBk0MiQkVlGZhsZNjJiZI6RuUZGjRxlZMzIuJF5RuYbWWBkoZFFRo42coyRxUaONXKckSVGlho53sgJRpYZWW7kRCMnGTnZyClGTjVympHTjZxh5EwjK4ysNHKWkbONnGPkXCNJIykjaSMZI1kjOSN5IwUjRSMlI48x8lgjjzPyeCNPMPJEI6uMPMnIk42cZ+R8IxcYudDIU4w81cjTjDzdyDOMPNPIRUYuNnKJkUuNXGbkWUaebeQ5Rp5r5HlGnm/kBUZeaORFRl5s5CVGXmrkZUZebuQVRspGJoxMGqkYqRqpGbncyCuNXGHkSiNXGVltZI2Rq42sNXKNkWuNXGdknZH1Rq43coORG43cZGSDkY1GNhnZbGSLkZuNbDVSN7LNyHYjO4zsNLLLyG4jtxjZY+RWI3uN3GZkn5HbjdxhZL+RO43cZeSAkbuN3GPkXiP3GbnfyANGHjTykJFXGXm1kdcYea2R1xl5vZE3GHmjkTcZebORtxh5q5G3GXm7kXcYeaeRdxl5t5H3GHmvkfcZeb+RDxj5oJEPGfmwkY8Y+aiRjxn5uJFPGPmkkU8Z+bSRzxj5IyOfNfLHRj5n5PNG/sTIF4z8PyN/auTPjHzRyJeMfNnIV4x81cifG/makb8w8pdGvm7kr4x8w8g3jfy1kW8Z+baR7xj5rpHvGfm+kR8Y+Rsjf2vkh0Z+ZOTHRv7OyN8b+YmRfzDyUyM/M/KPRv7JyD8b+bmRXxj5FyP/auSXRv7NyK+M/LuR/zDyayP/aeQ3Rn5r5L+M/LeR3xn5HyP/a+T3Rv5g5P+M2EFEwkifkX4jA0YGjQwZmWVktpFhIyNG5hiZa2TUyFFGxoyMG5lnZL6RBUYWGllk5GgjxxhZbORYI8cZWWJkqZHjjZxgZJmR5UZONHKSkZONnGLkVCOnGTndyBlGzjSywshKI2cZOdvIOUbONZI0kjKSNpIxkjWSM5I3UjBSNFIy8hgjjzXyOCOPN/IEI0+04zIjTzLyZCPnGTnfyAVGLjTyFCNPNfI0I0838gwjzzRykZGLjVxi5FIjlxl5lpFnG3mOkecaeZ6R5xt5gZEXGnmRkRcbeYmRlxqx35q333F/hRH7/XH7bW/73Wz7TWr7vWf7LWX7nWL7DWD7fV377Vr7XVj7zVX7PVP7rVD7HU77jUv7/Uj7bUb73UP7TUH7vT77LTz7nTn7DTf7fTT77TH7XS/7zSz7PSr7rSf7HaW6Efv9H/ttHfvdGvtNGPu9FfstE/udEPsNDvt9C/vtCPtdBvvNA/s9AXtWvz0H354xb89vt2ej23PH7Zne9rxsexa1PefZnqFszye2Z//ac3XtmbX2PFh71qo9x/T1Ruz5m/ZsS3tupD2T0Z53aM8StOf02TPw7Ply9uw2ey6aPXPMnudlz8qy51DZM57s+Un2bCJ77o89U8eeV2PPgrHnrNgzTOz5IPbsDXuuhT0zwp7HYM86sOcI/LER+/67fbfcvrdt34m27xvbd3nte7L2HVT7fqd9d9K+l2jf+bPv09l31ex7YPYdK/v+kn03yL53Y8eo9n0R+y6Gfc/BvkNg9+fbve92X7ndZ233MNt9uHZf6o+M2H2Ldh+f3ddm93nZfU92H5DdF2P3idh9E3YfgX2ubp8z2+eu9jmkfS5nn1PZ5zb2OYZd17fr3Hbd166D2nVBu05m143sOopdV7DzbDvvtPMwOy+x4/S+R4YBgd1nbN3ZQcs1mggb7GF/uy/X7lO1+zbtPka7r8/uc7P7vuw+KLsvyO6TsftG7D4Ku6/APme3z53tc1j7XNI+p7PPrexzHPtcw67z23Vvuw5s10XtOqFdN1tu5EQjJxmx8247D7XzMjtPsXvfzzByppEVRlYaOSuY7vrZ9dGN/4t+8qRjr/3y2y7g4RZH+J0d4jfY+L/whEf+Dzd+9zX+Jxr6VzV+J7tzqWGGq41fTJYqw8FUp8w/M8wwHeCnCX/ADf7De5Wte1V9Kn4AekcbvxPMlhSH/PqY36sbfrMb/nS9sXE9DHgu8p1z0rbbAoF/H0ubdefVXehOTxL++Q38YAp2KlPMZ9LFfDpdqSbLlXyhVsoUkpmJXKY0OZFKZnLpYqVQziST1Ux1Mpus5Eu5SrVcymVqE+VSnrAvELEz1QkDlSvnixOpWjlfS05kC8VMuVYoVMqVklmnySUrqcl8ajKdqhWL5VyuPJkrpVK1ailXKzaxL3Ril0fqinVPcYKfyRH+U53gpycI/2l1yfYduRTeIOynM+6K7+A08Z/hBr/ZTzzTDX6z7FzkJG9b/C+uB93m7TRH2Je44Z4h/Eud4Kea/C9zwz9L+M9i+AkH9nm2G/xm2XmOG/xm2X+uG/vXCP95DfwgPnaqHThhP1/AThUz6XQhY58LFCvJVLYymS6aXnEim5xMlifT1VI2Vapl09nMZGVywjxDKKdqyVp5slQrTsV+gRO7ZJrl8oV1F/maafa3LxJsk+zONfvCF4djH7T5CfslAna6nJlMlmrJcq5YLlTNw6CkGeQUqhPFai2fLk+YAU26kkqlqlnzJ12tZEsTlXxqIm+eIOUmjLpmnr607iJPU82x2cuU8fPlZKmazxcI/+XK+BMT+ULZ2JPwX6GMn5nMV2uZQrOtKSvjl3PZWi2XKRP+hDJ+LpWs5tKFZtmcVMYvTSRz+WKxWX4qyvhmPJ6plMrNMWZV2z4T1eRkJVWiuV6tgU86rCPdlyvrbrhSAvQFwdS5bAD6R4Cr9pgvAfo4H24fmjeS7V5Zn851XPDjbQz69Qv3SI+E9XJFrFcoYpUVsSYUsSYVsSqKWFSv3da1bLMffaUT/EyR8K9wgp+sEv6VLvBTrbHjVQw/0OPfxF/N8BMO8Ne4sX8T/2o39mnOmdY28F1gX+PGNs0x2LVu8Jvzguvc4DfHqOvc4DfbhvVu8EuEf70b/OYY9QY3+M0x3o1u8Jtj1Jvc4Def2Wxwgp9q2mcjw9drO9PNtm2TE/xME3+zG/xm+7bFCX62iX+zG/zmuspWN/jN9rnuBr/ZPm9zg98c+2x3gp9rzpF3OMHPN8vPTjf4zfXcXW7wm+Vztxv8Zvm8xQ1+s3zucYPfHD/c6ga/OX7Y6wa/OX64zQ1+s//a5wa/2b/f7ga/2b/f4Qa/2b7td4PfbN/udIJfaPbvd7nBb67BHnCD32w/73aD32w/73GD32w/73WD32w/73OD32zf7neD32zfHnCD32zfHnSD32x/HmrgBwePncEbds+g3ee0aMEjeNL+MMWxVpL2Xg20kjJlvd1eD7L7ivOoSpz1dq5/BLi6WG/n+ogP2oevt1u/IYHruOCHeTgk6BkS9IwLfjj26wbrLkWsWxSx9itiaabxdkWsvYpYdyhi7VHE2qiIpWl7zTp0oEexdihiaZYJTdtrlq9diliadVuzTOxUxNJso+9VxOrV/pHG1G7HVsn8qKCbHPnNYrr5mApdP/zmvO1YdcmCFi6GIzc3aD1TXrfh6smL166vrgsiIlh3fl2+32vGS4Df7BhpCIL2hj03hmFxAM+5jQImj5sQsKTNLliYuc0HQjhwDMorHAivavxOduVSmTjp4PpnahIhNRLSJILsM8uNfdIJwOd8Zgn2wTKMeZcIWhV5kGHx8LNYGnl4fk3x+b3vNv6PB9PrEW18Twh+/cI9sq/l/g1IG88bLKdu8iGbiltOSf9I4LLetMqpVC6kzmw4mJ7PmhuC4uSr1LYNC36ERRv0eDnl4WezNPLw/Jri83s/a/wfD6aXaSynw0J6+D1eTn/cuB4OSc+qxu9kV65QkPoprAfcTpobnOPWA9I/Ergsd616IOWT1J6Q7UYEruOCHy76jAh6RgQ944IfDkS7wdqviLVTEWu3ItaBHsXaq4h1hyLWHkWsjYpY+xSxNMt9L9orqh/sFMs6zbJ6tyLWrYpYmmVVM407FLF6tW4/oIi1SRGLHh7iOJPwg6A1VsL+flXjd7Ir98jcjeujdPB7XP8IcNXl0xorSXaVxrRknzlu7NPkM0fgM0ewD+XlXMGPsGithc8ZePg5LI08PL+m+PweTQDHAdM6nDPMFdLD7/E5w8rE1LTxvMFy6jIfuD7ize9x/SOBy3qTjCwXUv0fDqbns6J9knHylfOlvBwV/AjrqMZvXk55+LksjTw8v6b4/N4ToZzyMo3ldFRID7/Hy2kJyinPGyynTvIhVYtdTkn/SOCy3rTKqVQu5gh2HA6m57OifZJx8pXzpbw8SvAjrLHGb15OefhRlkYenl9TfH7vIiinvEzjS01HCenh93g5fUoDdzgkPasav5NduVxWyks9/EJqVEgn1jNua71ynYldz0j/SDC9XLioZ2PAJ6wckO3GBa7jgh+WkXFBz7igZ1zww3lNN1i7FbE2KmLtVMTap4i1QxFrryLW7YpYmmVilyLWdkWsA0pYUvvcDa+7lHhZd7cilmbdfkARS7Mt1KyPdyhiaebjg4pYmmVC0/ZadTtQTqNmmdiviNWr7YQmr8NhzHSkTzt0ttesj7coYmmm8b4e5aU5ntBMIz4f4HPLROP/cDC97inOs6sJ0Efp4Pe4/hHgqsunNc+W7Dom2JVsN0/gOi744Tx7nqBnnqBnXPDDPqMbrN2KWBsVsTTTuFcR6w5FrLsVsTRt/4Ai1pF87AzrQUUszTKxSxFrvyKWZvt1QBFL0/aaZVXT9r3afmmWVc3ydbsilmY+apYvzTqkWb7uUsTaoYilmcZeHctpplFzPNGr+dirY7n7FLF6dZyjOcY8Mp54dNQhzXZCk5dW+bLXuK7aDa976npYmrbXHANQX4v73QjfOrdraOnYe2xxDc3JHqw2a2jS3rrhYHo5VLRPKk4+c76Ul/MFP8JqvNY8ZU8YDz+PpZGH59cUn997UsMo44BpHe4Jmy+kh98j+9o9YY9t/BgOSc+qxu9kd66I66Gkg+vmdlIsd7E+fsD1jwQuy12rHkj5JLUvZLsFAtfxYHrZwfKwQNCzQNBzBKu3sJ6thBXVhpG/dcNCPO32luujdPB7XP9I4LRdSEXZVWovyT4L3dinuUd5ocBnoWAfystFgh9h0UdweX/Ewy9kaeTh+TXF5/eq0B8tYmGxDiwS0sPv8f7o5X1T08bzBsupm3yI/84H6R8JXNabVjmVyoVU/4eD6fmsaJ9knHzlfCkvjxb8COuYxm9eTnn4RSyNPDy/pvj83joop7xMYzk9WkgPv8fL6ZrGj7EgvH7Gqc8cV2q30YY8HtYHJ/mdqibj1gfSPxK4rJ+t+rAopl3JPkc7sU+lFqf8cL6Ul8cIfoRFHyjn9YGHP5qlkYfn1xSf39sJ9YHXHawPxwjp4fd4fbgZ2m2eN1hOneRDMlmLW05J/0jgsp1slVOpXEj933AwPZ8V+VTj5CvnS3m5WPAjrGMbv3k55eGPYWnk4fk1xef3DkA55WUa39VbLKSH3+PldB/MdzE9qxq/k125akrKSz38cnJYsLUefro0LOSXHv5EkfCPc4OfJ/wlTvCLzfxd6gQ/17TP8W7wK4R/gpvy0+S/zAl+JkP4y53gV5v8T3SCn23in+QEf6JZf092gl9qlv9T3Ninmb+nOsGv5Qj/NDf2afI/3Q3/Zvt/JsPXXIsg/JVO8JMZsseKoOX6hTSRfhqLnMHCJ0L+Exb6ka4RwHI17pPSxvnjvG8F48NtEIa1okOsYcHPRZ6eGZFurn80giumwzo8A+dgbWLdLkWsbYpYdylhSWPbbnhtVuR1jBIvafzbDdaxilj9SljW4cf6uuF1nBIve72kR7GWKmIdr4h1giLWMkWs5YpYJyphWYcfaeqG10mKvO5U5HWyEi97fYoillbfYa9PVcQ6TRHrdCUs63DttFew6Bmy2/WubMntelem7Ha9K1txu96Vy7hd78oW3K53ZSdprE79IengZYv3b3rzimzsd0FJ/whw1eXTmt+dAHzQPrh/Z5nAdVzwwzq6TNCzTNAzLvjhXt5usO5VxNqhiLVPEWuvItYuRayNili3K2LtVsQ60KNYmmV1jyKWlu2lfrtXyqpmfbxbEatX6+M9iliadahXbX+rIpZmO6HZ12q20Zq217RXr5YvzbGJZj5q2v5waCceUMKy1ziH7YbXVkVexyrx0sSybktdj9dxiry0bG/ddkUszTKBa+ndYPUrYVmnVSas26aIdbMilmb50uSlVVZ7uS2cq8hLs6xq5qNmu9qr9tIsq7i22it1W7P9elARS3P8dYsiluaaguaYXHOusEsRi8b3tI69lPklGv/dPgNIHvQzgKVu+EQ+A1gq2FXaD6vIpxInnzlfysvlgh9hndj4zff28/DLWBp5eH5N8fm9NzUybhwwrcO9/cuF9PB7ZF+7t/81/VPTxvMGy6mbfIj/DVjSPxI4rTepqHJxgmBHqVxQ3HHBD8f0ywU9ywU9Ut7j3rdusPYrYu2s62HtVsQ60KNYexWx7lDE2qOItVER605FLM06pJmP9ypi7VDEulsRS7Nua5YvzTqk2a4eDra/XRFLs42mtlB6j0px/JGU3nNSxG++c3BihC24ftyLQ/7Sf8JCP9I1AljKaUtFpS1q7nYi47OcXYdhndghlvRunIs8XR6Ep5vrd/suYC7t9l3AXN7tu4DZGpX5k5k9E2C7U53kZTH2WSqkfwS4uqpTpwIftA/Oh04TuI4Lfrh37zRBz2mCnnHBD/vtbrDuVcTaoYi1TxFrryLWLkWsjYpYdypi3aWIpWn7Xi2rdyti7VbE0ixfmm3OfkWsw8H2tytiaabxQI9iadbtPYpYWra317gvt1fKaq+OATSxjvTbR/ptX/qOI/32kX77SL/96LR9r5bVexSxNO2l2eZo2v5WRSzNOqTZb/dqG92r4wnNNGqOfTXzUdP2h0M78YASViKYvj+nG6zlilha6+T2+kQlLOtw73E3vOYq8tqqxMu67YpY25Sw7PVJgR7Wo9329hrfnegG61hFrOOUsKzTtNcpSrw0y6p1mnWoV8t9r6bx0d4WavKy7tFur8Ol364rYdlrzT0PWvay10sUed2syEurr7VOq0xo26sX+w7rHlTE0pzz3aKIpflMR3MdQHN9YpciFr7fxveGJRr/pfPirZ5Vjd/J7lwlAfooHfwe1z8CXJX5pKLseqpgV+m8e0U+kwnA53xOF+xDeXmm4EdYdE4mf7+NhyfcPgjPryn+lHuDj/wbB0zr8P026ax0fo/sO2TkdwOPXOOeRMKzzm0+pGO/30b6RwKn9SYVVS6k+i+VC4or5Rf2+3HzS8Laq4h1QBFrpyLWfkWsexWxditi3dWjvHYpYm1UxHpAEWuTItaDilia9rpDEUuzPt6tiKVZ7jXbQs18vEURS7PN0SwTtytiadp+R4/yulMRS7NMaI5NNPttzXzs1fZLs3xp1sdebaM1sTTL1x5FLLI9zVf4/CbR+D8M8RKB6lwvmwB9lA5+j+sfAa66fFpzPcmupwt27eT7YsSVrrkf1zPT3/Gybr8i1k5FrN2KWAd6FGuvItYdilh7FLE2KmJpfRvJuh2KWJr18W5FLM3ypWmvfYpYmuVLsw5ptquaZUKzXe3Vuq1ZHzXr0L2KWJr18XAoX7crYmmOAaivHWv48fE2P4+E+3E9UWN+Hp/CjQrxEo3/w8AvEWiOsUuxz+sg/SOCTVyM+VfEtCvZbqXAdVzww70rKwU9KwU944If9k3dYN2riLVDEWufItZeRaxdilgbFbHuVMS6SxFL0/a9WlbvVsTarYilWb4025z9iliHg+1vV8TSTOOBHsXSrNt7FLG0bG+v8byOXimrvToG0MTq1X5b0/aaYwDNNlpzPNGrZfVIv33o+rQjY/LOsI6MyQ9d+ToyLjx05asXx4XWadqrV8vqPYpYmvbSbHM0bX+rIpZmHdLsO3q1je7VPk0zjZpjX8181LT94dBOPKCElQim73HqhtcWRV7LlXjZ67mKWJrPhzTttUSR13YlXtZtU8Ky1ycFelhaZcI6fLe5F2yvWbe166NWHbLXJyphWadZHw+H8oXnDXWDdawi1nFKWNZp2usUJV6abaF1mm10r5b7Xk3jo72v1eRl3ZGxif99h3V1JSzN8YR1Wvay15pj8psVeWn1tdZp9o+a9urFvsO6BxWxNNcUblHE0nxupbnOpLn+tUsRC88bmsv8Eo3/tM+Xt3VWz6rG72RXLhX7vCHSPxJM76v0+LT2+R4dTLfrXMGuZLtjBK7jgh/OjY8R9Bwj6BkX/PCZbzdY+xWxdipi7VbEOtCjWHsVse5QxNqjiLVREetORSzNOqSZj/cqYu1QxLpbEUuzbmuWL01emvmoyUuzndAsE5r5eLsilmZ7j988xzHBqsbvZFcul6OxCR/L0JhqOJDHJjq6U8UE6AsCeVxH+keAqy6f1rhOyjduHxzXLRa4jgt+mIeLBT2LBT3jgh/WzW6wblPE0uS1XwnLXs8KdLC007hREet2RawDilh7FLE07XW3Itb9ilh3KmLtVsTStP1eRaxdiliaaXxAEWuTIhat8+HYwrpVjf+mO8wU85l0MZ9OV6rJciVfqJUyhWRmIpcpTU6kkplculgplDPJZDVTncwmK/lSrlItl3KZ2kS5VHA7dsiVhgO5f9XBT6UI/1g3+GnCP84Nfobwl7jBzxL+cjf4OcI/0Q1+nvBPcoNfcHv2QapI+Cvd4Dfr11lu8MuEf7Yb/Arhn+MGv0r457rBrxF+0gl+Okn4KTf4zfYz7Qa/2X5m3OA328+sG/xm+5lzg99sP/Nu8JvtZ8ENfrP9LLrBb7afJTf4zfbzMW7wm+3nY93gN9vPx7nBb7afj3eD32w/n+AEP9NsP5/oBr/Zfq5yg99sP5/kBr/Zfj7ZDX6z/TnPDX6z/TnfDX6zfbjADX6zfbjQDf4E4T/FDf4k4T/VDX6zfXuaG/xm+/Z0N/jN9u0ZTvCzzfbnmW7wm+3PRW7wm+3PxW7wm+O3S9zgN8dvl7rBb7afl7nBb7afz3KD3xy/PdsNfrN9fo4b/Gb7/Fw3+M32+Xlu8Jvt8/Pd4Dfb5xe4wW+2zy90g99sn1/kBD/XHH++2A1+s/1/iRv8Zvv/Ujf4zfb/ZW7wm+3/y93gN9v/V7jBb7b/ZTf4zfZ/wg1+s/2fDFquhZ2pTphHFblyvjiRqpXzteREtlDMlGuFQqVcKWWrhVyykprMpybTqVqxWM7lypO5UipVq5ZytWKTe0XE7sa1nitUXdglVWu2CzWGn1DjX2ziX+4EP9msV690Um5a/K9wYv9Ks92/MlAuO6lk0n5Xc29jIwOd73wVS8cg5Mnqxm/6Zqh1a+qtMFcxfx7+qyOP/Lf67mjoG2W2Cpge6yjNAy5sap5FJEBfEMj7hEj/CHDV5dPaJzQAfNA+uE9oUOA6Dn7W4XPjQUHPoKBHwnpQEWujItadili7FbHuUMTapYi1VxFLM417FLF6tXztUMS6SxHrbkUszfKlaa99ilia5UuzDu1XxNIsE5rtKu0nHA6m94V6fXM+S30tH7uTI79qMDVd3K/Gwl9Qb4VD1w+/eZpmG3nighYuhkM+fNxUZfhhYwbryI5DzF9zjEP4w27wM2T72cFUm2KahkNsRf7Sf8JCP9I1Eky3u4vxoZQ2zh/ry2zGh9sgDGt2h1jDgp+LPB2KSDfXPxrBVUoHzm+k9kgaf1P44QhePPyYoJvikg1HmJ+iDdNRNuR1kfTPZTwr1YnrL3/m2ssDcP1gB7LbYgh3Ub1lByyDs0OwAvi9GO71Mzzu3M4ZD20/QGnqtB/gtq2C38G2e9Zh24A2t87m9S9gbaFfSBOWobC1hX7mz8P/alZL3781rucwnXMjdI4Cbx7euovqU8MfxdLWL4SZCxwp/G8avGz+XdLIP8l2xGcY4j+ayjKlqdOyzPMRuREmlR3M27B86Zvd4vKsBS3OqG80Ih30e1LQR9zHIax1lMfz2H3FNa7Y3zIj/SPAVbkfao5h5gEftA+1LdaGcxrXq9eWK+eVr1l3/epqH5hyjF1z+HGAozA8LHfjjFIQEg6z3bpL69PjoSNTjgXTq/U46OL4/cI9bHrHBW5UzMk2ZzSKuW22xhrXo4FcjK0bDqbbVrEoTMYtmqR/JHDZHLaK5hjwCbM92cdRVZlIBNOrRb+gk/hSXs4T/AhrfuM3byJ5eF5feHh+TfH5veMb5Wk8mF69L65P5SBVfX6P7GvL6TEN3DEhPUdB2qR8GxNwx4X4aENej6+qT/UbFNJGfkMRfrMj/IaFdJHfCIu3BuLNETAth/WzW3hhtuHlioYvUtsU1raGYV0IWDz+PMCa3wbrEsDi8ecD1oI2WJcBFo+/ALAWtsG6BrB4/IWAtagN1rWAxeMvAqyj22BdB1g8Ph4Zd0wbrHWAxeMfA1iL22CtByweH49UPbYN1vWAxePjMW/HtcG6AbB4fDxSdUkbrBsBi8fHY96WtsG6CbB4/KWAdXwbrCsAi8enuKMCFo4DTmD3D8U4gPSPAFdX44ATgul25fbBx7DLBK7jgh+2W8sEPcsEPRLWAkWshYpYixSxjlbEOkYRa7Ei1rGKWMcpYi1RxMJ2q11//dz6I/+j+muKx8suD9fPwkh9NMcIGw/wORu/f3yM9PB7aJvjQ/SF8eO2oflm1PhjDOJJnMfb6IniTOGkMfPV9al+fIkdx7d8ORjH4XypfB74DQvpwjEzz1ccM3O78THzIKTnxsZ9t8txySQvf2G2wnUJ6X8QxFuulZbcXevpmyE9mJ6jFPVwrAvqU/XM/BJfshonHVy/6yU+ssWCCFssdKI7G3u5cyHYYoEjW1BZbDdvw0eK0txM6kv48ujl1fXmId2TNzynfPksFpQ3q0hnFMLNg9/zQ2itgnAL4TcN/5AHx+IOeUQtv0r6pWaErgeF+9ZJ01pchpWyTTqxTVqGPTpCz4Iu9SwQ9Lg9GSfp+OSa1lN+aSmBp4n0R50wGLcZIF0zdQKglLaofJZOAIzCintqHWG5Pe2oladRJx9y/Z2efMifFvN27rjG2NAO694MjzqktsLt7rFMPm55JP0ztdM87k4XaahOccfBzzr80oW062RI0CNh7VfEukcR6w5FrF2KWBsVsTTTqJmPmmncqYilmcbbFbHuVMTap4i1WxHrbkWsvYpYmmVCsz5q1iHNMqFprz2KWAcUsTRtf4silqbt71LE0rSXZlu4QxFL01692hZq2kuzzTkcxkyaZUKz39ayvb3G09h7pdxr2v5WRSzNcq+ZRs12QnMMoGmvBxSx4ryNLc3rKbz0Bou0LnW4vMGSg3Aab7Dk4F5/IL/BYrF/Aacj4Nsv1rldj82kE6AP0xiA/hHgqpz/zTUraXuYtO5JtjtO4Dou+OGXqqWtY8cJesYFP+y3u8G6XRHrTkWsfYpYuxWx7lbE2quIpVkm7lDE2qiIpVkmNO21RxFL0163KGJp2useRSzNsrpLEetwyMe7FLE07aXZD+1QxNK0V6/2Q5r20mzvNcuXZpujWR81y4TmmEnL9vYa12B6pdxr2v5WRSzNcq+ZRs12olfHXw8oYtEajPQqEb7CIM1hj43Qw+MfGwNLmg9TeOnVo6i1HunVI1p7cPQKTjoqP6TXlw5mrYfsloJwuNbD27YlIVgB/E7BvbC1Hty3dHtjIYvs62g/mrjVHPcr8j2juC+y01dtefyxCD0LutSzQNDj1padn6KBr03UmB++4sALMT8FBV0//ObptfXiuR2csMHzoxqCOSiETYAfhX3dcItHucHD7b7DmcuTC+utcOikPKH0WltUuswT3P/KeUuvS8d5jVt6DX9ciD8vQs+pXeo5VdAzKsRLhPwnPXgP9Uico9bbD1YPx6I67HbtvvPyj3bm5R/35vITuvEUPX66Nn8OhE6qG2QLWzfeHqNuuH3eNHM2xFfeuA153UYn2ZBsEdeGY8F0G2LdHhPSIdV7jnEw9V7i0Gv9xALw43m8EPx4Hi8CP57H+LzqCuaXAL8rmd8Q+PET2/EkxNXMbwT81jA/ntfo2vVn3+qgP+PlJk5/Jh2hQrhuXynLZOK0+1z/CHDV5dN6Diq9Iiyd3Em2WyRwHQc/626ut8KhX79wry8Ca68i1gFFrJ2KWPsVse5VxNqtiHVXj/LapYi1URHrAUWsTYpYDypiadrrDkUszfp4tyKWZrnXbAs18/EWRSzNfNRsvzTtdaci1g5FLE17adYhzfGEpr32KWIdaVcPXbuqZXt7jc9Be6Xca9r+VkUszXKvmUbNdmKPIlavjlc3K2LReJXi8Tk+f2bp+ByD5ldFj3OD3zwnIepZLtePc3ryl/4TFvrhvu1FbtIWuW87qhzwtfE4R4Qe2yHWoTzPhNsazzORuErpWKhokzhfQJHWljrN26gjWx3XseaegoURduL6u3l/JA3h6DlhXzA97xaHYAXwOw33wvYUjAXT83Q4hCfpxXtYVnj8wQg9I13qGYmpZ7xLPeMx9SzoUs+CmHqO5M9UPYcyf6gd5mcW0XNb+8zlhhFZJz9Sn5/VhHsmKPx72NdwN4yEp7Ef0s/bCTqK0O0XuDp/Toa2rAnpSQhY0jMmSlOnX4rh7+jhl2IIM+xLMUPMn4ffPdLi8uklMmaCYfJ3FfErQlRnh4JWunkY5EDh9zIO9BUhxBwISdfsEMzXs7J4+4iMGQiYUrpGIF3IYRg4UPi7WLo+y85a52HoNy8na+tTuc0RdAUh97BNmxPiF6W3XVx7zb8ihH5YVtBePH6YTbGsUPiHIsrKkMCBpxfzFTlgmJEQDq8VOPBjKyfXXrOh8VWfABx+nGwQfmNWYhYMCThhjsxg47x+RMbh4chh8eNd8WxBx0gIRx7Xmoeyt1JdXV1fDTFQH4ANhijrC2Tn9mufbvoNaX8Fb3vRSX0KpdfG+/ySFi6GI8ffyT4yrjq4cRViSeMl6y6vt/x5+E+wduTrS2TMvhBM+oxMVJ8m7U2i8NKcMWrMzcsjztMl3dyW2O4u6pBru/WGYeAqzUXjcr1whrkOdsh1RNDN+x7TuF5xQ/W6i9eub56iHQg0ArjGfgfDYH8xO4TqXAg3Br/xWGVs3ufD7zkCP8khZ4lLf9DeURUlW32JVdFvhlTRIJCrKBV7nH7xuHz6RUXieiEc6bwB0sPDc50U/kamRxriXA/ppvBfF4Y44wIn4jMM8XW73UKRbHhTMN2R34Zgatq530YW/vx6Kxw6qWulNFlbnNvBdI3nI3IjTN5l8LwNy5e/YfmCH/bk+m4IwtNBv/sFfWhL8reO8ngjYKxq/E525XLlBOgLgkBc5if9I8F027pY5t8IfNA+UjMc8WHPm9g1h38hwFEYHpa7FzJKQUg4KduPEeKhI1MOAuc/sFn1z6DZ4lUfv0fMOfQL93C0NSDwl/QMdalnKKYen9ODu6mtww9ArhbSiruprcOPNV7N/PADkGuD6ekiv2siMK+NwLwuwm9d0HLot17ws5w2NcYIZG/evUhVHT8qyfMurF6HYV0IWDz+RsDa1AYLPyrJ428CrM1tsC4DLB5/M2BtaYOFH5Xk8bcA1s1tsK4FLB7/ZsDa2gYLPyrJ428FrHobLPyoJI9fB6xtbbDWAxaPvw2wtrfBwo9K8vjbAWtHGyz8qCSPvwOwdrbBwo9K8vg7AWtXGyz8qCSPvwuwdrfBwo9K8vi7AeuWNlj4oTce/xbA2tMGCz+MxuPvAaxbI7DsNb7txOPfClh722AdC1g8PsUdFbASjf80nLyN3dcbvqViv+VC+keAqy6f1nDytmC6Xbl98C2XfQLXccGP90Xcj+vZJ+iRsG5SxNqoiLVJEWuzItYWRaybFbG2KmLVFbG2KWJtV8TaoYi1UxFrlyLWbkWsWxSx9ihiYV8WNa6317RDKmpcT/F4e4bLXf0Qh4fnGGHzhv5Ang/sjZEefg9tszdEXxg/bht6cN3tPMVeLwesg52n2OsTAetg5yn2+iTAOth5ir1eAVgHO0+x1ysB62DnKfb6LMDqZp6yoT4Vi8fHtr3dPOWlgMXjdzJPsddnB1OxDnaeYq/PAayDnafY63MB62DnKfY6CVgHO0+x1ynAOth5ir1OA1Y385QMYEXNU25rg5UFLB7/NsDa1wYrB1g8/j7Aur0NVh6wePzbAeuONlgFwOLx7wCs/W2wioDF4+8HrDvbYJUAi8e/E7DuaoP1GMDi8e8CrAMRWNY9tT4Vi8c/AFh3t8E6D7B4/LsB654gOo2PDaZi8fj3ANa9bbAeB1g8/r2AdV8brMcDFo9/H2Dd3wbrCYDF498PWA+0wXoiYPH4DwDWg22wVgEWj/8gYD3UButJgMXjPwRYr4rAsu4F9alYPP6rAOvVbbCeAlg8/qsB6zVBdBqfHEzF4vFfA1ivbYN1HmDx+K8FrNdFYFn3yvpULB7/dYD1+ja8zgdePP7rAesNbbAuACwe/w2A9cY2WBcCFo//RsB6UxuspwAWj/8mwHpzG6ynAhaP/2bAeksbrKcBFo//FsB6axuspwMWj/9WwHpbBJZ1l9enYvH4bwOst7fh9QzgxeO/HbDe0QbrmYDF478DsN7ZBusiwOLx3wlY72qDdTFg8fjvAqx3t8G6BLB4/HcD1nvaYF0KWDz+ewDrvW2wLgMsHv+9gPW+NljPAiwe/32A9f42WM8GLB7//YD1gTZYzwEsHv8DgPXBNljPBSwe/4OA9aE2WM8DLB7/Q4D14TZYzwcsHv/DgPWRNlgvACwe/yOA9dE2WC8ELB7/o4D1sTZYLwIsHv9jgPXxNlgvBiwe/+OA9Yk2WC8BLB7/E4D1yTZYLwUsHv+TgPWpNlgvAywen+KOCliJxn96zvVpdl/vuVI2lQB9lA5+j+sfAa66fFrPuT4dTLcrtw8+5/qMwHVc8MM1x88Iej4j6JGwNilibVbE2qKIdbMi1lZFrLoi1jZFrO2KWDsUsXYqYu1SxNqtiHWLItYeRaxbFbFuU8Tap4h1uyLWHYpY+xWx7lTEuksR64Ai1t2KWPcoYt2riHWfItb9ilgPKGI9qIj1kCLWqxSxXq2I9RpFrNcqYr1OEev1ilhvUMR6oyLWmxSx3qyI9RZFrLcqYr1NEevtiljvUMR6pyLWuxSx3q2I9R5FrPcqYr1PEev9ilgfUMT6oCLWhxSxPqyI9RFFrI8qYn1MEevjilifUMTCNcd2++Re3riO2idH8fi6E76a2Q9xeHiOEbYPrz+Q99d9KkZ6+D20zadC9IXx47Z5ReNaY99fGbC62fc3AVg8fqf7/o4BLGnf35gQD/eJbojQY13UPtENEXo+1aWeTwl6pPcUr65P9VsdTE+r9NUXfPfxauZ3E/itFdKF7ynyOoLvKfIyiO8p8jKF7ynyMoLvKfI85+8p0vu4ZKObG/eHIW1Ud1c1fie7dNLXFdGOPN8SIf+DYPqzCeuwfPAv/yRmSE/fDOnB9NykqIdjnV9/5L9Uf/H4jk7rL4+/IQSLjjawjn/pcQ3z5+HvbJRli/1tOGpD2qO+mt27KCKtFJfqCPZvqxq/k925FOFvcYOfieofeZqwTeG266R8cV0jgKVtu6i0cf5YDnl/HWccsblDrGHBz0WebopIt9SHSFyldITVTa4n6hTkLRG8ePio8RPZkI9hFG2YjrKhNAY7mFOQyW5LIBx+WVkaiyJWAL+XwL3+IPoUZJ6nwyE8SW+7dpzHx3HYBuAl/Sc9eA/1SJxJDz/Pgp9K+144m4HKHT8yh79HtZj58/D9C1qYH2hgSu95hdWVBNPHz8LAo5ZIX9hRS2tC+H2U9Xt4ouUaIc2LIzgTJj9vhHOmcz+Qw6dgHOmojxTHkaRrDPhi/mBapDzBcnejYIcw21rHxyl8HMPDf67DcQov3zhO4ZworjTnx9MYJT1R/eSIoKfb8YGkR+KMczfreD3/CtRzKg+8zPO4dB7CIIT/1fwW5tci6jnuH8IxDbZ9WM9JX1g9x3JD4b8RUc+lMfOl9XDOhMnrOeeM9ZzCfwfquaNxjVjPSZfUj2E977Qfk9pxSc+cLvXMEfS47i/ngJ5Nino4Fp7DFFZffwr1lfJVqq/Yb/Pwn2b19Z+gvvLyHpWf2HdsEvRinQmCeGuUUe8mYxtlXVTf0WyjIvqOqDmAdVFz3Kg1YR6Oh4laN+2P0MHLE79PY1bep62BsJsh7KaIsGHzOXtNpy+7nXMXqlQX+NovOfLbKnAmvzoL//x6Kxy6fvjN02TLyvdinOgszQ23hmCiTa3D098pzX0C7hbA5W0A2ovOW8P6P6+RGFv/h0ZlPCwn1r2oged2XlmoYf5yh/mL9kEn5S/xtvk7vLSFi+FQJ8/DOvjxNhvP+ON9JGFY2y9pKO3VunQw9aUTe0r1RbInPovg9iQMbs9BwHgCK+/HQ3mnMNhfWEf1h+os2W9AiG8djv0o/IkNndY+z10q64+qb0EgtwvcDnjW6NZA5iKlmcI+FspjncXRK4/ZFOXjNuDMdW93pDvOeI3rHxX4EO8RwW+gC665VKGQzmcrudpEvpjLVROAT1zxHq4d7hDCjwnhydY7ndg6U6Gq1l9v4e9gdrVugPltB79B5kccbR16wdKp/Hc44h/H/lz/uBD+wnorXCd5OS7owblaN1ibDhJrfjC1Dkh9IR/bYF/Ixy/8PNgXhbTLcdo6atuw3efpxHbw+dDW8f5PsQxlpfEotnXbHOmO29aR/tEgPG9HBL9u2rpKLpvK1kq5iUotU60Uaolgep/QL9zDtk4qt0cJ4R23FUmprcP2bID5bQM/3tYRR6mtc9MvZpJx7M/1jwvhsa2Lm5fjgh5s67rB2nSQWNTW1Vl8HKfytg7HqVuE9PC2DudlL4U2yc0nHeQ1QmxTOV/r+Bx6C7MT2hdx+D0+buZxcM2GwlfZuH1iVOZHabhY4CftXeLpunw0PNwWIZxdQqJx1OXV9c9+Zfm6auXZ1cnrquv7A5keJhGTj9OpAMJZh18uuw5+r4HfqwGHuuC4Xy6j/xxLyjqOjV3vVWzKMwlN2BrQtarxP9mlk6aO2NW6ebyWjj2tIP0jwfQi52Jbh7S0ye2D3aObxxLppP1wEz4ysO7K+nTbIA8qL9KjO24/rAtxHlOuFvSMBnK9kv6THryHeiTO9DuqqQ1rGm9jTePm0VZ4bGvibNmK8yie3+Pha+DHH9ElIvBxuWU7ay8+C0uufEhF6Wh+nJT5adZny6PGlrKw3PLhWlg9kz4XQuGjtpJZR480orYWSWWLlyUqI1I+R9UpF4/+JT2jXeoZFfS4rrujoCfsUd39IXUy7FFdkvnz8O9hj+oegvwMa7seTle95TdDdSbdaZ2R2qmoOtPu1Q2yofSI9YX1qX5SeUe7WlerT+WwWuAg9afjQnwKF2ecwvnp5VEq9jiF9M/UOGVNTLuSfTa4sU8yqmxuEOyDWwMw73jbzeu+NP2RHvfxfgKnix9uVPaoLQVRdUd6BP/w9j+YFrkeB2Hd6mccUwyLPo/ketsHby8xPxTLfpbSvSUi3ajfCn8MJG23xfA450F8fEWK4vMPv0tlC8vjF9mY9POjMmYQRI9J0SZDgdxf4mNvCv+nwjhSymP+2PCL0K9yW+JWo82CHR7eShejv5ce42N/fy3fSge8pPZHGlfhGL7TcZWkB7HibhGk8H/N8gU/uNzus2hxtsZz2xIfyTZh2zCoblhH7QzWnbByyevGZZB+Cv8Dlv5L4OuhvP6FbQcKe6WxP4guXwkQXLqzMi7olx6LWFnV+J3s0mFbNsB0bBX44OObn0F92xZMtWm7NrEu6N3GwoyD3jrotfm4eelUTOI2J5hez6Q8WQM6kOfl4E/h/4W1sz+HvjpsS/9/jMq6RwK5HIbVE86V18ON9an+FP5XzF5bQ+YGnI/EVaqj/CPsndbRS4Arhf9tRB2NKkvSmA638kh1FHkn4H7cckHh/4+Vi99HjOF4uRg9aioH3FLYrn3AscOqxu9klw7zktdTqb3EvJwF6ao37vcLaZXydKugt87CYPuwFfRK7QN/pY94vJJhhpXjQYGzdVjnKPwcxgHr3BohzVI5kPrYqFc6+CvTUnhMC4Wfx7hGrfvReMDtGkZKXPfjdWewPjXd0meCpbEV2ikIsRONXcaD9m0y38YlzZfoOH58NnNaw+YPb5k7ampao9YkHD2OLCVAH9mG3+P6Z2pNotO83SDwp/UfKbxUx6Q1D/vsBNdweZtMevmr4VvgnrROgetRYXObFdA2SGtgvNzRXA51Wleryzo5LtcprXViO9nJmlw7G0jlP075lPREPVu6UVGPtB02as4YVl7xXtTaDW+PsW1ysUZyM+MZZ76zlaUhzvhWeuVU2p6MdXcgxHa4RkLh17C29/FQr6LSaB2flyInae6K6wANryl99AYBH+c8T2Z9dLvX53g6rMP1AAp/AcPE9YA6ix+n3d0mhK+zMMRHqhPbIN425od5LmHz8P0hOHXAwXSGjbUJQ9q6ZmVV43eyS0d4tLWLj3l3CHwGIfyzoRzvCqbaNMpmVnYKevkx2TjW3gl6pbE2ceNzcZ7vdeCAz6WRJ865KPwLWX1+PoyleP/O+9OXHyXr5vOC7RFctwlc60wXzgso/Esj5gXSmifnKo3JqU4eijE5b7cG61PtU2d+cdYTtwnh6ywMtR/S1sIt4Mf7/DhHgMTpY4ZCwmOZpfBXCXOqqNd1Lf4aGG9xPbgf4EaWhqh+CvOKx7U6rz1KxuV9CbfZFfWp6aXwE2zNfD3UwbD1sBtC6qB0xIV1F4JuCn8c070BbCg9U4p6dp8Q/OKMZ9fE1LMhRE8QU4+UHs1xs7RePx84d/osg8efqT0i80HPZkGP43Fz7Dk16R8Jptd7F3PqqGMhuV0pvLResikivHS8o3T0FJ9T8zY8AL18Tr0V7kn1HNcRO51jRe3zkp5/tmvn7uuwnVtXb/nz8P86r4X5ILRzvbavbEGXehYIely3GQsgPRsi0tNpmeLxZ+rojAWgJ2yf3LtCnj90egTNX7Dy+d6DLJ9Rx13M1DEpLtZoDof0PJrryBeU6shnWB35M6gj0n60qONODtbOcfU8GvJzs6IeaW2+Xbn5VsgzvbjlhsK/hZWb78YoN5Jtwo7K5HpnqrxFYUWNLaV9SlHrklHPUHl4ykc+1qWy4Pb15Pj7gUn/CHDV5dOaJ9SD6ba7WbDd3KC1NlWurkuli+dXJ6/bcM16zAwCHA+mGnkrAFL4AH5jPEtqAMJsEHRYx8+T4wVpHOLjRATx43BqF7adv1QJbw5JZxDEq4Q8flglDDvPC88xaU5I2CJXnPO8eOHp5DyvsAakX0jDSEg8tL10htlFEWmm8P8ZkebNbdJ8IaQ57Lxc/hvDSZtnZgfyAnvUg8iFwVTunZYnHn+mOveFoCes002MteJwO4S9+HMF8+fhD7BOd6CB2ekZfXgOX6d2lvS4tjOexbo5Ij2dnjMunesdlU9XsDBhm7MGBEzr8MVoCr+gkZeOz+YW3/EnXViGefpseVukVIZ3sjK8GMqwtNA1UwtqndSVRHDwdWWm0hOFJdWHBHDm4b0e0KaqyThtENfv/YD2h4mpRo47oMV4UQNaDIuNIRWkbge0EqewsJ0OaPlKEg5oO10h5vH5U3BeIXQLUnram4n86SuvTLiyt5GlQRqoha3KJ0LwsaHkh7tItsOdUBQ+1+gQ7ABye+PpvpRXi0L4BUG8vOLxZ2o1fxHocbHbzzp8y7Nd2UgCr7BB7JNgACB9AEJ6sowfN8iyAcD5MACQVomjnhrFOa1C2rErdVDSwDNsl0O7co02GhAwrQv7AMQrYEDo5oSaXPLQPY3Oxe6U8eAm6a2bEcGvq0M3C7VUMp8vZGrpcrGay2PfRVzxXpwn1ccL4d2u6GXFQzf5wN+6Aea3BfwGmR9/4o0H0bkZMGUrcezP9Y8L4cPeJpawrOtzgEWHx0W98YU7nqyL+mAbhZ9kfWecD6FsENIT9YGOfviNbRm2Vdatavxvl8O1Ni4Au80SuOAbchT2SmaXXUunpkU6pI7ajv4IHYFwLxGE2w519At4T6tP9dscg5u0YMcxbgzhaTGkSfdSSEuniylLBT4un3xxne3GLxtg/NLuyddN9ZY/D38SG79shvGLtBsHx2GJQB47YJvC38STFoSxHaDw21h5b/cBK55O5Mgx437AisLvhvGLox1t4oIW6Zqpk+EQayBo7Vrn7ePT61NtReEvaUxKbT7vG+sM8xkhmJ8Ya2Hu7xDzmSGY72SYByLK/dHBVH2d7ijl8fHUFZyHrmr8Tnbnmh8LXesGv/lhyasFW/A0kX6pLeukzeS6ZurNSCltUfnMPwKNdUnCurpDrGHBz0WerolIN9c/GsFVSgeOKyQ9Rws2ofDXRPDi4akO87JPccmG/OPaijZMR+X3NUwn6bcLoZ1+LJTsdgyEw4+FctuvDcEK4PcxcK8/kD8WatvMP2m081K/NDeEM3Fo1y/x+Fj+3bSZhQnpTV5yOOZDjuj64TfnbfN7yYIWLobjGFiO8WOCUW1uGIa09tmu3lvHF+/pQfG69Wuvq1563RU3lNdXL7ihevV6ofzOhvRhucOTntdCWL6eycPhw9mr4fc6+L1e4IMObcLdqBAuzLWrH6ez64OpHzx+1Lrisi71LBP0RGGdLmBFtd/LhPCHS/t9MoSjuV037ffJcC+s/UYufP5Em2h4HcOx8/dhPuRmTFLKjAbT2zRKC+m+xpHuBOgLAnlcSvpHBT7Ee0Tw62Y9N13MpFJF8yi4mswmy5VkVB3j97BOXiuEP1MIT7ZeFzixtfhhkWuZXa0bYH7XgN8g8yOO0nqum3ajFMv+XP+4EB7XS+LmpYR14UFi0Xoub3upbrut652Pv/DtzKgTLflzC772jE4at1F6H/6wXYxxGz535bzdzstnzoa8rKKTbEjp7dSGvKyhDd3U5ZmzIa+j6CQbUnqtDSsd2JCXNVzD5m0T8e41+ybAjz+HuqDeCoeunQ2f2IENpXXw/mC6nVYLWDgPmRT4UDrXB1P58/yzDp9r8fjrAevGNli4WZrHj/PmHMe6BLCi9i9saoN1GWBFvSmzuQ3WNYAVdRriljZY1wJW1MlMN7fBug6wwk6+tbK1DdY6wOLx8bSNehus9YDF49cBa1sbrOsBi8ffBljb22DdAFg8/vaQeLx9s25UuEd13e2H51Idf5BVmi+4WOOW7C6NC8l2OwSu44If77e5H9ezQ9AjYa1RxNqoiHWtItZ6RawbFbE2KGJtUsTarIi1RRHrZkWsrYpYdUWsbYpYaxWxaB1ZWge9BvR0ug7K48dZB5Xa0LlB65nBw+vm55WvWXf96moArp9dkw7+e12I/nEhfhCBxeNEpSXqCxbUzod9wQL3dFD4CxuK+eldw0J8xXlHifowPpYlR37YP3A/Pm69oD7Vb7OQ5oSgR5qTUHqtLT4Pp0MHApb0bIGXiRMgDetAP97Dss7jUzhJz7Iu9SwT9ERhnSBgUXhpThH1bEHaR+b4SzjNZwvSHE+alxzMswWy2xIIh88WpLkeYgXwewnca/dsgbiEvQCMzxYo/LWNsj0scNXLj2Im6r0Ft/vUi7GfLZD+UYEPnhSO+yFXHSTXWjGdnMzUqslcZmJiMlmJqmOdniRxshDe7Z66ovhsga+DWTfA/DaB3yDz4yeO47MFN+1GMRnH/lz/uBAe++24eamJRc8WeNtLddttXe/dZwt8T0In6+K8v8RDCLgNT2XX3I/44D3M91MFrqNCvETIf9KD91CPxBmfo1jH9z9vH2/F4eWK73/mcW+st/x5+HG2/3lXxJ4NnKNjWeVlwzqsJ/xU2Dj9IYXfy8bKuP9Zerfixno4Z9IR9/0tCr8f+mQ3/aK8/5l0RZ10h/YIglaeRL0bJ72D5zaNhUlsb7iT2hvcQ8vXGHDvAV8zuBb86swP1/W2Mb8E+PE10XXgx+ffG8FvJ/NbA367mB8vo+ikNpMfyvKtDtpM6Us9OCfk9pX2IZ3GrrkfccV7WN54/LUh8bAdcbznKeW4Tjf3FUvvbPE04VhXWqeP079wXTO1ji6lLWqvBl9nwHVkCWtjh1jDgp+LPL02It1SmyBxldKB64JSPTtNsAmF3xTBi4eXDhua6fUAyYZa6wFkt5UQDveK8zK4MQQrgN8r4V7YeoDUjq4J4Ul627Wjcd8x4ePFz47LOuO+70/hf8veb/o8u8Y1OY51VTDV7yrmd1Pj2vH+qoK03hGA7W5iunEOtEFIT9w+m++hOvcg91BxbhyT598NLEzY2vNfsvH0p5fImIlAnkPgmJ7KRNx3Gin8NyPG9BRmICRdV4dg/jMri98OKeuBgCml6xpIF3JYCxwo/PeFdf0gmN7+8jJk3dr6VG7XCrqCkHvY51wb4helt11ce309u0Y/LCtoLyv0fCrMplhWKPxPIsqK9C5H1J5S5IBhrgnh8I8CB9sfzWn4T669ZkPI46wBdo3Ns5SVmAVrBJwwR2awyaPqgDj0O6r4SdtfedxrQjjyuPyMq0p1dXV92PO+PgBbHaKsL5Cd2/ei8jVpDz45aR8h9hu8Ll8FftcxP972opP6FEpvJ8/N9s565HqmxiRxxhrWXV5v+fPwv2f1Dr8gt5bxkDD516OxYkWtjVD4dvM10k+2lMb9UbqlfY0UflOHXKVnDXwMfS1wjToksx3XC2eY69oOuUr7GHhbbRqjK26oXnfx2vVVXj2QRgDXw3APw+A212tCqM6FcLiMjEeMYP+Ar/ldJ/CTHHKWuPQH7R2eVzzaWD62VfSbIVU0CKK3U0jbjPnQ8rMwtZAeoUQVx6ghrHTuKcfAY0Mo/CKWbmya4n70l8JL22X5EiguAfNqgMc+8cd8fEnXugHmpziVr0gf7+M2GKzHT69kH2kLsHQ84ziE57aSHrXgMijvwvhZuduh/ElHlkWlLWoLET8HvF/AuKLe8ufhT48of3WBg3TeLIXfJoSvszC4JMztS3Gl8sdfqbBugPkplr+qVP7qrSRNK39R6ZXsI20T3sbC4Afd+SODreDHy0s9mMqZt39kc37UkfQYNxHyn7jivahH2xfXp+px9XETesyG7aU0lLPXycY1DfW57TUfv2H94UsQ2wQ+0z6iPG9qunYw+0jtejKYGn67oJc/YloNereDXv6RXFxyto4vB54PXOsMG5fdo9L8Cvb4+CmN66hhJh6N+XTGfc/S8PjYB/Kx2hrwCztqjdufp5OXTWxvKfyljOdtzMbW8TaPL59bN8D8FMtqrdM+t8784vS524TwdRYG+1VeP3D6I02luM3Dpj9hH8XlR9Xy8C9meYQfxeV9O37Q98YOuccdw25k6cDjdusC7pYIHtsYlhSe8PCD0BXBJojJ60KdYW4NwbycYX67Q8wrQjCvjBjPSP2vdK46trs8PO+T641r6XWqHeBXZ37Y725n+jHslaCf+20LpjrkHMYX++x2fLHNJb9trM2+vnEtfYDexSNTKS/PENITNy83RqQfsXj/iuVVqkPbBXttnidjDnaIuVXo96Sx0tX1lu5tIX22ddhnW4dt00aBFx8LSPMbfAxI3G4R6ushmwOkqkmpP+R2xP5QmqdFfUej3RwU5wA8/Or6VL+ob4VIy2Nx+xt+xOgiONIx6psiUesV9noxhKd08zael5kq8+fh749o4yX7Sts+oso+n5fisaE8ryhu1NboQ1Feo8Zvkn22dGEfLK915ofHbvPygq8LapXXBJRXqQ2S8hLrT9x6inYaCgmPYyAK/64Y4yrOIepVgbjrC1Iftz2QdfO6yW2CHwCl8B/opfY8mUpJ9YPbFetHlA2t63SMiOs2fCxRBz9eP7aBn7RWG6fdtS6q7lBc/hFYaW4cdgR0O53IUZovS209hf98RFsv9b1RbX27Oo2vAPC2g+Ieurm6XJa5DeK09VHznboQPm5bj3NhaStwu7b7CxHlDx8rx/2+WFRZ2SKkrdNnI4cy72fy2UjYuBRtxW3CsaS2IWpNpdvxpnX4Ld12401cm6TwP+5wvBlVDutCeG/GmwdRDnttvCm1QXyd8F0RbRCO+aTyFzU+a9cG4eerpDaoX+DF+2LpNVDrVjX+J7t0Uc90HH+nNJcAfWQPfo/rHxHsqMgnFZWv0hqA2885JR/+gpr0PO7K+nTbhLU72IbTszTrLmM4VFZxW7N1/PnQH2CtSRoH8rikA8eBA/NbmIn5UzGlY9V4G4zjX+lYNYt7H9R9bhMcf0h5HjVe3sr0SOF538TDDzfSKs0P6wKHqLWnbUL4usA56vk86pb2G0h9KYUfY+k59PPDdOpQP/PHPitq7sjLYB30SH2R9Bqt9BoCnwNifd3A0iXVLTxmUHr9O4yjdfScFOsl1gkpTXRkH47XlgtlDOthwDDnsXudjkei1pTqQXvdUa86U/whITzHwzp2eow2I2xdB21K4VdE2HRbMD1dUTZtVyeIT5x1qnY2xW2mpCeuTSl8KsKm21icODal8NkIm0o2irLpDiG81JZEPauMa1PcEk164tqUwj82wqb8eVEcm1L4JxxCm/I074B4vM3A8TG2dyMh8cYjMOshmHSfx4s62lTKS6lNw7x8akReSumqx0zXNqV0beswXRT+Ykfp2hCSrg0dpqveJl343JXCPydGuqR1Eutw7Z/CPz/m2O5QrlXM5HopronWmd8G8JP2bEaViYOZ39wA8xseDsdq0n52zgPLAIWvxSwDM7OnXC4DUc/zpXF01Jyq3ZoO5rN0zJFUBnBNVTqSJe74nh+Zc+1RU8NxPomQ/6QT7/XFSBvWLT6P4HaleUQv7M3lfLDd3AxrD7yfl8Ypl4Ed2u3Nxb1W20GvtDc3bO3lZuBaZ9hx1l4o/F1s7WVb41oa8+D+2bAxT1gfw8tDWB+zO2b7Qrx6rY+pM784fcw2IXydhYnaP4tjBakfkfbPSusN+AxPei5jy8dXRtvzDxsH8fI+FESPB7F+3BsxnuF766T5ZioE8yFW7h+YPzX99aDlaF+WDffG+Tq6XxMxj5HmJVHPnHYK4XmbQ3zGgAOPi+nGvHojtAs8jVj3KR4fN/PwOG7mfnV23W4+sF1II9pwKCQ84Q1C+HcI5WxcSGcd9NUFfnH77zrjenOM9pd0Rn363TosJ1FjH3uNz8j5+jV/vvZw/HrLb2ba4nT6UI/18NkkLw94bL/UFsd9Ro6fH5KO27Fl5f5GZuAY/Y9YGcZ999K4X3qmjpifi2ivJLtFlcO4exGkNeetEfGk56Rc16rG/2Sy1pUjffUG3iyBS9ja7ZeYHXctlbkmpvHtzkXNBYYDud3V0Z1OJkBfEEyfa3D9I4ItXTzTrQMftA8+093mhE+qxp/p8vLLn+nWmW7Og+9Zw/aOzxO+AWMWqQ3g7dy5zJ+H/y4bL30rBDMIotu7dnvEfjp3Kq6rNRupbamDX9RzoDrzw7af8ijs3aYq8+fhf8zahqh3B5vPjhv/B5ifWtlM1Q753tp64zrOp22k8ldn98Lepx8Koudd+Lz+FxHjw6j9vZs65L5F4I71HOvON2DsyHVujKGzm/29i5k/D/+bGRw3HNnfOz38we7v5eUl7v7erzTabum97DifN5TWvKP6LF6+j2X+PPzsxjFsvXz+CtnJcflLH+o9xs2j5IPpZRPXuaL2dkqfpbHl772N8ufSjoVisjmmpTzkx8pzN8D8efjjGmVyhKWD/nf1SZJCOVXLlGvlXLlSyU6W8Zh46yjP7DFXtjwsWtCyGdlJ22bWEf6gG/zme8MDLK39QppIP5WlPhY+EfI/COQ5C+kaASzltKWi0sb54/OaAeBD12FYAx1iDYf4rdJJdzNP+yPSjfrDwkt1gO4PReDz8NSu8zI8BLaY5cYW6ah8G2I6Sf/BHINNv5dCOPwsFrf3YAhWAL+Xwr3+QD4GG9ul0WB6uimO4zYlHbcdIP0jgdP60GwHBoFPWN3lxxmuXluuNE5WxSYPs46bk8NhsjHrmt0i3MPi0AfxaKgndaHIMyFgSCbAL4AnBP1SU9IfojcIWsUVm492WHTdH8ElDCMBGKMRGEeqzpGqI7gjVSde1dEejaeLxXwpPZHMFiqTtUo20240rq1/ciI/ka1OTOZT2Xwmm6x0MhvA0QafdfcL9huE8C9ks258AtUXgWkdnqRK4V8SMZOXRkVSOuM0A5zPWDC9XOEMYqbKU6FcnChNlrLlbD45mSzkDyY/pXRz299QnxqeRpZDQfRsahDCX8HyCndrDLE4hHVTfTomcub5w0fs+DE2Cr+GcbgDVj24HbBL5KNpxS5oMgH6gkDuEkn/SOC0i05hfhAftA8+CXM0w5lIAD7nM0uwD+XlbMGPsGgliLc1PPwslkYenl9TfH5vU6NsjQOmdXQ6akLw6xfukX0fPmUNhm48bxIh/wkX7+EMntsG2zDefvInh/WQ9oPbk8el9gPr4oEFLcwdjWtpfIH5h21y1DiB6wtrr7C/ovB7WFuBHw/B/oqnEzlyfQOCXuuwvaLwt8NKnKN6L348knRJ/V0ikO0RBPFWoaT+cVTQQ/aaE0SvtES1E1ErXlTnhkLCE94ghL8/oi+bzeL0C7xwLEPhH4oYywwL6ZLqNd0fEcIPC+kaC6a3fxRXeipBtnd8Qu2k9FSC23Cw3t4+s7qwD5WBcQjPbSW1obNAT7upJT7FlVbReJvLx29jgn5Mp1QfhoR0RtUHKX1Ydt/b4diOf2h3VgiHuGM7Cv9BxuGuiLEd78s+vCCaK7Y3fO7Dw3+K9WUfg/yRVkGldrAf/Hheko14Ozgk4Er1GcuEVFd4eBxrU9kfCgnPx1M8/OciysQIiyONL3HMQOG/ENFGzgmmp4vPY9AOc4Xwc4LpdhgLprcBcwNZN08PtzN+QJvCf1lIj9Tu8icK1g0wP8V2V/waB7crtrtRNrQObT4qhOe2pPSNQ3huf6nuzAE/rnc2cGg3t8E2WRpv8LZDWl7lNiCew0J69fJuMpUAfZQ+fo/rHwmml3kXc8m4ZYTsM+rGPsmoMjgq2If4HOWETzJDZWVc0E1c6U113q7w8KPMhjw8v6b4/N7PobyOsXiEPw5+1uE8lvv1C/f6DhHWuIDF7UZ5auvxj8AW+GUr6T/h4j3kyPOTynxUG3GwejgWjW+k+mRlVeN3siuXSVM6jhLSQbp5udKrO7lC3LaO9I8ETutyKqoMc/vgXHdc4DoeTC/DW+qtcO3KN9cjYd3do1i7FbFuV8S6UxFL0157FbHuUMTao4i1URFLM437FbE0ee1UxNKsj5r5uEsRS7MOHVDE2qmIpVlW71XE0ixfdyli3a+IpVnue7XN0UzjA4pYmxSxHlTE0rSX5thEs3z16rhQs9z36lhuhyLWPkWsw2Es16vlXnNscqRP6wxrpyJWr9pLs9xrjuU028Kdilia9urV8ddmRaxeHX/dooilWbc165CmvTT7Ic061Ku212y/NNflenVtSLN8aY59e3WM2Yt9h73GZ1YafYf0rLePhRsWeGg+7yX8+Y7wyVbzImzF9eOzX/KX/hMW+pGuEcBSTlsqKm1Rz4j583BugzCseR1iDQt+LvJ0PCLdXP9oBFcpHaOKNhlUxMK9bdKeDem5KoWfL4SXysmYoJviUt4uYH6KeZuOylveRpD+g3l7m+z2PAhHX3PoC6bXjXkhWAH8fh7c62d43I0F08va7BCepBfvYVnh8UeBB/2mPS98DyztE5H29lhZ1fid7Mrl01Ftq9t+Jp+J23aT/plqu6PaMOtwb0ScNsy6rfVWuG7aHevuU8S6UxFrtyLWTkWsuxWxNNO4SxFroyKWZpnYoYi1UxHrNkWsw6FM3KGItV8Rq1frtqbtNe11iyKWZhr3KWJp5qNmud+jiKVZ7m9VxNIsEw8oYmmWiSPjr0dHG63Z125XxDoc2sIHFbG02hx7jXPtbnjdU9fD0qxDmm20Zp/Wq+PCXu3TenVupWl7zTqkaS/NNvpI3+F/32Gd5txKsy28SxHryJrCoatDmrbXTOP9ili9Oh/StP1eRaxdili9Os450k4cuvHEkXbi0Nm+V9uJOOMvfk4gnssrPccnrPltsC4ELB5/PmAtaIN1CWBJ+xko3sIQPfzMC74HY6GgW8InDGkfh5VVjd/JrlyhPCykQw8/XaHn4YtYuhON/6T7aHZf79l9Nvb5pKR/BLjq8mntJTga+KB9cC/BMQLXcfCzblu9FQ79+oV7fRFY+xWx7lbE2q2ItVER61ZFrB2KWAcUsTTtpZlGLV5SO9srZfUuRSzNuq1ZJu5QxDrSfh1pv1ymUdP2OxWxNMv9PYpYmnW7V+ujZhvdq32tZj7uUsQ6HPqhwyGNmrx2KmL1Yr9tr3He3ivlS9Ne9yli7VXE0hyb9GqfdqQ+Hro09mq/fTjM0zTbaNw79mgs93cqYvXqWse9ilgu2mh8L9C6VY3/ya5cJktr0fzZSSKYqpePRRTXzasJ0Ec24ve4/hHgqsynuY4vPcvh9ukD+7h5zpGsJACf8zlasI/0XAHHkYsbv/lzLB7+aJZGHp5fU3x+74mNiJrtpH3futTA7aAOpCdrqUyuWsgl8+VsrpLPpCvpQrKSzdVSqWIqXcoWM5naZLZYKaYztXQhPTkaTM93rAOO8jgbtw7gsyxHdTLyWdZCIY86fZa1tt4K10v9L32/J8758W7KQmbiYMuC6/PjpbIQdX583LJQr7fCdZt/mmNqzbnkPkUszbHFLkUszfGm5li/V9fodipiaabxdkUszXmD5vOKXl2PebQ/g7fuyHPgQ2f7I8+BD53tb1HE0iz3vfpc80g7cehsr5nG+xWxNMcTvWr7BxSxjtShzrC2K2IdqUOHzvaac/ddilj0DgWuIVm3qvE/2Z1LDwt6lbCzhL1YH7t5Bu2x3WNX8AZhH6fPu0bYS9SxMzlaS+PfhOffCP9qowBR2Wx8HnnKuj7/NnQf8+fhzzqmhfkXDcxRhhswDOuGAS8RaK45ppMJ0BcE8hoo6R8Brrp8WmugfcAH7YNroP0C13Hws+7meisc+vUL96Kw9ipiHVDE2qmItV8R615FrN2KWHf1KK9dilgbFbF29CivuxWxNMu9Ji9N2+9TxNLMR03b36KIpZnGBxSxNiliPaiIpWmvOxSxerVua/YdNJ6gd6/5+JG+Rz8WTB87zQF9A8yP49O4dAj8VzV+J7tzKcKf7Qa/+U2FWYKNeZpIP40zB1n4RMh/wkI/0jUCWNq2i0ob54/lZxbjg99ekLBmdYg1LPi5yNOhiHRz/aMRXKV0DIBNBgQ9CcEmdH92BC8efkzQTXHJhsPMT9GG6Sgb8rpI+g/mexRkt2UQjs6x6Auml8FZIVgB/F4G9/oZHnc45+Zt5Ggwvc0kvbZ9pPw5nvnjtyyOZ7r6hXtYX3j840OwpLUG6y6vt/x5+HRjrcFif33JVMwTBH5RZXeZEP4EFob4SLahuKOC7k7aUM5rXODQP0N6BmZIz+wZ0jM8Q3qGZkgPtu/LFPUsY2EGQc9yRT3LWZi5oOdERT0nsjA49juJ+fH2hnicLPCg/ukUdl+xf4q9f5f0jwBXZT7NsdYpwAftg33LqQLXccGP733lflzPqYIeCatfEYvKxlgwvaycDHpOEvScFKHnZEEPlavTIT2rGr+TXbl0kfLljGC6I78z2b2H6i0e6PrhN+dt2/R7lrZwMRzq5HY9E/x4HVsBfjyvVoLfaczvrMb1WDDdvlw396M04j3MRx7/9Ag9p3Sp5xRBz6gQr9u2UrIN5pOGHm63U0DPKYp6uN1OBT2nKurhZfE00LOUxePP27Yc04rD4/ExMI9LZ80NQvh3L2lh1huY1JacyXgptiVlStuKYLojv5VMN5bZs5gflrOzmR+WjXOYH7c5Oql9IlvY9ukjHbRPZzA/ShPlAcW/kz3z3HfM1Pg8D/GdEN5/Xgx+pwl+Fv+C41p8uB3smJ3KzTCLi+WGwr8TyoqbfidfkPoWHEutcKQ7Tn2W+hbOh3iPCH4DXXCtTRaTmWQ+X6nmsxO5bC0RTK9T/cI9nLeuFMJL3xskW5/lxtZpqgv99RY+75etG2B+K8BvkPkRR1tXX7B0Kv+VjvjHsT/XPy6Ev4SloZO8dInF2wMNrFkHiTU/mN4nUZvjeOxbktogclKdHwc/XubmgR+vT/jNad6X8bU+dO3G01/roL/i/eKKEEzqC/hcgPqYQQj7Sda3fQz6Nj4mfFZ9qh8fe5Eei/F1GPeQHr7WTP2kdVeH8PrajIx1shVprIP910pHuuP2Xzj/4XyI94jg103/NZGqZarJiYlseqKSy+fzUf0Rv4f911lCeOmMW7L12W5sPSH1X2cxu1o3wPywb+P9F3GU+i83/W92Io79uf5xIfwaloZO8pLadmncJLUVq+tT/ficj491vw513M04MT2B9YY7qZ3H/oGXSewf+JwF+4dzmV+n/QPZotP+gbeTPE0cc4Ddk9r4QQj/I9ZH/C30EbxPJ9023AsWTw23UuDtts7EX2sl/VIb6mKtVWoTpXonlT+s39zvGHbN/bieswU9EtagIhaVi7FgehldCXrOFPScGaFnpaCHyhWvf3r5mElSviSD6Y78Uuxep2utxLvTtVZu1xT48TqWBj+eVxnw4+1btnE9Fky3L9fN/SiNeA/zkcc/N0LPWV3qOUvQMyrES4T8Jz14D/VItolaKzlYPVJ7j3muoYfb7WzQc7aiHl4WzwE9fIzO11rnLm7F4fH4Wqs09x6E8K9ma61jDczhYHo9OFRtiVRm08wPy1mG+WHZyDI/bnN0UvtEtuh0rZW31TxNnHvcsQmFPx7yydFYIjkf0iXZNGoNtNfGOG7m09FjHKkf73SMw88Xw7an03HJKYpYVLbHgiB0XJIAP65nZYQeabx0uI5xpDZkpsY4OFbtdOzB4z/axjhha1QaeqT1jcNtjPM0pTHOPjbGeSb0nW7WX3THOFjOXI1x+PrLR5TmYO3WShKgO2ws9Jz6I/9xneali1uYL14czut0pvuvj6zToDts12mi9jhh39fpHidpv8jhOobhdp3pMQzXzf0oje3GFjz+o20MM1N77w7XMcytSmOYzWwMs8/DdRosZz6t0/Dn+XHGJhT+oR5apzlJSL/bPSrxxzikfwS4uhrjSP24tLdd6p8ortT24DqNNJY6S9AjYZ2iiIXrNBz7JNAjvRNxSoQead+z230N6Sr2/9xJ/WWnYxy+16GTMQ63K7aFvI4lwa/T9Z2xYLp9u13X4/HPjtBzepd6Thf0uO6rZ2o//kyNpQ7VulPYGOdPYYxD8eKOcSj8ajbG+dKMrNN01pZIZTbJ/LCc8XEElg1pfSdu+3Sw6zS8rcb2ia+VUDhprUSqO47HEbG/gYPjCEfvM0aOI6S+cm7Qetf18ur6S6+fWH3F5DOqG9Y96erKpeXr1l9RXv2kSuW66rp1PDVYajC1WFowDF2PC/c5xoo2qaA3/KUVkhWAtbIN1oWAJe1Cx1YkDOsSwJJaLuyRpNqGoykenvM5uw2fy+rhfM4GrHPaYF0DWNLMk7DObYN1LWDx+OdCvGSIHh6Gt4ZJQbeEj+U21YbzdfWpnDkvnJ2l22CtAywePw1YmTZY6wGLx89AvGyIHh6Gz4KzTE9CuCfxub4ezicLWLk2WDcAFo+fA6x8G6wbAYvHz0O8QogeHibP7heYnoRwT+JzUz2cD8WN08Nxroo9Suxd8aR/pnq4dnbFmXJR4Dou+OEsoijoKQp6JKwVilhnKWKtVMQ6WxHrXEWspCJWShEro4iVVsTKKmJRmyg9iVgAejp9EsHjz9STiAWgh6/I8dnmyce24vAyyGebPC71RYMQ/kVstnlaA1NaIYt64oOrLp3aWdJDfQ0vw4qr+nmyL+/DyZEf7+eOZdfopNkp8e509YzbFftk3s4UwY+3GyXw43X3MY3rsWC6fbFNlMaB/F5UOc5E6El2qScp6BkV4nVbLyXbuK7/uCqaVNQjzR+w/GjokeYW7dqzp0J7RvHC2jMayw5C+Kez9uwZDczhYHo9OJRtCZZZaVxCfiXmh2XjMcyP2xyd1D6RLTpdPeNtNbZPUp0YDqaXvUPxdI30jwTT65yLOYO0JiD1gVL7TXGl+nQcu8Z62y/ci6qbpyhi0VwyauyQAD+uJ+rpmjTWcDw+yOJTeO5GIc3Wdfp07WDHB9yuOfDjdSwPfjyvsN7ydpHaIqnfxvLSab/N4z/axgcz9XTtcB0fbOtwfIBP1yj8Y9j4YCeMD/h6WK+OD7CcuRofkC06HR/wuX2B4WP54uF4HkplPRDuJQQcrHOpEP3WPa/+yH9pbX0h6JD6cn4Py/dCgW9UfXXblz1yujjXR+ng97j+EcEmLsZImZh2lcpWBmwulQMsI1xPVtAjYWE7GLUunnJjr9hjXNI/U+vi0nhxoWDXmSjfYfmcjODjpr1vnUTf7vkQ8bEniwwF08uQ9FwMefPnSHQvLG+inmdHPVts9zwQn2eHpSEsj6KeZ0s2GAS/Lzf6cWvD9x87NQw9h/08C/PBxrXUL2OddvSsK3adxmddeTd8Ip91cfvwMjsriC47PO/C9gGcI6QVy/LZbThhWe50zwHHwrIctecg2QYLyzKPj+MC3lbjzjZpJzjOQTn+w7vRjg3HT0bgpyLwMxH40g5YaU07C3587plj+F+LwF8ZgX92BP45Aj5iUrsxzvxOAj8K+/UGhh0j7zte5ksY1rk9VS5+m0L6Z2qnubQfKmqnubRPKeqttah2ImoXLsdaoYhFz8/d7gDPZKQ1DXLS+tVM7QDn+YL1ndsZ1694vcD1K74ngfqJmdqZLenptrysEPSMCvESIf9JD96L85Yn5pOGHmk/JOa5hh5prySWHw09UTvA+XiVr1H9DtaopB3g0lgXd4CvYGtUv4c1KjdvT+nuAMdyxseEWDa62QHOT5P+SJdvqNjdyfR29uXV9c+obnheefUVlfL6K9Ze/azqtddX160fAFisPljMV4bQ5ThBBF3r+sDvFPCnQzX7AtnFWbZw0z3FH46Q/platmi3hRmHI+cIXMcFvyXsGqtSv3CvLwLrTEUs/FAKx8alsk4PYTxF4HzkEMYjhzCG6TlyCOPB6emFl/vDHs1l4cMl/DD6OI/mKPxxbNhTaGC6/Sibn4cwki26efEN2yf+MRs6mJ/8Tmbx8GNL/INc/IU5+piNtB2EXgIbg9/2mj5SOAi8XgLlgX/MULE8ND8KIH1Eyu0LfpnYrz+ETeM47xHBr5uPAqSrE5P5crmWmawlJ8u1KtZ14or3+ph+bHsp/FFCeMcHk5WpvvCPAvD6a90A88NXEAeZH38RFT8K4OawzUw5jv25/nEh/EUsDZ3kpTTlP9gP4dEHBvjHTfCju7xtwrroph2IP3ch/SPAVZlPc+4ifcx4qWBXaapLcaWxOx5M1ukWPal918CivkfqK5aCHunD0CdE6FkqcO6lDxZZN1Mf6+R2xSUaXsdwyY3nFY5xeJ3GpVRuXywvnbZDPH7UQXbLutSzTNDjein1BNDj6sPT2Oa6+vD0ofooaNjcZU/IRxfjzl2a4y02d7kNxqr4IeNVjd/JrlznHz/DMsuXW7Gc8fkmlg0+X+E2Rye1T2SLbuYu2D5JdaJXxwcnuOETOT6Q+sBOxwd4qFc3ffoZilhULsaC6fmN/Ypkm2UReqT28XAdH3C7Yv2L2pqhMT5w0W9Lek7qUs9Jgh7X44OZ6rdPAj0nKeqJ2jo0U+ODsI95fy7G+CDqY94U/nfHtTC/AOMDN32C7vgAy1mnH/qO2z6RLTodH/C53IoQzEEh7PHgR2G/zvLrt7CWyeMvD6b6Hc/8TgQ/ae4q9Vscg+vgZY7X88vrU9NA4b/T4G1tedtSGbMvBJPKsbROxufK1g0wP73yO5myvGusDHCbPpze+tQ08TapXwiPa5HSuIO3Rcsb13HGMNLaw3J2j9baJHsSx0Nhz+WMYxx78vCd2pNsFLXOkwim55s0jo2y5/LGvUNhT84xjj2lsXkCbMLDc3uSjcaD6TY8DbCWC1i8vuNaMGEPCeGxTeLhf83anM8umcpPWm8jv+MFbN72JgCDp2NESMco+PG4FverR0/FlZ5LROWNdFzgmYIuat+lj3e7fUaQLkvzBXJSH4/9f9w1AOz/+Z6FqK3g3CbopLEB2cmWrf1suzWG49dcD+FiOcIys1TgKI0Fz2yD22mZwbms72UG15R4mcHy5EOZ4e03lpmTBI7S+mK7Y0axzEhb5/mYHcuMdECyTx956nYPBfnx11a4TdBJZYY/z+2kzLQ7UD+qzPAPM+F+mnPa4GKZkfZkSfWLyoy0J8vtRzXStVGBKzksT1L+xj1UGteqpFfSpPLEbYJOKjP8gxudlJl2x/timZHW06St59JrltK+PAovHYvK7YHtjPTa1rAQT7GdyY0KXMmRH389EvdS8lc5sY+RjnMkP37EAu6b4kcs4PG23EllhuzUaZmRjvqN285QXOlIjXav5mKZkV5vjltmKK7jMtNTR3OR32OZn29l5qlwRCRvo/GYp1RMnRS+3WvmWP6k8srb96jyh0eQUjy+xsb543FzFH6iMce1+fH1xrW0JkF2crsmkaxKaxLcroP1qemOsqF1ndZ5stl4ML09ToOfdFxk1F5V6dhT7bERjRceLWMj7OfifoysV8dGfP6EbdYKgaP0YRbptX3p455R7Ri3P5YZXi4orttjEDOpUYErOSnvsS/jeY/lQsp7aZ6F5ZDXffyMAndSmSE7dVpmpPYgbpnhxwPcGqPMSO9FHa5lJk578WgvM0870s50VGZwredwLDNzocycIeCezO7FeZ+CP5vE5xD8uRC+r8nj9eo+BHzWIH0sUlpvxv0evJxwm6CTygzZqdMycxrg8vyxLuo5BMW1ZWZLY7P+COiy/7t6x6dSqaayqUKpWM1mK6UcflDVOip/cxzoz+bKhclyIZUqZVPVbKqtfmv/RQum2nOAxeF5NyrcI1wq/4MQd9VBpgPNmgB9QSDvFSX9I8BVmU9zr+gg8EH74F7RIYHruOBHeTAWhOdJAvw4hwGBw7gQfyAGlpSeuQ2xbt36tddVzytfs+761dUAHJYVrNN9IfoTQvwgAovHcVGvJnP5iUlTuZLV1MPlcabrda4yUUwW0uVSZTJfyeQmZ1p/dSJbKkyUJnPJSrKUKmU6aVdGg+llKxHy37r+COxxAWtt/ZH/1AbxeqTZBhH+LOCnhN8cFw4KdiLds52krVaL276S/pHAaXvfbF9nAx+0D77rOuzGPlV7VCOVPd5mDQm2QR6zgOOII47SmilxIr8B5kc8bJgvHT+VY58jjm7raK0ijVH4XuRfLmnp5XnD16x5ue9j/jz8r9m7Sv/euB4LpvZLvJ2aw/xnCf70m/KrTwjLr/E3cUe78vBUJodC0joEaaXwv2Pr85cskDG5/TivvhDM3wtr/oTJ96JF1XkKP0cIz+sY8RkLptfNORCPcx8Opjp+T8qfBITFPpj6KR4v7PewgBPGYbaAg/0kYqJOaayHc6l+QQ+vU7zPHxb0K/YPOamvJCeNtRPgx9P+4norHDpp7kppsun9Hjyv4uGQj1TXNMdGdH+Q3Ue9OB4fgrC8P0ebDSpwHBf0DAHurAj+CcAZEOKNBnJ9lP7H5ZsQ+EbNhw9WD8d6SX2qHp7PUz5jCO8l8Ha8X4i7od7y5+HPWNrCPK1x3a5Pw7aEp+Gl9dY9bLNxHIt1Ep9rY9+FYXg/zsOf3UgH77uwfeBY9t65YE9pjCCN+3CMcAmzZxrsKY0BxoLptsEyPAy6+PiY+he0wWMYj8LScF1k19GINNp7j1sqh+MceDjEkPpOwpDqNcUbE3hh3cO2YyhCh9SfSToGwa/b/JH6bT7WkMYwkj/vz7kevNcnhG83/hgJwZZwhwQcqZ2fDX4JwQ/bMJ5e3obh2ESak/G2Uap3YXkXNfaWuMcZVw1FcJfsx9sh7bWcZDGZSk4WcrVaqpIvT2TbreXQ/Vn1qel6+D+7N8jSZd1sHh78hpnfQH2q/pHG7wGmh2MRj0EIP8Hy2rohFofijwv6h0D/FN7CPV7WEKtfuEfhbZ6+uMHRxRpdOlcqlksTyVS6lk5nivl2+SrZia8dWEe25nkxJKRtEMJfyfqc1fAO6qCgz4bbFBEuEfL/YQzh3kB96j0pj3jZpfCke6Q+nSP5zWF+g6BnbuM3txfHIh6DEP4mKLu8vFH8cUH/bNA/hbdwD8vuHCH8HCG8zZ9roT3iadde+3tYJ+Dze8htk8N6lc/mU8ViuTiZn6yVspMTM732PlnK10qZzEQqU6pUS6n8jK/9ZzMTtVTNrP9naslMMTXjzz7KybR5ljkxkUtVy6VSbcbTn0qlavnsRDE/mTZLjDP+7CVbK5TztUIyl65kq+lKeab1lwvVUjafSU9maqVyMVmcaf0TlfxkspRJVcrlQrKQLx7MsydcI7GO1qgcPSOOfb5Rs50Opo9lXTxT6Qc+aB98Zi09e5aew9E5+gnBL85zaddYY8H0/MZ1Cck2/RF6MK+si7NPwtW6aNwyR/pnap9E3H0FuNbI4+Kc0josJ9J+DOnZgS9YFN86XNfk5U+aB0eVR1o/lNafr2r4YVs6FoTnDfGiuSy/Pyhg49rjp+DMX1xPXNX4nezSYd/BdTnew5SX1svIjQrpxnznaySY7/jcm/vx/hj313DXD7+5LazuH8TYpyeVkQT4DQnpkNZnsK9JCLyinslHrfNJ/QSd2Z4AzCCIXseR1sjbjUfwmYd1jst+7PEI6R8JpueXi76h3XoZlvWo553S2mwC/Lie2YIeCatPEWsA0sPzA8uCo7Fg7HEC6R8JptvURVmQ6lxCsKs0No2zRyxqPBJ3PNnrWFFznjj5LunB8s/18P6dP5f8BTxHo3j8ORqPi+f+UfiNx7cwfwnr+VL+jwmccZwilbO+iPRLeoaFeKsa/5OduSzecLufLVnGsQF35DdHSHNCCC+NG4h3p2ek8nHDHPDj/dBc8ON95ij48baXvpMhlREcs3RaRnj8qLI41KUeafzkus4Pgh7Xe0GixkkHq0d6zibtB+pWDy+Ls0EPj8fbyvnHt+LweLyt5HEvq7f8efgrWVu5CPZ0utk7nCzhHIQ7aQ6CZZa3M1jO5jI/LBujzA/3ZHMntU9ki07PSOX9wAjDx/rSL8SNWg9yNOeMPeZ/NLw3Yx2Op6R9BNLcIuodHA2sqP4A97d12h9I65mO55JF7Fu5k9qDTs9YJ96djh+4XYfBT6q7BzvukNYrcIwszWv5vaj+dlaEnoEu9UTtmXTVD87UOAXn1i7eOZL6qZkaD4WNH54J4wdpDyiPi3MtCv8iNn64BMYPjvqEjtoSqczGHVtg2eBjC25zdFL71NwXFHQ2fuBlgtLE99FK60pSv5gIprexuA7F9UlrrxS318aHmL/SPFTKQ8xfPj7E+noU8+M2Qddu7NjJu+vS+IGHw32BCYGjVNelMiCtGVF46f0a3MNonbTfleL26vpEVN2WygW2r7xcYDkcY37cJujarYd0Umak9iBumeF7tml+GfWsgu5La5CDgs4ojtK4OG6bhfutpXeyUDfv5zj/sHny9oY92p05R3ZyfOZcTjpzjtt1EDhF2dC6Tus8PmOX2mNpvIXrG9KzYb4WrL03qJCezJUzuVJysporlPOFTvYGRb1PEGfcTWmXxtPW4bNuCn8fjKsctaHis+6wveq0XxXrLo4TKfz72TjxQWhbcH2T+0lzgqh3UaR3NjEfmvtRA7kuYBoo/OtjtgGUHsdtQFZqA3i9xTYg6r1X67ANmCuE530ovp8RNj7G/kCyOfYRfPwS1ebjfORdLI/wWxi8XI8Ad2kuLa2X4FqS9L6s5fJFqLOOnokXpHk4Oel5RgL8eD3BMRGeO8D9pHlSQuAgjW3IFp3uEdFoJ/iY/2F+9em8DkW95f0z1tuovjgIptfbdvWc1gHGg+l5ieVb6gs6qTPWXQT6pHf1eJ2Zw3QN1VthFfOgeT4U2bqfcR6ot7iTfukdJQrXnBe74ZokrvReBvVbXCdPSx+Ex2t8D+r7bH7I08jzMep9JumdEP6uDHGU3h+aU+8MazZgzeoCi3hJ78nMOkheEtYQYHXy/tefszoh7QsL20vxwxjre1F7KSj8b9i47e9g3Ka5Z69dW41tXtOWgdxXrWr8TnbnYu97Iv0jwfR+1cXzMKlPkObQZJ85bvhko8aKUh9lz0U6KpieZ5wfYUnz8qh1SSzr7WwzLsTHvaA8j6P2kGLfGGcPKS/vc4Lo+WUCsKR6LI2RJFtIazM4X/sfVu/nNz4qFfVOtFR/sd5Le47JL2zPcVjZilq7GBXCS3MT0s3L3mgMrFkRuo8Swo9G6Oa8eFzUHVZHpHEs2eZQrEHxsSeOY6Pmk9bFsaWUj+MQnttOqsdR61NzwI/XP6zj0vNhXl+kNS4+r6U+mn/nHO2g2Xfw+qeNX0xmC/i8Rpl/xvEe55Tj55ZJKnfn11v40r4O6dktxbF1jsq5vR5ncay7gGEnwO9CQa/LNJsykXP8/lp6gcB/gKXNuvPqQdPF1Jtqp5jG441Po0x79iqNHdrt+wpCMDgO7oNIhOjn6R6N4DYaoSPqHTE+Rx+oT/Vf1bif7MIViq15L/VtfN7L3QDz5+HpW5jazxBqhXKqlinXyrlypZKdbPt+NX2zyvP2fXKm2ndHbUXR8d5JsX2X9gD1QziMY/2j+gCX/SBvs1291+h4r2GG7BY19+H6u937xXWNBE7LcCoqbVHv/Uj7YaOw4u5TJaxDmadh+xMfDlNv+fWB3wDzGwI/Pnfh77QuZ+GwDuJ6Fe+rnlFvYaxkePQtDbKfy7bbVZth3YIgfBxB9/harbSGSjaX1tpn4jywFY3fvXwe2MmN6zlBa02Yf98nrI7wcSOuy0jzU8f1OU1cpb1D0ns3dt6/qHH98Pcjnnb1BTdVJ69ff8Xaq88rT76yGoDjlY8XzL4gvGPmCZUw+ll8yfkwKKaPqx7qQXHj2bzvg+LiTA2KXb3w43iDgjgolhocKsO0SMGviROFeQoL8xQWxrqogbP0MsEF4Mfr0oXgxxsr0msb4HlB65rKveMOvXgoO/Tmw8jGb9s4L29cX712/RW1DRdcfe311eurlUuvn1h9xeSF1189+UhDvXp1AA4H3Qn4jQse2CYPCDjoeLwES0Ovt9XHNX4f6raab/y3blGgb68ka6sXusFPSpukFrHrhZBOXvZWKXEgPCoHg8F01wd+zUEk8Evo85v2jcl+QRe5xl6Ept2sI3v+f4h9jYXL9wYA","debug_symbols":"","names":["borrow_private"],"brillig_names":["discover_new_messages","decompose_hint","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper","directive_invert"]},{"name":"compute_total_deposited_assets","hash":"12366041884668366497","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"deposit_accumulator","type":{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["compute_total_deposited_assets"],"brillig_names":["compute_total_deposited_assets"]},{"name":"_withdraw","hash":"1560517340434936633","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5235018679007078561":{"error_kind":"string","string":"Invalid asset or market id"},"6787403583199288031":{"error_kind":"string","string":"Insufficient balance"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"10435052277855889085":{"error_kind":"string","string":"Function _withdraw can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"15333773746166717806":{"error_kind":"string","string":"Insufficient collateral"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","names":["_withdraw"],"brillig_names":["_withdraw"]},{"name":"withdraw_public","hash":"3800380389708084413","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"1ZzdbuM2EIXfxde+4HA4P9xXKYpFfpyFAcMJnKRAEeTdKzmRrMaqhWV8VPEmsALOnM+yjg5l0Xpb3W9uX3/93O4fHp9XP/54W+0e725eto/7Zuvtfb26PWx3u+2vn8N/r0L7J8bj+Oenm327+fxyc3hZ/SCOEtarzf6+fc0uTY+H7W7TbIXwvj4fH2LshocU+9HZRgYnVfocnNRCP1hlZLBLkM/BLpGGg/9cryJfhz7nbjhRno8+XYdevN/3PrHvScy6wcp8mT5L7t5qVk5f6eXa9BT/Rd9q6AwaNqZhGrtjwjSdjglh8DHh4zSmPU1OEzTOqaPxgRn/g8ZiT+P2lSaP05D1NCaXaS6/XQ5oAUILRLQAowUSWkDQAooWMLSAowXQTk5oJ6fvOzkqdSf1qGaD2EhHhQhXYLhCgisIXEHhCgZXcLhCRitIgCvAPS1wTwvc0wL3tHzf08rdHFvldF2R9dhese0N296x7TO0vQZse8K2j9j2jG2fsO2xrlWsaxXrWsW6VuHpa/D0NXj6Gjx9DZ6+Bk9fg8+oDT6jNviM2uAzaoN72uGedrinHe5px6ayY1PZsans2FR2bCo7NpUdO5fO2Ll0xs6lM3YunbGuzVjXZqxrM9a1+fuuJQ/dXSNy8q8CWN9mrG+b24Lg/gTuH8H9Gdw/gfsLuL+C+xu4v4P7g/1LYP8S2L8E9i+B/Utg/xLYvwT2L4H9S/BrXyL4xS/FgJcgvETESzBeIuElBC+heAnDS+DdHfHuZry7Ge9uBic1g5P6Cou5LvcHJzWDk5rBSc3gmTaDZ9oJPNNO4Jl2Avv3Ciu4nFI32NnzUOG3Bh9x0rJwZFk4kycTE72M01y69aOb12lAP7a+nkPqVoJzGPT+WMJI0+vO5gbypQHlhQFNL4KbG4iWBhSXBsRLA0pLA5KlAS3tTC3zn6mbb/k7oGb0EGgk+Fi4Dz7zM3qvmj7XTK+hanqqmj5WTc9V06eq6aVq+v8hPrP19IPL5FH65v64dfjNuw7pjN8q5/fK+XPd/BYq56fK+efP3WZExx8lT/Erac+vbGf88ycvh37/89TZv2H2/gkVwYjP+OfP3uh+4pcpfsuDZ1QkOuOXyvm1cn6rnN8r589183uonJ8q54+V83Pl/JXnr1eev155/nrl+euV569Xnr95Sfl7BFpSoB6BlpSQR6D5T7kp9He80uQlJ0WnvjeHsxtkWSvnt8r5vXL+XDV/DNc4w7H3v7mjFOKQ/6gRZ9DgGTQSXmP8Jx6UUl+V5PS9X1T9qLKiKi+qyiVV4z+amKyioqpYVMVFVamoavzzOi3qbm4Bn5ydPorGV6Y3Nyz774RVw1kRlRRJCZ6WFBXtCC8pygVFKZQUUUlRLCnigg93fK3tVJGUFGlJkZUUeUlRLiiSEhNKiQkllhSVHBFSckTIbx8R783WXzeH7c3tbvP5QPeH1/3d4PnuL38/bb486v3p8Hi3uX89bNqHvp+e994SR/E1EzcwLQpTWrN6OydrP6IYdB2J2s1250eKzWZqGBqOfwA=","names":["withdraw_public"],"brillig_names":["withdraw_public"]},{"name":"get_total_borrowed_assets","hash":"18031002835321713193","is_unconstrained":true,"custom_attributes":["utility","view"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_total_borrowed_assets"],"brillig_names":["get_total_borrowed_assets"]},{"name":"get_accumulators","hash":"10135036379664091239","is_unconstrained":true,"custom_attributes":["utility","view"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]},{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]}]},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_accumulators"],"brillig_names":["get_accumulators"]},{"name":"withdraw_private","hash":"1112511615830836473","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"H4sIAAAAAAAA/+19B5wbx3X+4hp5R57u2CRKpESqS6QKenGlreKq5t5t3AGQJZGiJFKFTQSrKIoSJarLvffeWxw7/iduceLYcU9sJ46dxE4cJ46dOLHzn5HwgHffvV0siDdHjMj5/d7dYmfme9+86bOzs4ngEbeyPwgG+h+5Thjpb/zvM7Ic7tF/fj0ohJsj3BsV7o0J9+YJ9442sgruLRPCLRfunSjcO0m4d7pwb4WRejDVJRr/VzX+Z5L5bLZaSFdTmVQ5mS5NFHPJbG4iX0wVU7lirpIuZjLVYrZYKE2UCslSKpuppmq5UqaWfMQl+ltYya5cetIlz76D55nHG5bbfCMDjKu1wx8a12cEresz2XVfIwzF62+U3UEjQ/2t++T6wQbJ7lxqhSJWf79e3sxSK0PJpEv7rVTEGlC032xP7HeWItagov2GFe0ntQ2zWNswm10Ps+shaBtGzO85RuYaGRXahj7lvDk90LPnUXr2TPH+zOIud2yHoxTL1ZgjO4w17DAANuAuoWyXROCmjQl0eU40AQcakpgB45wR6DYg5Mb7HRJuggd6JZ4MPhNGV8RK8ho0r2GX+f2QAO3uUNPw8+I3W5NtsFLzFbvDmSwQmrWQF4gFjYxf6LpAnKFYIBYoFoiFyuOj2UaGmR2b2MVMtVBKpSrFTC5ZKuTTJcMgX8hlUrXJVG6yXKsUSuViaaJanZzIlErJTC1fyhXSk/lMvpYt58p/ALxUuVDLVWvlcqVQyxiAdK5cShVrmeTkZLFSyGQytcnJ8kTBeE+WkrVUtlItpiYmJ3PpYq1UyuQqf9DN3+S0Ap/LlsvFfLmQmZwoljPZXDpXzU1MVCv5ajYzUU6lSsVqMZ+s5WqZUi6ZzhdrhVSlls2VUhOVajaZRn7pZKkyWZuopc2fXKFWquWTWWOZbKWQKk/ma+VasZA2KmuThWyyMJnMVify6VQ5ny4WJsuTqXTedXrTlVpxopRNVnPFUrKaNcWxUKgmc5lCplau5kvlVKWQy5o8zeSqxijF5EQ+ny9lC1mT/+nJyuS0/EhXJyvFYiWVK+ULE5O5zESxaGyTriYrqXwxn0+ZtE5O5MvlyXQlUyvmqmmTzkK1WptIT6ZKprC5SO9QA+vhtSA2vp/Prhew64WNa0Ueae10WbxFhufRRo6BRlB7nWax3nrShEuexyrwzOYKuVo5k3bJ87iD51nAG9LcdjEry8ey60Xs+jiY2y4xv5caOd7ICTOw7nWmItYSxfnhMk/WbTTXDZcq2m/5YbhueLyi/U50vO61jLUBy9n1iez6BGgbTjK/TzZyipFTZ6Bt0FyTPEkxb05znDensTw4mV2fwq5Phbw53fw+w8iZRlb0t5ZY+li+SG6VTjryfHylrQP7Yu3J6SIHbZU2R8V+0hnHFR5wXOkBx7MccHTB83RHfXzT9SkTHlPsBFY6eoCwkj1A6A+md7IuMtLVAwRfCpw2zzFPePYHM1yBu610mok/21HitdOsWDlT53iS5j7FNJ/rSZoVK2MqOUNpTnbnUilF+4140uimAz94ZjzhmfWEZ84TnnlPeBY84Vn0hGfJE56P8YTnYz3h+ThPeD7eE55P8ITnEz3hucoTnk/yhOeTPeF5nic8z/eE5wWe8LzQE55P8YTnUz3h+TRPeD7dE57P8ITnMz3heZEnPC/2hOclnvC81BOel3nC81me8Hy2Jzyf4wnP53rC83mOePbyc8Hnz1Cak9251AsU7XeUJ8+LXhj4wfNFnvB8sSc8X+IJz5d6wvNlnvB8uSc8X+EJz7InPCc84TnpCc+KJzyrnvCsecLzck94vtITnld4wvNKT3he5QnP1Z7wXOMJz6s94bnWE57XeMLzWk94XucJz3We8FzvCc/rPeF5gyc8b/SE502e8NzgCc+NnvDc5AnPzZ7w3OIJz5s94bnVE551T3hu84Tndk947vCE505PeO7yhOduT3je4gnPPZ7wvNUTnns94XmbJzz3ecLzdk943uEJz/2e8LzTE553ecLzgCc87/aE5z2e8LzXE573ecLzfk94PuAJzwc94fmQJzxf5QnPV3vC8zWe8HytJzxf5wnP13vC8w2e8HyjJzzf5AnPN3vC8y2e8HyrJzzf5gnPt3vC8x2e8HynJzzf5QnPd3vC8z2e8HyvJzzf5wnP93vC8wOe8PygJzw/5AnPD3vC8yOe8PyoJzw/5gnPj3vC8xOe8PykJzw/5QnPT3vC8zOe8PwjT3h+1hOef+wJz895wvPznvD8E094fsETnv/PE55/6gnPP/OE5xc94fklT3h+2ROeX/GE51c94fnnnvD8mic8/8ITnn/pCc+ve8Lzrzzh+Q1PeH7TE55/7QnPb3nC89ue8PyOJzy/6wnP73nC8/ue8PyBJzz/xhOef+sJzx96wvNHnvD8sSc8/84Tnn/vCc+feMLzHzzh+VNPeP7ME57/6AnPf/KE5z97wvPnnvD8hSc8/8UTnv/qCc9fesLz3zzh+StPeP67Jzz/wxOev/aE5396wvM3nvD8rSc8/8sTnv/tCc/fecLzfzzh+b+e8Py9Jzz/4AnP//OEpwX0gWfCE559nvDs94TngCc8Bz3hOeQJz1me8JztCc9hT3iOeMJzjic853rCc9QTnkd5wnPME57jnvCc5wnP+Z7wXOAJz4We8FzkCc+jPeF5jCc8F3vC81hPeB7nCc8lnvBc6gnP4z3heYInPJd5wnO5JzxP9ITnSZ7wPNkTnqd4wvNUT3ie5gnP0z3heYYnPM/0hOcKT3iu9ITnWZ7wPNsTnud4wvNcT3gmPeGZ8oRn2hOeGU94Zj3hmfOEZ94TngVPeBY94VnyhOdjPOH5WE94Ps4Tno/3hOcTHPHsA56ZZD6brRbS1VQmVU6mSxPFXDKbm8gXU8VUrpirpIuZTLWYLRZKE6VCspTKZqqpWq6UqTWwE4ppfuJhmOZVnqS5XzHNT5qhNCe7c6knJ/Tsd3q/H2k+TzHNY/1+tLXne9InXOAJzws94fkUT3g+1ROeT/OE59M94fkMT3g+0xOeF3nC82JPeF7iCc9LPeF5mSc8n+UJz2d7wvM5nvB8ric8n+cJz+d7wvMFnvB8oSc8X+QJzxd7wvMlnvB8qSc8X+YJz5d7wvMVnvAse8JzwhOek57wrHjCs+oJz5onPC/3hOcrPeF5hSc8r/SE51We8FztCc81nvC82hOeaz3heY0nPK/1hOd1nvBc5wnP9Z7wvN4Tnjd4wvNGT3je5AnPDZ7w3OgJz02e8NzsCc8tnvC82ROeWz3hWfeE5zZPeG73hOcOT3ju9ITnLk947vaE5y2e8NzjCc9bPeG51xOet3nCc58nPG/3hOcdnvDc7wnPOz3heZcnPA94wvNuT3je4wnPez3heZ8nPO/3hOcDnvB80BOeD3nC81We8Hy1Jzxf4wnP13rC83We8Hy9Jzzf4AnPN3rC802e8HyzJzzf4gnPt3rC822e8Hy7Jzzf4QnPd3rC812e8Hy3Jzzf4wnP93rC832e8Hy/Jzw/4AnPD3rC80Oe8PywJzw/4gnPj3rC82Oe8Py4Jzw/4QnPT3rC81Oe8Py0Jzw/4wnPP/KE52c94fnHnvD8nCc8P+8Jzz/xhOcXPOH5/zzh+aee8PwzT3h+0ROeX/KE55c94fkVT3h+1ROef+4Jz695wvMvPOH5l57w/LonPP/KE57f8ITnNz3h+dee8PyWJzy/7QnP73jC87ue8PyeJzy/7wnPH3jC82884fm3nvD8oSc8f+QJzx97wvPvPOH5957w/IknPP/BE54/9YTnzzzh+Y+e8PwnT3j+syc8f+4Jz194wvNfPOH5r57w/KUnPP/NE56/8oTnv3vC8z884flrT3j+pyc8f+MJz996wvO/POH5357w/J0nPP/HE57/6wnP33vC8w+e8Pw/T3gGfX7wTHjCs88Tnv2e8BzwhOegJzyHPOE5yxOesz3hOewJzxFPeM7xhOdcT3iOesLzKE94jnnCc9wTnvM84TnfE54LPOG50BOeizzhebQnPI/xhOdiT3ge6wnP4zzhucQTnks94Xm8JzxP8ITnMk94LveE54me8DzJE54ne8LzFE94nuoJz9M84Xm6JzzP8ITnmZ7wXOEJz5We8DzLE55ne8LzHE94nusJz6QnPFOe8Ex7wjPjCc+sJzxznvDMe8Kz4AnPoic8S57wfIwnPB/rCc/HecLz8Z7wfIInPJ/oCc9VnvB8kic8n+wJz/M84Xm+Jzwv8ITnhZ7wfIonPJ/qCc+necLz6Z7wfIYnPJ/pCc+LPOF5sSc8L/GE56We8LzME57P8oTnsz3h+RxPeD7XE57P84Tn8z3h+QJPeL7QE54v8oTniz3h+RJPeL7UE54v84Tnyz3h+QpPeJY94TnhCc9JT3hWPOFZ9YRnzROel3vC85We8LzCE55XesLzKk94rvaE5xpPeF7tCc+1nvC8xhOe13rC8zpPeK7zhOd6T3he7wnPGzzheaMnPG/yhOcGT3hu9ITnJk94bvaE5xZPeN7sCc+tnvCse8Jzmyc8t3vCc4cnPHd6wnOXJzx3e8LzFk947vGE562e8NzrCc/bPOG5zxOet3vC8w5PeO73hOednvC8yxOeBzzhebcnPO/xhOe9nvC8zxOe93vC8wFPeD7oCc+HPOH5Kk94vtoTnq/xhOdrPeH5Ok94vt4Tnm/whOcbPeH5Jk94vtkTnm/xhOdbPeH5Nk94vt0Tnu/whOc7PeH5Lk94vtsTnu/xhOd7PeH5Pk94vt8Tnh/whOcHPeH5IU94ftgTnh/xhOdHPeH5MU94ftwTnp/whOcnPeH5KU94ftoTnp/xhOcfecLzs57w/GNPeH7OE56f94Tnn3jC8wue8Px/nvD8U094/pknPL/oCc8vecLzy57w/IonPL/qCc8/94Tn1zzh+Ree8PxLT3h+3ROef+UJz294wvObnvD8a094fssTnt/2hOd3POH5XU94fs8Tnt93xLMPeGaS+Wy2WkhXU5lUOZkuTRRzyWxuIl9MFVO5Yq6SLmYy1WK2WChNlArJUiqbqaZquVKm1sA+XTHNP5ihNCe7c6m/6dOz38p+P/J5QNF+f+tJ2R5UTPMPPUnzkGKaf+RJmmcppvnHnqR5tmKa/86TNA8rpvnvPUnziGKaf+JJmucopvkfPEnzXMU0/9STNI8qpvlnnqT5KMU0/6MnaR5TTPM/eZLmccU0/7MnaZ6nmOafe5Lm+Ypp/oUnaV6gmOZ/8STNCxXT/K+epHmRYpp/6Umaj1ZM8795kuZjFNP8K0/SvFgxzf/uSZqPVUzzf3iS5uMU0/xrT9K8RDHN/+lJmpcqpvk3nqT5eMU0/9aTNJ+gmOb/8iTNyxTT/N+epHm5Ypp/50maT1RM8/94kuaTFNP8v56k+WTFNP/ekzSfopjmP3iS5lMV0/x/nqT5NMU0B4p7KwzUw3t8vtlI8NlGzjFyrsU2kjKStuk3kjWSM5I3UjBSNFIy8hgjjzXyOCOPN/IEI09spPdJRp5s5Dwj5xu5wMiFRp5i5KlGnmbk6UaeYeSZRi4ycrGRS4xcauQyI88y8mwjzzHyXCPPM/J8Iy8w8kIjLzLyYiMvMfJSIy8z8nIjrzBSNjJhZNJIxUjVSM3I5UZeaeQKI1caucrIaiNrjFxtZK2Ra4xca+Q6I+uMrDdyvZEbjNxo5CYjG4xsNLLJyGYjW4zcbGSrkbqRbUa2G9lhZKeRXUZ2G7nFyB4jtxrZa+Q2I/uM3G7kDiP7jdxp5C4jB4zcbeQeI/cauc/I/UYeMPKgkYeMvMrIq428xshrjbzOyOuNvMHIG428ycibjbzFyFuNvM3I2428w8g7jbzLyLuNvMfIe428z8j7jXzAyAeNfMjIh418xMhHjXzMyMeNfMLIJ418ysinjXzGyB8Z+ayRPzbyOSOfN/InRr5g5P8Z+VMjf2bki0a+ZOTLRr5i5KtG/tzI14z8hZG/NPJ1I39l5BtGvmnkr418y8i3jXzHyHeNfM/I9438wMjfGPlbIz808iMjPzbyd0b+3shPjPyDkZ8a+ZmRfzTyT0b+2cjPjfzCyL8Y+VcjvzTyb0Z+ZeTfjfyHkV8b+U8jvzHyWyP/ZeS/jfzOyP8Y+V8jvzfyByP/Z8RWrISRPiP9RgaMDBoZMjLLyGwjw0ZGjMwxMtfIqJGjjIwZGTcyz8h8IwuMLDSyyMjRRo4xstjIsUaOM7LEyFIjxxs5wcgyI8uNnGjkJCMnGznFyKlGTjNyupEzjJxpZIWRlUbOMnK2kXOMnGskaSRlJG0kYyRrJGckb6RgpGikZOQxRh5r5HFGHm/kCUaeaGSVkScZebKR84ycb+QCIxcaeYqRpxp5mpGnG3mGkWcaucjIxUYuMXKpkcuMPMvIs408x8hzjTzPyPONvMDIC428yMiLjbzEyEuNvMzIy428wkjZyISRSSMVI1UjNSOXG3mlkSuMXGnkKiOrjawxcrWRtUauMXKtkeuMrDOy3sj1Rm4wcqORm4xsMLLRyCYjm41sMXKzka1G6ka2GdluZIeRnUZ2Gdlt5BYje4zcamSvkduM7DNyu5E7jOw3cqeRu4wcMHK3kXuM3GvkPiP3G3nAyINGHjLyKiOvNvIaI6818jojrzfyBiNvNPImI2828hYjbzXyNiNvN/IOI+808i4j7zbyHiPvNfI+I+838gEjHzTyISMfNvIRIx818jEjHzfyCSOfNPIpI5828hkjf2Tks0b+2MjnjHzeyJ8Y+YKR/2fkT438mZEvGvmSkS8b+YqRrxr5cyNfM/IXRv7SyNeN/JWRbxj5ppG/NvItI9828h0j3zXyPSPfN/IDI39j5G+N/NDIj4z82MjfGfl7Iz8x8g9GfmrkZ0b+0cg/GflnIz838gsj/2LkX4380si/GfmVkX838h9Gfm3kP438xshvjfyXkf828jsj/2Pkf4383sgfjPyfETuISBjpM9JvZMDIoJEhI7OMzDYybGTEyBwjc42MGjnKyJiRcSPzjMw3ssDIQiOLjBxt5Bgji40ca+Q4I0uMLDVyvJETjCwzstzIiUZOMnKykVOMnGrkNCOnGznDyJlGVhhZaeQsI2cbOcfIuUaSRlJG0kYyRrJGckbyRgpGikZKRh5j5LFGHmfk8UaeYOSJdlxm5ElGnmzkPCPnG7nAyIVGnmLkqUaeZuTpRp5h5JlGLjJysZFLjFxq5DIjzzLybCPPMfJcI88z8nwjLzDyQiMvMvJiIy8x8lIj9lvz9jvurzBivz9uv+1tv5ttv0ltv/dsv6Vsv1NsvwFsv69rv11rvwtrv7lqv2dqvxVqv8Npv3Fpvx9pv81ov3tovylov9dnv4VnvzNnv+Fmv49mvz1mv+tlv5llv0dlv/Vkv6NUN2K//2O/rWO/W2O/CWO/t2K/ZWK/E2K/wWG/b2G/HWG/y2C/eWC/J2DP6rfn4Nsz5u357fZsdHvuuD3T256Xbc+ituc82zOU7fnE9uxfe66uPbPWngdrz1q155i+3og9f9OebWnPjbRnMtrzDu1ZgvacPnsGnj1fzp7dZs9Fs2eO2fO87FlZ9hwqe8aTPT/Jnk1kz/2xZ+rY82rsWTD2nBV7hok9H8SevWHPtbBnRtjzGOxZB/YcgT82Yt9/t++W2/e27TvR9n1j+y6vfU/WvoNq3++0707a9xLtO3/2fTr7rpp9D8y+Y2XfX7LvBtn3buwY1b4vYt/FsO852HcI7P58u/fd7iu3+6ztHma7D9fuS/2REbtv0e7js/va7D4vu+/J7gOy+2LsPhG7b8LuI7DP1e1zZvvc1T6HtM/l7HMq+9zGPsew6/p2nduu+9p1ULsuaNfJ7LqRXUex6wp2nm3nnXYeZucldpze98gwILD7jK07O2i5RhNhgz3sb/fl2n2qdt+m3cdo9/XZfW5235fdB2X3Bdl9MnbfiN1HYfcV2Ofs9rmzfQ5rn0va53T2uZV9jmOfa9h1frvubdeB7bqoXSe062bLjZxo5CQjdt5t56F2XmbnKXbv+xlGzjSywshKI2cF010/uz668X/RT5507LVfftsFPNziCL+zQ/wGG/8XnvDI/+HG777G/0RD/6rG72R3LjXMcLXxi8lSZTiY6pT5Z4YZpgP8NOEPuMF/eK+yda+qT8UPQO9o43eC2ZLikF8f83t1w292w5+uNzauhwHPRb5zTtp2WyDw72Nps+68ugvd6UnCP7+BH0zBTmWK+Uy6mE+nK9VkuZIv1EqZQjIzkcuUJidSyUwuXawUyplkspqpTmaTlXwpV6mWS7lMbaJcyhP2BSJ2pjphoHLlfHEiVSvna8mJbKGYKdcKhUq5UjLrNLlkJTWZT02mU7VisZzLlSdzpVSqVi3lasUm9oVO7PJIXbHuKU7wMznCf6oT/PQE4T+tLtm+I5fCG4T9dMZd8R2cJv4z3OA3+4lnusFvlp2LnORti//F9aDbvJ3mCPsSN9wzhH+pE/xUk/9lbvhnCf9ZDD/hwD7PdoPfLDvPcYPfLPvPdWP/GuE/r4EfxMdOtQMn7OcL2KliJp0uZOxzgWIlmcpWJtNF0ytOZJOTyfJkulrKpkq1bDqbmaxMTphnCOVULVkrT5ZqxanYL3Bil0yzXL6w7iJfM83+9kWCbZLduWZf+OJw7IM2P2G/RMBOlzOTyVItWc4Vy4WqeRiUNIOcQnWiWK3l0+UJM6BJV1KpVDVr/qSrlWxpopJPTeTNE6TchFHXzNOX1l3kaao5NnuZMn6+nCxV8/kC4b9cGX9iIl8oG3sS/iuU8TOT+WotU2i2NWVl/HIuW6vlMmXCn1DGz6WS1Vy60Cybk8r4pYlkLl8sNstPRRnfjMczlVK5OcasattnopqcrKRKNNerNfBJh3Wk+3Jl3Q1XSoC+IJg6lw1A/whw1R7zJUAf58PtQ/NGst0r69O5jgt+vI1Bv37hHumRsF6uiPUKRayyItaEItakIlZFEYvqtdu6lm32o690gp8pEv4VTvCTVcK/0gV+qjV2vIrhB3r8m/irGX7CAf4aN/Zv4l/txj7NOdPaBr4L7Gvc2KY5BrvWDX5zXnCdG/zmGHWdG/xm27DeDX6J8K93g98co97gBr85xrvRDX5zjHqTG/zmM5sNTvBTTftsZPh6bWe62bZtcoKfaeJvdoPfbN+2OMHPNvFvdoPfXFfZ6ga/2T7X3eA32+dtbvCbY5/tTvBzzTnyDif4+Wb52ekGv7meu8sNfrN87naD3yyft7jBb5bPPW7wm+OHW93gN8cPe93gN8cPt7nBb/Zf+9zgN/v3293gN/v3O9zgN9u3/W7wm+3bnU7wC83+/S43+M012ANu8Jvt591u8Jvt5z1u8Jvt571u8Jvt531u8Jvt2/1u8Jvt2wNu8Jvt24Nu8Jvtz0MN/ODgsTN4w+4ZtPucFi14BE/aH6Y41krS3quBVlKmrLfb60F2X3EeVYmz3s71jwBXF+vtXB/xQfvw9XbrNyRwHRf8MA+HBD1Dgp5xwQ/Hft1g3aWIdYsi1n5FLM003q6ItVcR6w5FrD2KWBsVsTRtr1mHDvQo1g5FLM0yoWl7zfK1SxFLs25rlomdiliabfS9ili92j/SmNrt2CqZHxV0kyO/WUw3H1Oh64ffnLcdqy5Z0MLFcOTmBq1nyus2XD158dr11XVBRATrzq/L93vNeAnwmx0jDUHQ3rDnxjAsDuA5t1HA5HETApa02QULM7f5QAgHjkF5hQPhVY3fya5cKhMnHVz/TE0ipEZCmkSQfWa5sU86AficzyzBPliGMe8SQasiDzIsHn4WSyMPz68pPr/33cb/8WB6PaKN7wnBr1+4R/a13L8BaeN5g+XUTT5kU3HLKekfCVzWm1Y5lcqF1JkNB9PzWXNDUJx8ldq2YcGPsGiDHi+nPPxslkYenl9TfH7vZ43/48H0Mo3ldFhID7/Hy+mPG9fDIelZ1fid7MoVClI/hfWA20lzg3PcekD6RwKX5a5VD6R8ktoTst2IwHVc8MNFnxFBz4igZ1zww4FoN1j7FbF2KmLtVsQ60KNYexWx7lDE2qOItVERa58ilma570V7RfWDnWJZp1lW71bEulURS7OsaqZxhyJWr9btBxSxNili0cNDHGcSfhC0xkrY369q/E525R6Zu3F9lA5+j+sfAa66fFpjJcmu0piW7DPHjX2afOYIfOYI9qG8nCv4ERattfA5Aw8/h6WRh+fXFJ/fowngOGBah3OGuUJ6+D0+Z1iZmJo2njdYTl3mA9dHvPk9rn8kcFlvkpHlQqr/w8H0fFa0TzJOvnK+lJejgh9hHdX4zcspDz+XpZGH59cUn997IpRTXqaxnI4K6eH3eDktQTnleYPl1Ek+pGqxyynpHwlc1ptWOZXKxRzBjsPB9HxWtE8yTr5yvpSXRwl+hDXW+M3LKQ8/ytLIw/Nris/vXQTllJdpfKnpKCE9/B4vp09p4A6HpGdV43eyK5fLSnmph19IjQrpxHrGba1XrjOx6xnpHwmmlwsX9WwM+ISVA7LduMB1XPDDMjIu6BkX9IwLfjiv6QZrtyLWRkWsnYpY+xSxdihi7VXEul0RS7NM7FLE2q6IdUAJS2qfu+F1lxIv6+5WxNKs2w8oYmm2hZr18Q5FLM18fFARS7NMaNpeq24HymnULBP7FbF6tZ3Q5HU4jJmO9GmHzvaa9fEWRSzNNN7Xo7w0xxOaacTnA3xumWj8Hw6m1z3FeXY1AfooHfwe1z8CXHX5tObZkl3HBLuS7eYJXMcFP5xnzxP0zBP0jAt+2Gd0g7VbEWujIpZmGvcqYt2hiHW3Ipam7R9QxDqSj51hPaiIpVkmdili7VfE0my/Dihiadpes6xq2r5X2y/NsqpZvm5XxNLMR83ypVmHNMvXXYpYOxSxNNPYq2M5zTRqjid6NR97dSx3nyJWr45zNMeYR8YTj446pNlOaPLSKl/2GtdVu+F1T10PS9P2mmMA6mtxvxvhW+d2DS0de48trqE52YPVZg1N2ls3HEwvh4r2ScXJZ86X8nK+4EdYjdeap+wJ4+HnsTTy8Pya4vN7T2oYZRwwrcM9YfOF9PB7ZF+7J+yxjR/DIelZ1fid7M4VcT2UdHDd3E6K5S7Wxw+4/pHAZblr1QMpn6T2hWy3QOA6HkwvO1geFgh6Fgh6jmD1FtazlbCi2jDyt25YiKfd3nJ9lA5+j+sfCZy2C6kou0rtJdlnoRv7NPcoLxT4LBTsQ3m5SPAjLPoILu+PePiFLI08PL+m+PxeFfqjRSws1oFFQnr4Pd4fvbxvatp43mA5dZMP8d/5IP0jgct60yqnUrmQ6v9wMD2fFe2TjJOvnC/l5dGCH2Ed0/jNyykPv4ilkYfn1xSf31sH5ZSXaSynRwvp4fd4OV3T+DEWhNfPOPWZ40rtNtqQx8P64CS/U9Vk3PpA+kcCl/WzVR8WxbQr2edoJ/ap1OKUH86X8vIYwY+w6APlvD7w8EezNPLw/Jri83s7oT7wuoP14RghPfwerw83Q7vN8wbLqZN8SCZrccsp6R8JXLaTrXIqlQup/xsOpuezIp9qnHzlfCkvFwt+hHVs4zcvpzz8MSyNPDy/pvj83gEop7xM47t6i4X08Hu8nO6D+S6mZ1Xjd7IrV01JeamHX04OC7bWw0+XhoX80sOfKBL+cW7w84S/xAl+sZm/S53g55r2Od4NfoXwT3BTfpr8lznBz2QIf7kT/GqT/4lO8LNN/JOc4E806+/JTvBLzfJ/ihv7NPP3VCf4tRzhn+bGPk3+p7vh32z/z2T4mmsRhL/SCX4yQ/ZYEbRcv5Am0k9jkTNY+ETIf8JCP9I1Aliuxn1S2jh/nPetYHy4DcKwVnSINSz4ucjTMyPSzfWPRnDFdFiHZ+AcrE2s26WItU0R6y4lLGls2w2vzYq8jlHiJY1/u8E6VhGrXwnLOvxYXze8jlPiZa+X9CjWUkWs4xWxTlDEWqaItVwR60QlLOvwI03d8DpJkdedirxOVuJlr09RxNLqO+z1qYpYpylina6EZR2unfYKFj1DdrvelS25Xe/KlN2ud2Urbte7chm3613Zgtv1ruwkjdWpPyQdvGzx/k1vXpGN/S4o6R8Brrp8WvO7E4AP2gf37ywTuI4LflhHlwl6lgl6xgU/3MvbDda9ilg7FLH2KWLtVcTapYi1URHrdkWs3YpYB3oUS7Os7lHE0rK91G/3SlnVrI93K2L1an28RxFLsw71qu1vVcTSbCc0+1rNNlrT9pr26tXypTk20cxHTdsfDu3EA0pY9hrnsN3w2qrI61glXppY1m2p6/E6TpGXlu2t266IpVkmcC29G6x+JSzrtMqEddsUsW5WxNIsX5q8tMpqL7eFcxV5aZZVzXzUbFd71V6aZRXXVnulbmu2Xw8qYmmOv25RxNJcU9Ack2vOFXYpYtH4ntaxlzK/ROO/22cAyYN+BrDUDZ/IZwBLBbtK+2EV+VTi5DPnS3m5XPAjrBMbv/nefh5+GUsjD8+vKT6/96ZGxo0DpnW4t3+5kB5+j+xr9/a/pn9q2njeYDl1kw/xvwFL+kcCp/UmFVUuThDsKJULijsu+OGYfrmgZ7mgR8p73PvWDdZ+RayddT2s3YpYB3oUa68i1h2KWHsUsTYqYt2piKVZhzTz8V5FrB2KWHcrYmnWbc3ypVmHNNvVw8H2tytiabbR1BZK71Epjj+S0ntOivjNdw5OjLAF1497cchf+k9Y6Ee6RgBLOW2pqLRFzd1OZHyWs+swrBM7xJLejXORp8uD8HRz/W7fBcyl3b4LmMu7fRcwW6MyfzKzZwJsd6qTvCzGPkuF9I8AV1d16lTgg/bB+dBpAtdxwQ/37p0m6DlN0DMu+GG/3Q3WvYpYOxSx9ili7VXE2qWItVER605FrLsUsTRt36tl9W5FrN2KWJrlS7PN2a+IdTjY/nZFLM00HuhRLM26vUcRS8v29hr35fZKWe3VMYAm1pF++0i/7UvfcaTfPtJvH+m3H52279Wyeo8ilqa9NNscTdvfqoilWYc0++1ebaN7dTyhmUbNsa9mPmra/nBoJx5QwkoE0/fndIO1XBFLa53cXp+ohGUd7j3uhtdcRV5blXhZt10Ra5sSlr0+KdDDerTb3l7juxPdYB2riHWcEpZ1mvY6RYmXZlm1TrMO9Wq579U0PtrbQk1e1j3a7XW49Nt1JSx7rbnnQcte9nqJIq+bFXlp9bXWaZUJbXv1Yt9h3YOKWJpzvlsUsTSf6WiuA2iuT+xSxML32/jesETjv3RevNWzqvE72Z2rJEAfpYPf4/pHgKsyn1SUXU8V7Cqdd6/IZzIB+JzP6YJ9KC/PFPwIi87J5O+38fCE2wfh+TXFn3Jv8JF/44BpHb7fJp2Vzu+RfYeM/G7gkWvck0h41rnNh3Ts99tI/0jgtN6kosqFVP+lckFxpfzCfj9ufklYexWxDihi7VTE2q+Ida8i1m5FrLt6lNcuRayNilgPKGJtUsR6UBFL0153KGJp1se7FbE0y71mW6iZj7coYmm2OZpl4nZFLE3b7+hRXncqYmmWCc2xiWa/rZmPvdp+aZYvzfrYq220JpZm+dqjiEW2p/kKn98kGv+HIV4iUJ3rZROgj9LB73H9I8BVl09rrifZ9XTBrp18X4y40jX343pm+jte1u1XxNqpiLVbEetAj2LtVcS6QxFrjyLWRkUsrW8jWbdDEUuzPt6tiKVZvjTttU8RS7N8adYhzXZVs0xotqu9Wrc166NmHbpXEUuzPh4O5et2RSzNMQD1tWMNPz7e5ueRcD+uJ2rMz+NTuFEhXqLxfxj4JQLNMXYp9nkdpH9EsImLMf+KmHYl260UuI4Lfrh3ZaWgZ6WgZ1zww76pG6x7FbF2KGLtU8Taq4i1SxFroyLWnYpYdyliadq+V8vq3YpYuxWxNMuXZpuzXxHrcLD97YpYmmk80KNYmnV7jyKWlu3tNZ7X0StltVfHAJpYvdpva9pecwyg2UZrjid6tawe6bcPXZ92ZEzeGdaRMfmhK19HxoWHrnz14rjQOk179WpZvUcRS9Nemm2Opu1vVcTSrEOafUevttG92qdpplFz7KuZj5q2PxzaiQeUsBLB9D1O3fDaoshruRIvez1XEUvz+ZCmvZYo8tquxMu6bUpY9vqkQA9Lq0xYh+8294LtNeu2dn3UqkP2+kQlLOs06+PhUL7wvKFusI5VxDpOCcs6TXudosRLsy20TrON7tVy36tpfLT3tZq8rDsyNvG/77CuroSlOZ6wTste9lpzTH6zIi+tvtY6zf5R01692HdY96Ailuaawi2KWJrPrTTXmTTXv3YpYuF5Q3OZX6Lxn/b58rbO6lnV+J3syqVinzdE+keC6X2VHp/WPt+jg+l2nSvYlWx3jMB1XPDDufExgp5jBD3jgh8+8+0Ga78i1k5FrN2KWAd6FGuvItYdilh7FLE2KmLdqYilWYc08/FeRawdilh3K2Jp1m3N8qXJSzMfNXlpthOaZUIzH29XxNJs7/Gb5zgmWNX4nezK5XI0NuFjGRpTDQfy2ERHd6qYAH1BII/rSP8IcNXl0xrXSfnG7YPjusUC13HBD/NwsaBnsaBnXPDDutkN1m2KWJq89ith2etZgQ6Wdho3KmLdroh1QBFrjyKWpr3uVsS6XxHrTkWs3YpYmrbfq4i1SxFLM40PKGJtUsSidT4cW1i3qvHfdIeZYj6TLubT6Uo1Wa7kC7VSppDMTOQypcmJVDKTSxcrhXImmaxmqpPZZCVfylWq5VIuU5solwpuxw650nAg9686+KkU4R/rBj9N+Me5wc8Q/hI3+FnCX+4GP0f4J7rBzxP+SW7wC27PPkgVCX+lG/xm/TrLDX6Z8M92g18h/HPc4FcJ/1w3+DXCTzrBTycJP+UGv9l+pt3gN9vPjBv8ZvuZdYPfbD9zbvCb7WfeDX6z/Sy4wW+2n0U3+M32s+QGv9l+PsYNfrP9fKwb/Gb7+Tg3+M328/Fu8Jvt5xOc4Gea7ecT3eA3289VbvCb7eeT3OA3288nu8Fvtj/nucFvtj/nu8Fvtg8XuMFvtg8XusGfIPynuMGfJPynusFvtm9Pc4PfbN+e7ga/2b49wwl+ttn+PNMNfrP9ucgNfrP9udgNfnP8dokb/Ob47VI3+M328zI3+M3281lu8Jvjt2e7wW+2z89xg99sn5/rBr/ZPj/PDX6zfX6+G/xm+/wCN/jN9vmFbvCb7fOLnODnmuPPF7vBb7b/L3GD32z/X+oGv9n+v8wNfrP9f7kb/Gb7/wo3+M32v+wGv9n+T7jBb7b/k0HLtbAz1QnzqCJXzhcnUrVyvpacyBaKmXKtUKiUK6VstZBLVlKT+dRkOlUrFsu5XHkyV0qlatVSrlZscq+I2N241nOFqgu7pGrNdqHG8BNq/ItN/Mud4Ceb9eqVTspNi/8VTuxfabb7VwbKZSeVTNrvau5tbGSg852vYukYhDxZ3fhN3wy1bk29FeYq5s/Df3Xkkf9W3x0NfaPMVgHTYx2lecCFTc2ziAToCwJ5nxDpHwGuunxa+4QGgA/aB/cJDQpcx8HPOnxuPCjoGRT0SFgPKmJtVMS6UxFrtyLWHYpYuxSx9ipiaaZxjyJWr5avHYpYdyli3a2IpVm+NO21TxFLs3xp1qH9iliaZUKzXaX9hMPB9L5Qr2/OZ6mv5WN3cuRXDaami/vVWPgL6q1w6PrhN0/TbCNPXNDCxXDIh4+bqgw/bMxgHdlxiPlrjnEIf9gNfoZsPzuYalNM03CIrchf+k9Y6Ee6RoLpdncxPpTSxvljfZnN+HAbhGHN7hBrWPBzkadDEenm+kcjuErpwPmN1B5J428KPxzBi4cfE3RTXLLhCPNTtGE6yoa8LpL+uYxnpTpx/eXPXHt5AK4f7EB2WwzhLqq37IBlcHYIVgC/F8O9fobHnds546HtByhNnfYD3LZV8DvYds86bBvQ5tbZvP4FrC30C2nCMhS2ttDP/Hn4X81q6fu3xvUcpnNuhM5R4M3DW3dRfWr4o1ja+oUwc4Ejhf9Ng5fNv0sa+SfZjvgMQ/xHU1mmNHValnk+IjfCpLKDeRuWL32zW1yetaDFGfWNRqSDfk8K+oj7OIS1jvJ4HruvuMYV+1tmpH8EuCr3Q80xzDzgg/ahtsXacE7jevXacuW88jXrrl9d7QNTjrFrDj8OcBSGh+VunFEKQsJhtlt3aX16PHRkyrFgerUeB10cv1+4h03vuMCNijnZ5oxGMbfN1ljjejSQi7F1w8F02yoWhcm4RZP0jwQum8NW0RwDPmG2J/s4qioTiWB6tegXdBJfyst5gh9hzW/85k0kD8/rCw/Pryk+v3d8ozyNB9Or98X1qRykqs/vkX1tOT2mgTsmpOcoSJuUb2MC7rgQH23I6/FV9al+g0LayG8owm92hN+wkC7yG2Hx1kC8OQKm5bB+dgsvzDa8XNHwRWqbwtrWMKwLAYvHnwdY89tgXQJYPP58wFrQBusywOLxFwDWwjZY1wAWj78QsBa1wboWsHj8RYB1dBus6wCLx8cj445pg7UOsHj8YwBrcRus9YDF4+ORqse2wboesHh8PObtuDZYNwAWj49Hqi5pg3UjYPH4eMzb0jZYNwEWj78UsI5vg3UFYPH4FHdUwMJxwAns/qEYB5D+EeDqahxwQjDdrtw++Bh2mcB1XPDDdmuZoGeZoEfCWqCItVARa5Ei1tGKWMcoYi1WxDpWEes4RawliljYbrXrr59bf+R/VH9N8XjZ5eH6WRipj+YYYeMBPmfj94+PkR5+D21zfIi+MH7cNjTfjBp/jEE8ifN4Gz1RnCmcNGa+uj7Vjy+x4/iWLwfjOJwvlc8Dv2EhXThm5vmKY2ZuNz5mHoT03Ni473Y5Lpnk5S/MVrguIf0PgnjLtdKSu2s9fTOkB9NzlKIejnVBfaqemV/iS1bjpIPrd73ER7ZYEGGLhU50Z2Mvdy4EWyxwZAsqi+3mbfhIUZqbSX0JXx69vLrePKR78obnlC+fxYLyZhXpjEK4efB7fgitVRBuIfym4R/y4FjcIY+o5VdJv9SM0PWgcN86aVqLy7BStkkntknLsEdH6FnQpZ4Fgh63J+MkHZ9c03rKLy0l8DSR/qgTBuM2A6Rrpk4AlNIWlc/SCYBRWHFPrSMst6cdtfI06uRDrr/Tkw/502Lezh3XGBvaYd2b4VGH1Fa43T2Wycctj6R/pnaax93pIg3VKe44+FmHX7qQdp0MCXokrP2KWPcoYt2hiLVLEWujIpZmGjXzUTONOxWxNNN4uyLWnYpY+xSxditi3a2ItVcRS7NMaNZHzTqkWSY07bVHEeuAIpam7W9RxNK0/V2KWJr20mwLdyhiadqrV9tCTXtptjmHw5hJs0xo9ttatrfXeBp7r5R7TdvfqoilWe4106jZTmiOATTt9YAiVpy3saV5PYWX3mCR1qUOlzdYchBO4w2WHNzrD+Q3WCz2L+B0BHz7xTq367GZdAL0YRoD0D8CXJXzv7lmJW0Pk9Y9yXbHCVzHBT/8UrW0dew4Qc+44If9djdYtyti3amItU8Ra7ci1t2KWHsVsTTLxB2KWBsVsTTLhKa99ihiadrrFkUsTXvdo4ilWVZ3KWIdDvl4lyKWpr00+6Edilia9urVfkjTXprtvWb50mxzNOujZpnQHDNp2d5e4xpMr5R7TdvfqoilWe4106jZTvTq+OsBRSxag5FeJcJXGKQ57LERenj8Y2NgSfNhCi+9ehS11iO9ekRrD45ewUlH5Yf0+tLBrPWQ3VIQDtd6eNu2JAQrgN8puBe21oP7lm5vLGSRfR3tRxO3muN+Rb5nFPdFdvqqLY8/FqFnQZd6Fgh63Nqy81M08LWJGvPDVxx4IeanoKDrh988vbZePLeDEzZ4flRDMAeFsAnwo7CvG27xKDd4uN13OHN5cmG9FQ6dlCeUXmuLSpd5gvtfOW/pdek4r3FLr+GPC/HnReg5tUs9pwp6RoV4iZD/pAfvoR6Jc9R6+8Hq4VhUh92u3Xde/tHOvPzj3lx+QjeeosdP1+bPgdBJdYNsYevG22PUDbfPm2bOhvjKG7chr9voJBuSLeLacCyYbkOs22NCOqR6zzEOpt5LHHqtn1gAfjyPF4Ifz+NF4MfzGJ9XXcH8EuB3JfMbAj9+YjuehLia+Y2A3xrmx/MaXbv+7Fsd9Ge83MTpz6QjVAjX7StlmUycdp/rHwGuunxaz0GlV4SlkzvJdosEruPgZ93N9VY49OsX7vVFYO1VxDqgiLVTEWu/Ita9ili7FbHu6lFeuxSxNipiPaCItUkR60FFLE173aGIpVkf71bE0iz3mm2hZj7eooilmY+a7Zemve5UxNqhiKVpL806pDme0LTXPkWsI+3qoWtXtWxvr/E5aK+Ue03b36qIpVnuNdOo2U7sUcTq1fHqZkUsGq9SPD7H588sHZ9j0Pyq6HFu8JvnJEQ9y+X6cU5P/tJ/wkI/3Le9yE3aIvdtR5UDvjYe54jQYzvEOpTnmXBb43kmElcpHQsVbRLnCyjS2lKneRt1ZKvjOtbcU7Awwk5cfzfvj6QhHD0n7Aum593iEKwAfqfhXtiegrFgep4Oh/AkvXgPywqPPxihZ6RLPSMx9Yx3qWc8pp4FXepZEFPPkfyZqudQ5g+1w/zMInpua5+53DAi6+RH6vOzmnDPBIV/D/sa7oaR8DT2Q/p5O0FHEbr9Alfnz8nQljUhPQkBS3rGRGnq9Esx/B09/FIMYYZ9KWaI+fPwu0daXD69RMZMMEz+riJ+RYjq7FDQSjcPgxwo/F7Ggb4ihJgDIemaHYL5elYWbx+RMQMBU0rXCKQLOQwDBwp/F0vXZ9lZ6zwM/eblZG19Krc5gq4g5B62aXNC/KL0totrr/lXhNAPywrai8cPsymWFQr/UERZGRI48PRiviIHDDMSwuG1Agd+bOXk2ms2NL7qE4DDj5MNwm/MSsyCIQEnzJEZbJzXj8g4PBw5LH68K54t6BgJ4cjjWvNQ9laqq6vrqyEG6gOwwRBlfYHs3H7t002/Ie2v4G0vOqlPofTaeJ9f0sLFcOT4O9lHxlUHN65CLGm8ZN3l9ZY/D/8J1o58fYmM2ReCSZ+RierTpL1JFF6aM0aNuXl5xHm6pJvbEtvdRR1ybbfeMAxcpbloXK4XzjDXwQ65jgi6ed9jGtcrbqhed/Ha9c1TtAOBRgDX2O9gGOwvZodQnQvhxuA3HquMzft8+D1H4Cc55Cxx6Q/aO6qiZKsvsSr6zZAqGgRyFaVij9MvHpdPv6hIXC+EI503QHp4eK6Twt/I9EhDnOsh3RT+68IQZ1zgRHyGIb5ut1sokg1vCqY78tsQTE0799vIwp9fb4VDJ3WtlCZri3M7mK7xfERuhMm7DJ63YfnyNyxf8MOeXN8NQXg66He/oA9tSf7WUR5vBIxVjd/JrlyunAB9QRCIy/ykfySYblsXy/wbgQ/aR2qGIz7seRO75vAvBDgKw8Ny90JGKQgJJ2X7MUI8dGTKQeD8Bzar/hk0W7zq4/eIOYd+4R6OtgYE/pKeoS71DMXU43N6cDe1dfgByNVCWnE3tXX4scarmR9+AHJtMD1d5HdNBOa1EZjXRfitC1oO/dYLfpbTpsYYgezNuxepquNHJXnehdXrMKwLAYvH3whYm9pg4UclefxNgLW5DdZlgMXjbwasLW2w8KOSPP4WwLq5Dda1gMXj3wxYW9tg4UclefytgFVvg4UfleTx64C1rQ3WesDi8bcB1vY2WPhRSR5/O2DtaIOFH5Xk8XcA1s42WPhRSR5/J2DtaoOFH5Xk8XcB1u42WPhRSR5/N2Dd0gYLP/TG498CWHvaYOGH0Xj8PYB1awSWvca3nXj8WwFrbxusYwGLx6e4owJWovGfhpO3sft6w7dU7LdcSP8IcNXl0xpO3hZMtyu3D77lsk/gOi748b6I+3E9+wQ9EtZNilgbFbE2KWJtVsTaooh1syLWVkWsuiLWNkWs7YpYOxSxdipi7VLE2q2IdYsi1h5FLOzLosb19pp2SEWN6ykeb89wuasf4vDwHCNs3tAfyPOBvTHSw++hbfaG6Avjx21DD667nafY6+WAdbDzFHt9ImAd7DzFXp8EWAc7T7HXKwDrYOcp9nolYB3sPMVenwVY3cxTNtSnYvH42La3m6e8FLB4/E7mKfb67GAq1sHOU+z1OYB1sPMUe30uYB3sPMVeJwHrYOcp9joFWAc7T7HXacDqZp6SAayoecptbbCygMXj3wZY+9pg5QCLx98HWLe3wcoDFo9/O2Dd0QarAFg8/h2Atb8NVhGwePz9gHVnG6wSYPH4dwLWXW2wHgNYPP5dgHUgAsu6p9anYvH4BwDr7jZY5wEWj383YN0TRKfxscFULB7/HsC6tw3W4wCLx78XsO5rg/V4wOLx7wOs+9tgPQGwePz7AeuBNlhPBCwe/wHAerAN1irA4vEfBKyH2mA9CbB4/IcA61URWNa9oD4Vi8d/FWC9ug3WUwCLx381YL0miE7jk4OpWDz+awDrtW2wzgMsHv+1gPW6CCzrXlmfisXjvw6wXt+G1/nAi8d/PWC9oQ3WBYDF478BsN7YButCwOLx3whYb2qD9RTA4vHfBFhvboP1VMDi8d8MWG9pg/U0wOLx3wJYb22D9XTA4vHfClhvi8Cy7vL6VCwe/22A9fY2vJ4BvHj8twPWO9pgPROwePx3ANY722BdBFg8/jsB611tsC4GLB7/XYD17jZYlwAWj/9uwHpPG6xLAYvHfw9gvbcN1mWAxeO/F7De1wbrWYDF478PsN7fBuvZgMXjvx+wPtAG6zmAxeN/ALA+2AbruYDF438QsD7UBut5gMXjfwiwPtwG6/mAxeN/GLA+0gbrBYDF438EsD7aBuuFgMXjfxSwPtYG60WAxeN/DLA+3gbrxYDF438csD7RBuslgMXjfwKwPtkG66WAxeN/ErA+1QbrZYDF41PcUQEr0fhPz7k+ze7rPVfKphKgj9LB73H9I8BVl0/rOdeng+l25fbB51yfEbiOC3645vgZQc9nBD0S1iZFrM2KWFsUsW5WxNqqiFVXxNqmiLVdEWuHItZORaxdili7FbFuUcTao4h1qyLWbYpY+xSxblfEukMRa78i1p2KWHcpYh1QxLpbEeseRax7FbHuU8S6XxHrAUWsBxWxHlLEepUi1qsVsV6jiPVaRazXKWK9XhHrDYpYb1TEepMi1psVsd6iiPVWRay3KWK9XRHrHYpY71TEepci1rsVsd6jiPVeRaz3KWK9XxHrA4pYH1TE+pAi1ocVsT6iiPVRRayPKWJ9XBHrE4pYuObYbp/cyxvXUfvkKB5fd8JXM/shDg/PMcL24fUH8v66T8VID7+HtvlUiL4wftw2r2hca+z7KwNWN/v+JgCLx+90398xgCXt+xsT4uE+0Q0ReqyL2ie6IULPp7rU8ylBj/Se4tX1qX6rg+lplb76gu8+Xs38bgK/tUK68D1FXkfwPUVeBvE9RV6m8D1FXkbwPUWe5/w9RXofl2x0c+P+MKSN6u6qxu9kl076uiLakedbIuR/EEx/NmEdlg/+5Z/EDOnpmyE9mJ6bFPVwrPPrj/yX6i8e39Fp/eXxN4Rg0dEG1vEvPa5h/jz8nY2ybLG/DUdtSHvUV7N7F0WkleJSHcH+bVXjd7I7lyL8LW7wM1H9I08Ttincdp2UL65rBLC0bReVNs4fyyHvr+OMIzZ3iDUs+LnI000R6Zb6EImrlI6wusn1RJ2CvCWCFw8fNX4iG/IxjKIN01E2lMZgB3MKMtltCYTDLytLY1HECuD3ErjXH0SfgszzdDiEJ+lt147z+DgO2wC8pP+kB++hHokz6eHnWfBTad8LZzNQueNH5vD3qBYzfx6+f0EL8wMNTOk9r7C6kmD6+FkYeNQS6Qs7amlNCL+Psn4PT7RcI6R5cQRnwuTnjXDOdO4HcvgUjCMd9ZHiOJJ0jQFfzB9Mi5QnWO5uFOwQZlvr+DiFj2N4+M91OE7h5RvHKZwTxZXm/Hgao6Qnqp8cEfR0Oz6Q9Eicce5mHa/nX4F6TuWBl3kel85DGITwv5rfwvxaRD3H/UM4psG2D+s56Qur51huKPw3Iuq5NGa+tB7OmTB5PeecsZ5T+O9APXc0rhHrOemS+jGs5532Y1I7LumZ06WeOYIe1/3lHNCzSVEPx8JzmMLq60+hvlK+SvUV+20e/tOsvv4T1Fde3qPyE/uOTYJerDNBEG+NMurdZGyjrIvqO5ptVETfETUHsC5qjhu1JszD8TBR66b9ETp4eeL3aczK+7Q1EHYzhN0UETZsPmev6fRlt3PuQpXqAl/7JUd+WwXO5Fdn4Z9fb4VD1w+/eZpsWflejBOdpbnh1hBMtKl1ePo7pblPwN0CuLwNQHvReWtY/+c1EmPr/9CojIflxLoXNfDczisLNcxf7jB/0T7opPwl3jZ/h5e2cDEc6uR5WAc/3mbjGX+8jyQMa/slDaW9WpcOpr50Yk+pvkj2xGcR3J6Ewe05CBhPYOX9eCjvFAb7C+uo/lCdJfsNCPGtw7EfhT+xodPa57lLZf1R9S0I5HaB2wHPGt0ayFykNFPYx0J5rLM4euUxm6J83Aacue7tjnTHGa9x/aMCH+I9IvgNdME1lyoU0vlsJVebyBdzuWoC8Ikr3sO1wx1C+DEhPNl6pxNbZypU1frrLfwdzK7WDTC/7eA3yPyIo61DL1g6lf8OR/zj2J/rHxfCX1hvheskL8cFPThX6wZr00FizQ+m1gGpL+RjG+wL+fiFnwf7opB2OU5bR20btvs8ndgOPh/aOt7/KZahrDQexbZumyPdcds60j8ahOftiODXTVtXyWVT2VopN1GpZaqVQi0RTO8T+oV72NZJ5fYoIbzjtiIptXXYng0wv23gx9s64ii1dW76xUwyjv25/nEhPLZ1cfNyXNCDbV03WJsOEovaujqLj+NU3tbhOHWLkB7e1uG87KXQJrn5pIO8RohtKudrHZ9Db2F2QvsiDr/Hx808Dq7ZUPgqG7dPjMr8KA0XC/ykvUs8XZePhofbIoSzS0g0jrq8uv7ZryxfV608uzp5XXV9fyDTwyRi8nE6FUA46/DLZdfB7zXwezXgUBcc98tl9J9jSVnHsbHrvYpNeSahCVsDulY1/ie7dNLUEbtaN4/X0rGnFaR/JJhe5Fxs65CWNrl9sHt081ginbQfbsJHBtZdWZ9uG+RB5UV6dMfth3UhzmPK1YKe0UCuV9J/0oP3UI/EmX5HNbVhTeNtrGncPNoKj21NnC1bcR7F83s8fA38+CO6RAQ+LrdsZ+3FZ2HJlQ+pKB3Nj5MyP836bHnU2FIWlls+XAurZ9LnQih81FYy6+iRRtTWIqls8bJEZUTK56g65eLRv6RntEs9o4Ie13V3FPSEPaq7P6ROhj2qSzJ/Hv497FHdQ5CfYW3Xw+mqt/xmqM6kO60zUjsVVWfavbpBNpQesb6wPtVPKu9oV+tq9akcVgscpP50XIhP4eKMUzg/vTxKxR6nkP6ZGqesiWlXss8GN/ZJRpXNDYJ9cGsA5h1vu3ndl6Y/0uM+3k/gdPHDjcoetaUgqu5Ij+Af3v4H0yLX4yCsW/2MY4ph0eeRXG/74O0l5odi2c9SurdEpBv1W+GPgaTtthge5zyIj69IUXz+4XepbGF5/CIbk35+VMYMgugxKdpkKJD7S3zsTeH/VBhHSnnMHxt+EfpVbkvcarRZsMPDW+li9PfSY3zs76/lW+mAl9T+SOMqHMN3Oq6S9CBW3C2CFP6vWb7gB5fbfRYtztZ4blviI9kmbBsG1Q3rqJ3BuhNWLnnduAzST+F/wNJ/CXw9lNe/sO1AYa809gfR5SsBgkt3VsYF/dJjESurGr+TXTpsywaYjq0CH3x88zOob9uCqTZt1ybWBb3bWJhx0FsHvTYfNy+diknc5gTT65mUJ2tAB/K8HPwp/L+wdvbn0FeHben/j1FZ90ggl8OwesK58nq4sT7Vn8L/itlra8jcgPORuEp1lH+EvdM6eglwpfC/jaijUWVJGtPhVh6pjiLvBNyPWy4o/P+xcvH7iDEcLxejR03lgFsK27UPOHZY1fid7NJhXvJ6KrWXmJezIF31xv1+Ia1Snm4V9NZZGGwftoJeqX3gr/QRj1cyzLByPChwtg7rHIWfwzhgnVsjpFkqB1IfG/VKB39lWgqPaaHw8xjXqHU/Gg+4XcNIiet+vO4M1qemW/pMsDS2QjsFIXaisct40L5N5tu4pPkSHcePz2ZOa9j84S1zR01Na9SahKPHkaUE6CPb8Htc/0ytSXSatxsE/rT+I4WX6pi05mGfneAaLm+TSS9/NXwL3JPWKXA9KmxuswLaBmkNjJc7msuhTutqdVknx+U6pbVObCc7WZNrZwOp/Mcpn5KeqGdLNyrqkbbDRs0Zw8or3otau+HtMbZNLtZIbmY848x3trI0xBnfSq+cStuTse4OhNgO10go/BrW9j4e6lVUGq3j81LkJM1dcR2g4TWlj94g4OOc58msj273+hxPh3W4HkDhL2CYuB5QZ/HjtLvbhPB1Fob4SHViG8TbxvwwzyVsHr4/BKcOOJjOsLE2YUhb16ysavxOdukIj7Z28THvDoHPIIR/NpTjXcFUm0bZzMpOQS8/JhvH2jtBrzTWJm58Ls7zvQ4c8Lk08sQ5F4V/IavPz4exFO/feX/68qNk3XxesD2C6zaBa53pwnkBhX9pxLxAWvPkXKUxOdXJQzEm5+3WYH2qferML8564jYhfJ2FofZD2lq4Bfx4nx/nCJA4fcxQSHgssxT+KmFOFfW6rsVfA+Mtrgf3A9zI0hDVT2Fe8bhW57VHybi8L+E2u6I+Nb0UfoKtma+HOhi2HnZDSB2Ujriw7kLQTeGPY7o3gA2lZ0pRz+4Tgl+c8eyamHo2hOgJYuqR0qM5bpbW6+cD506fZfD4M7VHZD7o2SzocTxujj2nJv0jwfR672JOHXUsJLcrhZfWSzZFhJeOd5SOnuJzat6GB6CXz6m3wj2pnuM6YqdzrKh9XtLzz3bt3H0dtnPr6i1/Hv5f57UwH4R2rtf2lS3oUs8CQY/rNmMBpGdDRHo6LVM8/kwdnbEA9ITtk3tXyPOHTo+g+QtWPt97kOUz6riLmTomxcUazeGQnkdzHfmCUh35DKsjfwZ1RNqPFnXcycHaOa6eR0N+blbUI63Ntys33wp5phe33FD4t7By890Y5UayTdhRmVzvTJW3KKyosaW0TylqXTLqGSoPT/nIx7pUFty+nhx/PzDpHwGuunxa84R6MN12Nwu2mxu01qbK1XWpdPH86uR1G65Zj5lBgOPBVCNvBUAKH8BvjGdJDUCYDYIO6/h5crwgjUN8nIggfhxO7cK285cq4c0h6QyCeJWQxw+rhGHneeE5Js0JCVvkinOeFy88nZznFdaA9AtpGAmJh7aXzjC7KCLNFP4/I9K8uU2aL4Q0h52Xy39jOGnzzOxAXmCPehC5MJjKvdPyxOPPVOe+EPSEdbqJsVYcboewF3+uYP48/AHW6Q40MDs9ow/P4evUzpIe13bGs1g3R6Sn03PGpXO9o/LpChYmbHPWgIBpHb4YTeEXNPLS8dnc4jv+pAvLME+fLW+LlMrwTlaGF0MZlha6ZmpBrZO6kggOvq7MVHqisKT6kADOPLzXA9pUNRmnDeL6vR/Q/jAx1chxB7QYL2pAi2GxMaSC1O2AVuIUFrbTAS1fScIBbacrxDw+fwrOK4RuQUpPezORP33llQlX9jayNEgDtbBV+UQIPjaU/HAXyXa4E4rC5xodgh1Abm883ZfyalEIvyCIl1c8/kyt5i8CPS52+1mHb3m2KxtJ4BU2iH0SDACkD0BIT5bx4wZZNgA4HwYA0ipx1FOjOKdVSDt2pQ5KGniG7XJoV67RRgMCpnVhH4B4BQwI3ZxQk0seuqfRudidMh7cJL11MyL4dXXoZqGWSubzhUwtXS5Wc3nsu4gr3ovzpPp4IbzbFb2seOgmH/hbN8D8toDfIPPjT7zxIDo3A6ZsJY79uf5xIXzY28QSlnV9DrDo8LioN75wx5N1UR9so/CTrO+M8yGUDUJ6oj7Q0Q+/sS3Dtsq6VY3/7XK41sYFYLdZAhd8Q47CXsnssmvp1LRIh9RR29EfoSMQ7iWCcNuhjn4B72n1qX6bY3CTFuw4xo0hPC2GNOleCmnpdDFlqcDH5ZMvrrPd+GUDjF/aPfm6qd7y5+FPYuOXzTB+kXbj4DgsEchjB2xT+Jt40oIwtgMUfhsr7+0+YMXTiRw5ZtwPWFH43TB+cbSjTVzQIl0zdTIcYg0ErV3rvH18en2qrSj8JY1Jqc3nfWOdYT4jBPMTYy3M/R1iPjME850M80BEuT86mKqv0x2lPD6euoLz0FWN38nuXPNjoWvd4Dc/LHm1YAueJtIvtWWdtJlc10y9GSmlLSqf+UegsS5JWFd3iDUs+LnI0zUR6eb6RyO4SunAcYWk52jBJhT+mghePDzVYV72KS7ZkH9cW9GG6aj8vobpJP12IbTTj4WS3Y6BcPixUG77tSFYAfw+Bu71B/LHQm2b+SeNdl7ql+aGcCYO7folHh/Lv5s2szAhvclLDsd8yBFdP/zmvG1+L1nQwsVwHAPLMX5MMKrNDcOQ1j7b1Xvr+OI9PShet37tddVLr7vihvL66gU3VK9eL5Tf2ZA+LHd40vNaCMvXM3k4fDh7NfxeB7/XC3zQoU24GxXChbl29eN0dn0w9YPHj1pXXNalnmWCniis0wWsqPZ7mRD+cGm/T4ZwNLfrpv0+Ge6Ftd/Ihc+faBMNr2M4dv4+zIfcjElKmdFgeptGaSHd1zjSnQB9QSCPS0n/qMCHeI8Ift2s56aLmVSqaB4FV5PZZLmSjKpj/B7WyWuF8GcK4cnW6wInthY/LHIts6t1A8zvGvAbZH7EUVrPddNulGLZn+sfF8LjekncvJSwLjxILFrP5W0v1W23db3z8Re+nRl1oiV/bsHXntFJ4zZK78MftosxbsPnrpy323n5zNmQl1V0kg0pvZ3akJc1tKGbujxzNuR1FJ1kQ0qvtWGlAxvysoZr2LxtIt69Zt8E+PHnUBfUW+HQtbPhEzuwobQO3h9Mt9NqAQvnIZMCH0rn+mAqf55/1uFzLR5/PWDd2AYLN0vz+HHenONYlwBW1P6FTW2wLgOsqDdlNrfBugawok5D3NIG61rAijqZ6eY2WNcBVtjJt1a2tsFaB1g8Pp62UW+DtR6wePw6YG1rg3U9YPH42wBrexusGwCLx98eEo+3b9aNCveorrv98Fyq4w+ySvMFF2vckt2lcSHZbofAdVzw4/029+N6dgh6JKw1ilgbFbGuVcRar4h1oyLWBkWsTYpYmxWxtihi3ayItVURq66ItU0Ra60iFq0jS+ug14CeTtdBefw466BSGzo3aD0zeHjd/LzyNeuuX10NwPWza9LBf68L0T8uxA8isHicqLREfcGC2vmwL1jgng4Kf2FDMT+9a1iIrzjvKFEfxsey5MgP+wfux8etF9Sn+m0W0pwQ9EhzEkqvtcXn4XToQMCSni3wMnECpGEd6Md7WNZ5fAon6VnWpZ5lgp4orBMELAovzSmini1I+8gcfwmn+WxBmuNJ85KDebZAdlsC4fDZgjTXQ6wAfi+Be+2eLRCXsBeA8dkChb+2UbaHBa56+VHMRL234HafejH2swXSPyrwwZPCcT/kqoPkWiumk5OZWjWZy0xMTCYrUXWs05MkThbCu91TVxSfLfB1MOsGmN8m8BtkfvzEcXy24KbdKCbj2J/rHxfCY78dNy81sejZAm97qW67reu9+2yB70noZF2c95d4CAG34ansmvsRH7yH+X6qwHVUiJcI+U968B7qkTjjcxTr+P7n7eOtOLxc8f3PPO6N9ZY/Dz/O9j/vitizgXN0LKu8bFiH9YSfChunP6Twe9lYGfc/S+9W3FgP50w64r6/ReH3Q5/spl+U9z+TrqiT7tAeQdDKk6h346R38NymsTCJ7Q13UnuDe2j5GgPuPeBrBteCX5354breNuaXAD++JroO/Pj8eyP47WR+a8BvF/PjZRSd1GbyQ1m+1UGbKX2pB+eE3L7SPqTT2DX3I654D8sbj782JB62I473PKUc1+nmvmLpnS2eJhzrSuv0cfoXrmum1tGltEXt1eDrDLiOLGFt7BBrWPBzkafXRqRbahMkrlI6cF1QqmenCTah8JsiePHw0mFDM70eINlQaz2A7LYSwuFecV4GN4ZgBfB7JdwLWw+Q2tE1ITxJb7t2NO47Jny8+NlxWWfc9/0p/G/Z+02fZ9e4Jsexrgqm+l3F/G5qXDveX1WQ1jsCsN1NTDfOgTYI6YnbZ/M9VOce5B4qzo1j8vy7gYUJW3v+Szae/vQSGTMRyHMIHNNTmYj7TiOF/2bEmJ7CDISk6+oQzH9mZfHbIWU9EDCldF0D6UIOa4EDhf++sK4fBNPbX16GrFtbn8rtWkFXEHIP+5xrQ/yi9LaLa6+vZ9foh2UF7WWFnk+F2RTLCoX/SURZkd7liNpTihwwzDUhHP5R4GD7ozkN/8m112wIeZw1wK6xeZayErNgjYAT5sgMNnlUHRCHfkcVP2n7K497TQhHHpefcVWprq6uD3ve1wdgq0OU9QWyc/teVL4m7cEnJ+0jxH6D1+WrwO865sfbXnRSn0Lp7eS52d5Zj1zP1JgkzljDusvrLX8e/ves3uEX5NYyHhIm/3o0VqyotREK326+RvrJltK4P0q3tK+Rwm/qkKv0rIGPoa8FrlGHZLbjeuEMc13bIVdpHwNvq01jdMUN1esuXru+yqsH0gjgehjuYRjc5npNCNW5EA6XkfGIEewf8DW/6wR+kkPOEpf+oL3D84pHG8vHtop+M6SKBkH0dgppmzEfWn4WphbSI5So4hg1hJXOPeUYeGwIhV/E0o1NU9yP/lJ4abssXwLFJWBeDfDYJ/6Yjy/pWjfA/BSn8hXp433cBoP1+OmV7CNtAZaOZxyH8NxW0qMWXAblXRg/K3c7lD/pyLKotEVtIeLngPcLGFfUW/48/OkR5a8ucJDOm6Xw24TwdRYGl4S5fSmuVP74KxXWDTA/xfJXlcpfvZWkaeUvKr2SfaRtwttYGPygO39ksBX8eHmpB1M58/aPbM6POpIe4yZC/hNXvBf1aPvi+lQ9rj5uQo/ZsL2UhnL2Otm4pqE+t73m4zesP3wJYpvAZ9pHlOdNTdcOZh+pXU8GU8NvF/TyR0yrQe920Ms/kotLztbx5cDzgWudYeOye1SaX8EeHz+lcR01zMSjMZ/OuO9ZGh4f+0A+VlsDfmFHrXH783TysontLYW/lPG8jdnYOt7m8eVz6waYn2JZrXXa59aZX5w+d5sQvs7CYL/K6wdOf6SpFLd52PQn7KO4/KhaHv7FLI/wo7i8b8cP+t7YIfe4Y9iNLB143G5dwN0SwWMbw5LCEx5+ELoi2AQxeV2oM8ytIZiXM8xvd4h5RQjmlRHjGan/lc5Vx3aXh+d9cr1xLb1OtQP86swP+93tTD+GvRL0c79twVSHnMP4Yp/dji+2ueS3jbXZ1zeupQ/Qu3hkKuXlGUJ64ublxoj0IxbvX7G8SnVou2CvzfNkzMEOMbcK/Z40Vrq63tK9LaTPtg77bOuwbdoo8OJjAWl+g48BidstQn09ZHOAVDUp9YfcjtgfSvO0qO9otJuD4hyAh19dn+oX9a0QaXksbn/DjxhdBEc6Rn1TJGq9wl4vhvCUbt7G8zJTZf48/P0RbbxkX2nbR1TZ5/NSPDaU5xXFjdoafSjKa9T4TbLPli7sg+W1zvzw2G1eXvB1Qa3ymoDyKrVBUl5i/YlbT9FOQyHhcQxE4d8VY1zFOUS9KhB3fUHq47YHsm5eN7lN8AOgFP4DvdSeJ1MpqX5wu2L9iLKhdZ2OEXHdho8l6uDH68c28JPWauO0u9ZF1R2Kyz8CK82Nw46AbqcTOUrzZamtp/Cfj2jrpb43qq1vV6fxFQDedlDcQzdXl8syt0Gctj5qvlMXwsdt63EuLG0Fbtd2fyGi/OFj5bjfF4sqK1uEtHX6bORQ5v1MPhsJG5eirbhNOJbUNkStqXQ73rQOv6XbbryJa5MU/scdjjejymFdCO/NePMgymGvjTelNoivE74rog3CMZ9U/qLGZ+3aIPx8ldQG9Qu8eF8svQZq3arG/2SXLuqZjuPvlOYSoI/swe9x/SOCHRX5pKLyVVoDcPs5p+TDX1CTnsddWZ9um7B2B9twepZm3WUMh8oqbmu2jj8f+gOsNUnjQB6XdOA4cGB+CzMxfyqmdKwab4Nx/Csdq2Zx74O6z22C4w8pz6PGy1uZHik875t4+OFGWqX5YV3gELX2tE0IXxc4Rz2fR93SfgOpL6XwYyw9h35+mE4d6mf+2GdFzR15GayDHqkvkl6jlV5D4HNArK8bWLqkuoXHDEqvf4dxtI6ek2K9xDohpYmO7MPx2nKhjGE9DBjmPHav0/FI1JpSPWivO+pVZ4o/JITneFjHTo/RZoSt66BNKfyKCJtuC6anK8qm7eoE8YmzTtXOprjNlPTEtSmFT0XYdBuLE8emFD4bYVPJRlE23SGEl9qSqGeVcW2KW6JJT1ybUvjHRtiUPy+KY1MK/4RDaFOe5h0Qj7cZOD7G9m4kJN54BGY9BJPu83hRR5tKeSm1aZiXT43ISyld9Zjp2qaUrm0dpovCX+woXRtC0rWhw3TV26QLn7tS+OfESJe0TmIdrv1T+OfHHNsdyrWKmVwvxTXROvPbAH7Sns2oMnEw85sbYH7Dw+FYTdrPznlgGaDwtZhlYGb2lMtlIOp5vjSOjppTtVvTwXyWjjmSygCuqUpHssQd3/Mjc649amo4zicR8p904r2+GGnDusXnEdyuNI/ohb25nA+2m5th7YH389I45TKwQ7u9ubjXajvolfbmhq293Axc6ww7ztoLhb+Lrb1sa1xLYx7cPxs25gnrY3h5COtjdsdsX4hXr/UxdeYXp4/ZJoSvszBR+2dxrCD1I9L+WWm9AZ/hSc9lbPn4ymh7/mHjIF7eh4Lo8SDWj3sjxjN8b50030yFYD7Eyv0D86emvx60HO3LsuHeOF9H92si5jHSvCTqmdNOITxvc4jPGHDgcTHdmFdvhHaBpxHrPsXj42YeHsfN3K/OrtvNB7YLaUQbDoWEJ7xBCP8OoZyNC+msg766wC9u/11nXG+O0f6SzqhPv1uH5SRq7GOv8Rk5X7/mz9cejl9v+c1MW5xOH+qxHj6b5OUBj+2X2uK4z8jx80PScTu2rNzfyAwco/8RK8O4714a90vP1BHzcxHtlWS3qHIYdy+CtOa8NSKe9JyU61rV+J9M1rpypK/ewJslcAlbu/0Ss+OupTLXxDS+3bmoucBwILe7OrrTyQToC4Lpcw2uf0SwpYtnunXgg/bBZ7rbnPBJ1fgzXV5++TPdOtPNefA9a9je8XnCN2DMIrUBvJ07l/nz8N9l46VvhWAGQXR7126P2E/nTsV1tWYjtS118It6DlRnftj2Ux6FvdtUZf48/I9Z2xD17mDz2XHj/wDzUyubqdoh31tbb1zH+bSNVP7q7F7Y+/RDQfS8C5/X/yJifBi1v3dTh9y3CNyxnmPd+QaMHbnOjTF0drO/dzHz5+F/M4PjhiP7e6eHP9j9vby8xN3f+5VG2y29lx3n84bSmndUn8XL97HMn4ef3TiGrZfPXyE7OS5/6UO9x7h5lHwwvWziOlfU3k7pszS2/L23Uf5c2rFQTDbHtJSH/Fh57gaYPw9/XKNMjrB00P+uPklSKKdqmXKtnCtXKtnJMh4Tbx3lmT3mypaHRQtaNiM7advMOsIfdIPffG94gKW1X0gT6aey1MfCJ0L+B4E8ZyFdI4ClnLZUVNo4f3xeMwB86DoMa6BDrOEQv1U66W7maX9EulF/WHipDtD9oQh8Hp7adV6Gh8AWs9zYIh2Vb0NMJ+k/mGOw6fdSCIefxeL2HgzBCuD3UrjXH8jHYGO7NBpMTzfFcdympOO2A6R/JHBaH5rtwCDwCau7/DjD1WvLlcbJqtjkYdZxc3I4TDZmXbNbhHtYHPogHg31pC4UeSYEDMkE+AXwhKBfakr6Q/QGQau4YvPRDouu+yO4hGEkAGM0AuNI1TlSdQR3pOrEqzrao/F0sZgvpSeS2UJlslbJZtqNxrX1T07kJ7LVicl8KpvPZJOVTmYDONrgs+5+wX6DEP6FbNaNT6D6IjCtw5NUKfxLImby0qhISmecZoDzGQumlyucQcxUeSqUixOlyVK2nM0nJ5OF/MHkp5Rubvsb6lPD08hyKIieTQ1C+CtYXuFujSEWh7Buqk/HRM48f/iIHT/GRuHXMA53wKoHtwN2iXw0rdgFTSZAXxDIXSLpHwmcdtEpzA/ig/bBJ2GOZjgTCcDnfGYJ9qG8nC34ERatBPG2hoefxdLIw/Nris/vbWqUrXHAtI5OR00Ifv3CPbLvw6eswdCN500i5D/h4j2cwXPbYBvG20/+5LAe0n5we/K41H5gXTywoIW5o3EtjS8w/7BNjhoncH1h7RX2VxR+D2sr8OMh2F/xdCJHrm9A0GsdtlcU/nZYiXNU78WPR5Iuqb9LBLI9giDeKpTUP44Keshec4LolZaodiJqxYvq3FBIeMIbhPD3R/Rls1mcfoEXjmUo/EMRY5lhIV1Svab7I0L4YSFdY8H09o/iSk8lyPaOT6idlJ5KcBsO1tvbZ1YX9qEyMA7hua2kNnQW6Gk3tcSnuNIqGm9z+fhtTNCP6ZTqw5CQzqj6IKUPy+57Oxzb8Q/tzgrhEHdsR+E/yDjcFTG2433ZhxdEc8X2hs99ePhPsb7sY5A/0iqo1A72gx/PS7IRbweHBFypPmOZkOoKD49jbSr7QyHh+XiKh/9cRJkYYXGk8SWOGSj8FyLayDnB9HTxeQzaYa4Qfk4w3Q5jwfQ2YG4g6+bp4XbGD2hT+C8L6ZHaXf5EwboB5qfY7opf4+B2xXY3yobWoc1HhfDclpS+cQjP7S/VnTngx/XOBg7t5jbYJkvjDd52SMur3AbEc1hIr17eTaYSoI/Sx+9x/SPB9DLvYi4Zt4yQfUbd2CcZVQZHBfsQn6Oc8ElmqKyMC7qJK72pztsVHn6U2ZCH59cUn9/7OZTXMRaP8MfBzzqcx3K/fuFe3yHCGhewuN0oT209/hHYAr9sJf0nXLyHHHl+UpmPaiMOVg/HovGNVJ+srGr8TnblMmlKx1FCOkg3L1d6dSdXiNvWkf6RwGldTkWVYW4fnOuOC1zHg+lleEu9Fa5d+eZ6JKy7exRrtyLW7YpYdypiadprryLWHYpYexSxNipiaaZxvyKWJq+dilia9VEzH3cpYmnWoQOKWDsVsTTL6r2KWJrl6y5FrPsVsTTLfa+2OZppfEARa5Mi1oOKWJr20hybaJavXh0Xapb7Xh3L7VDE2qeIdTiM5Xq13GuOTY70aZ1h7VTE6lV7aZZ7zbGcZlu4UxFL0169Ov7arIjVq+OvWxSxNOu2Zh3StJdmP6RZh3rV9prtl+a6XK+uDWmWL82xb6+OMXux77DX+MxKo++QnvX2sXDDAg/N572EP98RPtlqXoStuH589kv+0n/CQj/SNQJYymlLRaUt6hkxfx7ObRCGNa9DrGHBz0Wejkekm+sfjeAqpWNU0SaDili4t03asyE9V6Xw84XwUjkZE3RTXMrbBcxPMW/TUXnL2wjSfzBvb5Pdngfh6GsOfcH0ujEvBCuA38+De/0Mj7uxYHpZmx3Ck/TiPSwrPP4o8KDftOeF74GlfSLS3h4rqxq/k125fDqqbXXbz+Qzcdtu0j9TbXdUG2Yd7o2I04ZZt7XeCtdNu2PdfYpYdypi7VbE2qmIdbcilmYadylibVTE0iwTOxSxdipi3aaIdTiUiTsUsfYrYvVq3da0vaa9blHE0kzjPkUszXzULPd7FLE0y/2tiliaZeIBRSzNMnFk/PXoaKM1+9rtiliHQ1v4oCKWVptjr3Gu3Q2ve+p6WJp1SLON1uzTenVc2Kt9Wq/OrTRtr1mHNO2l2UYf6Tv87zus05xbabaFdyliHVlTOHR1SNP2mmm8XxGrV+dDmrbfq4i1SxGrV8c5R9qJQzeeONJOHDrb92o7EWf8xc8JxHN5pef4hDW/DdaFgMXjzwesBW2wLgEsaT8DxVsYooefecH3YCwUdEv4hCHt47CyqvE72ZUrlIeFdOjhpyv0PHwRS3ei8Z90H83u6z27z8Y+n5T0jwBXXT6tvQRHAx+0D+4lOEbgOg5+1m2rt8KhX79wry8Ca78i1t2KWLsVsTYqYt2qiLVDEeuAIpamvTTTqMVLamd7pazepYilWbc1y8QdilhH2q8j7ZfLNGrafqcilma5v0cRS7Nu92p91Gyje7Wv1czHXYpYh0M/dDikUZPXTkWsXuy37TXO23ulfGna6z5FrL2KWJpjk17t047Ux0OXxl7ttw+HeZpmG417xx6N5f5ORaxeXeu4VxHLRRuN7wVat6rxP9mVy2RpLZo/O0kEU/XysYjiunk1AfrIRvwe1z8CXJX5NNfxpWc53D59YB83zzmSlQTgcz5HC/aRnivgOHJx4zd/jsXDH83SyMPza4rP7z2xEVGznbTvW5cauB3UgfRkLZXJVQu5ZL6czVXymXQlXUhWsrlaKlVMpUvZYiZTm8wWK8V0ppYupCdHg+n5jnXAUR5n49YBfJblqE5GPstaKORRp8+y1tZb4Xqp/6Xv98Q5P95NWchMHGxZcH1+vFQWos6Pj1sW6vVWuG7zT3NMrTmX3KeIpTm22KWIpTne1Bzr9+oa3U5FLM003q6IpTlv0Hxe0avrMY/2Z/DWHXkOfOhsf+Q58KGz/S2KWJrlvlefax5pJw6d7TXTeL8iluZ4oldt/4Ai1pE61BnWdkWsI3Xo0Nlec+6+SxGL3qHANSTrVjX+J7tz6WFBrxJ2lrAX62M3z6A9tnvsCt4g7OP0edcIe4k6diZHa2n8m/D8G+FfbRQgKpuNzyNPWdfn34buY/48/FnHtDD/ooE5ynADhmHdMOAlAs01x3QyAfqCQF4DJf0jwFWXT2sNtA/4oH1wDbRf4DoOftbdXG+FQ79+4V4U1l5FrAOKWDsVsfYrYt2riLVbEeuuHuW1SxFroyLWjh7ldbcilma51+Slaft9ilia+ahp+1sUsTTT+IAi1iZFrAcVsTTtdYciVq/Wbc2+g8YT9O41Hz/S9+jHguljpzmgb4D5cXwalw6B/6rG72R3LkX4s93gN7+pMEuwMU8T6adx5iALnwj5T1joR7pGAEvbdlFp4/yx/MxifPDbCxLWrA6xhgU/F3k6FJFurn80gquUjgGwyYCgJyHYhO7PjuDFw48Juiku2XCY+SnaMB1lQ14XSf/BfI+C7LYMwtE5Fn3B9DI4KwQrgN/L4F4/w+MO59y8jRwNpreZpNe2j5Q/xzN//JbF8UxXv3AP6wuPf3wIlrTWYN3l9ZY/D59urDVY7K8vmYp5gsAvquwuE8KfwMIQH8k2FHdU0N1JG8p5jQsc+mdIz8AM6Zk9Q3qGZ0jP0AzpwfZ9maKeZSzMIOhZrqhnOQszF/ScqKjnRBYGx34nMT/e3hCPkwUe1D+dwu4r9k+x9++S/hHgqsynOdY6BfigfbBvOVXgOi748b2v3I/rOVXQI2H1K2JR2RgLppeVk0HPSYKekyL0nCzooXJ1OqRnVeN3siuXLlK+nBFMd+R3Jrv3UL3FA10//Oa8bZt+z9IWLoZDndyuZ4Ifr2MrwI/n1UrwO435ndW4Hgum25fr5n6URryH+cjjnx6h55Qu9Zwi6BkV4nXbVkq2wXzS0MPtdgroOUVRD7fbqaDnVEU9vCyeBnqWsnj8eduWY1pxeDw+BuZx6ay5QQj/7iUtzHoDk9qSMxkvxbakTGlbEUx35LeS6cYyexbzw3J2NvPDsnEO8+M2Rye1T2QL2z59pIP26QzmR2miPKD4d7JnnvuOmRqf5yG+E8L7z4vB7zTBz+JfcFyLD7eDHbNTuRlmcbHcUPh3Qllx0+/kC1LfgmOpFY50x6nPUt/C+RDvEcFvoAuutcliMpPM5yvVfHYil60lgul1ql+4h/PWlUJ46XuDZOuz3Ng6TXWhv97C5/2ydQPMbwX4DTI/4mjr6guWTuW/0hH/OPbn+seF8JewNHSSly6xeHuggTXrILHmB9P7JGpzHI99S1IbRE6q8+Pgx8vcPPDj9Qm/Oc37Mr7Wh67dePprHfRXvF9cEYJJfQGfC1AfMwhhP8n6to9B38bHhM+qT/XjYy/SYzG+DuMe0sPXmqmftO7qEF5fm5GxTrYijXWw/1rpSHfc/gvnP5wP8R4R/LrpvyZStUw1OTGRTU9Ucvl8Pqo/4vew/zpLCC+dcUu2PtuNrSek/ussZlfrBpgf9m28/yKOUv/lpv/NTsSxP9c/LoRfw9LQSV5S2y6Nm6S2YnV9qh+f8/Gx7tehjrsZJ6YnsN5wJ7Xz2D/wMon9A5+zYP9wLvPrtH8gW3TaP/B2kqeJYw6we1IbPwjhf8T6iL+FPoL36aTbhnvB4qnhVgq83daZ+GutpF9qQ12stUptolTvpPKH9Zv7HcOuuR/Xc7agR8IaVMSicjEWTC+jK0HPmYKeMyP0rBT0ULni9U8vHzNJypdkMN2RX4rd63StlXh3utbK7ZoCP17H0uDH8yoDfrx9yzaux4Lp9uW6uR+lEe9hPvL450boOatLPWcJekaFeImQ/6QH76EeyTZRayUHq0dq7zHPNfRwu50Nes5W1MPL4jmgh4/R+Vrr3MWtODweX2uV5t6DEP7VbK11rIE5HEyvB4eqLZHKbJr5YTnLMD8sG1nmx22OTmqfyBadrrXytpqniXOPOzah8MdDPjkaSyTnQ7okm0atgfbaGMfNfDp6jCP1452Ocfj5Ytj2dDouOUURi8r2WBCEjksS4Mf1rIzQI42XDtcxjtSGzNQYB8eqnY49ePxH2xgnbI1KQ4+0vnG4jXGepjTG2cfGOM+EvtPN+ovuGAfLmasxDl9/+YjSHKzdWkkCdIeNhZ5Tf+Q/rtO8dHEL88WLw3mdznT/9ZF1GnSH7TpN1B4n7Ps63eMk7Rc5XMcw3K4zPYbhurkfpbHd2ILHf7SNYWZq793hOoa5VWkMs5mNYfZ5uE6D5cyndRr+PD/O2ITCP9RD6zQnCel3u0cl/hiH9I8AV1djHKkfl/a2S/0TxZXaHlynkcZSZwl6JKxTFLFwnYZjnwR6pHciTonQI+17druvIV3F/p87qb/sdIzD9zp0MsbhdsW2kNexJPh1ur4zFky3b7frejz+2RF6Tu9Sz+mCHtd99Uztx5+psdShWncKG+P8KYxxKF7cMQ6FX83GOF+akXWaztoSqcwmmR+WMz6OwLIhre/EbZ8Odp2Gt9XYPvG1EgonrZVIdcfxOCL2N3BwHOHofcbIcYTUV84NWu+6Xl5df+n1E6uvmHxGdcO6J11dubR83foryqufVKlcV123jqcGSw2mFksLhqHrceE+x1jRJhX0hr+0QrICsFa2wboQsKRd6NiKhGFdAlhSy4U9klTbcDTFw3M+Z7fhc1k9nM/ZgHVOG6xrAEuaeRLWuW2wrgUsHv9ciJcM0cPD8NYwKeiW8LHcptpwvq4+lTPnhbOzdBusdYDF46cBK9MGaz1g8fgZiJcN0cPD8FlwlulJCPckPtfXw/lkASvXBusGwOLxc4CVb4N1I2Dx+HmIVwjRw8Pk2f0C05MQ7kl8bqqH86G4cXo4zlWxR4m9K570z1QP186uOFMuClzHBT+cRRQFPUVBj4S1QhHrLEWslYpYZytinauIlVTESiliZRSx0opYWUUsahOlJxELQE+nTyJ4/Jl6ErEA9PAVOT7bPPnYVhxeBvlsk8elvmgQwr+IzTZPa2BKK2RRT3xw1aVTO0t6qK/hZVhxVT9P9uV9ODny4/3csewanTQ7Jd6drp5xu2KfzNuZIvjxdqMEfrzuPqZxPRZMty+2idI4kN+LKseZCD3JLvUkBT2jQrxu66VkG9f1H1dFk4p6pPkDlh8NPdLcol179lRozyheWHtGY9lBCP901p49o4E5HEyvB4eyLcEyK41LyK/E/LBsPIb5cZujk9onskWnq2e8rcb2SaoTw8H0snconq6R/pFgep1zMWeQ1gSkPlBqvymuVJ+OY9dYb/uFe1F18xRFLJpLRo0dEuDH9UQ9XZPGGo7HB1l8Cs/dKKTZuk6frh3s+IDbNQd+vI7lwY/nFdZb3i5SWyT121heOu23efxH2/hgpp6uHa7jg20djg/w6RqFfwwbH+yE8QFfD+vV8QGWM1fjA7JFp+MDPrcvMHwsXzwcz0OprAfCvYSAg3UuFaLfuufVH/kvra0vBB1SX87vYfleKPCNqq9u+7JHThfn+igd/B7XPyLYxMUYKRPTrlLZyoDNpXKAZYTryQp6JCxsB6PWxVNu7BV7jEv6Z2pdXBovLhTsOhPlOyyfkxF83LT3rZPo2z0fIj72ZJGhYHoZkp6LIW/+HInuheVN1PPsqGeL7Z4H4vPssDSE5VHU82zJBoPg9+VGP25t+P5jp4ah57CfZ2E+2LiW+mWs046edcWu0/isK++GT+SzLm4fXmZnBdFlh+dd2D6Ac4S0Ylk+uw0nLMud7jngWFiWo/YcJNtgYVnm8XFcwNtq3Nkm7QTHOSjHf3g32rHh+MkI/FQEfiYCX9oBK61pZ8GPzz1zDP9rEfgrI/DPjsA/R8BHTGo3xpnfSeBHYb/ewLBj5H3Hy3wJwzq3p8rFb1NI/0ztNJf2Q0XtNJf2KUW9tRbVTkTtwuVYKxSx6Pm52x3gmYy0pkFOWr+aqR3gPF+wvnM74/oVrxe4fsX3JFA/MVM7syU93ZaXFYKeUSFeIuQ/6cF7cd7yxHzS0CPth8Q819Aj7ZXE8qOhJ2oHOB+v8jWq38EalbQDXBrr4g7wFWyN6vewRuXm7SndHeBYzviYEMtGNzvA+WnSH+nyDRW7O5nezr68uv4Z1Q3PK6++olJef8Xaq59Vvfb66rr1AwCL1QeL+coQuhwniKBrXR/4nQL+dKhmXyC7OMsWbrqn+MMR0j9TyxbttjDjcOQcgeu44LeEXWNV6hfu9UVgnamIhR9K4di4VNbpIYynCJyPHMJ45BDGMD1HDmE8OD298HJ/2KO5LHy4hB9GH+fRHIU/jg17Cg1Mtx9l8/MQRrJFNy++YfvEP2ZDB/OT38ksHn5siX+Qi78wRx+zkbaD0EtgY/DbXtNHCgeB10ugPPCPGSqWh+ZHAaSPSLl9wS8T+/WHsGkc5z0i+HXzUYB0dWIyXy7XMpO15GS5VsW6TlzxXh/Tj20vhT9KCO/4YLIy1Rf+UQBef60bYH74CuIg8+MvouJHAdwctpkpx7E/1z8uhL+IpaGTvJSm/Af7ITz6wAD/uAl+dJe3TVgX3bQD8ecupH8EuCrzac5dpI8ZLxXsKk11Ka40dseDyTrdoie17xpY1PdIfcVS0CN9GPqECD1LBc699MEi62bqY53crrhEw+sYLrnxvMIxDq/TuJTK7YvlpdN2iMePOshuWZd6lgl6XC+lngB6XH14GttcVx+ePlQfBQ2bu+wJ+ehi3LlLc7zF5i63wVgVP2S8qvE72ZXr/ONnWGb5ciuWMz7fxLLB5yvc5uik9ols0c3cBdsnqU706vjgBDd8IscHUh/Y6fgAD/Xqpk8/QxGLysVYMD2/sV+RbLMsQo/UPh6u4wNuV6x/UVszNMYHLvptSc9JXeo5SdDjenwwU/32SaDnJEU9UVuHZmp8EPYx78/FGB9Efcybwv/uuBbmF2B84KZP0B0fYDnr9EPfcdsnskWn4wM+l1sRgjkohD0e/Cjs11l+/RbWMnn85cFUv+OZ34ngJ81dpX6LY3AdvMzxen55fWoaKPx3GrytLW9bKmP2hWBSOZbWyfhc2boB5qdXfidTlneNlQFu04fTW5+aJt4m9QvhcS1SGnfwtmh54zrOGEZae1jO7tFam2RP4ngo7LmccYxjTx6+U3uSjaLWeRLB9HyTxrFR9lzeuHco7Mk5xrGnNDZPgE14eG5PstF4MN2GpwHWcgGL13dcCybsISE8tkk8/K9Zm/PZJVP5Sett5He8gM3b3gRg8HSMCOkYBT8e1+J+9eipuNJziai8kY4LPFPQRe279PFut88I0mVpvkBO6uOx/4+7BoD9P9+zELUVnNsEnTQ2IDvZsrWfbbfGcPya6yFcLEdYZpYKHKWx4JltcDstMziX9b3M4JoSLzNYnnwoM7z9xjJzksBRWl9sd8wolhlp6zwfs2OZkQ5I9ukjT93uoSA//toKtwk6qczw57mdlJl2B+pHlRn+YSbcT3NOG1wsM9KeLKl+UZmR9mS5/ahGujYqcCWH5UnK37iHSuNalfRKmlSeuE3QSWWGf3CjkzLT7nhfLDPSepq09Vx6zVLal0fhpWNRuT2wnZFe2xoW4im2M7lRgSs58uOvR+JeSv4qJ/Yx0nGO5MePWMB9U/yIBTzeljupzJCdOi0z0lG/cdsZiisdqdHu1VwsM9LrzXHLDMV1XGZ66mgu8nss8/OtzDwVjojkbTQe85SKqZPCt3vNHMufVF55+x5V/vAIUorH19g4fzxujsJPNOa4Nj++3riW1iTITm7XJJJVaU2C23WwPjXdUTa0rtM6TzYbD6a3x2nwk46LjNqrKh17qj02ovHCo2VshP1c3I+R9erYiM+fsM1aIXCUPswivbYvfdwzqh3j9scyw8sFxXV7DGImNSpwJSflPfZlPO+xXEh5L82zsBzyuo+fUeBOKjNkp07LjNQexC0z/HiAW2OUGem9qMO1zMRpLx7tZeZpR9qZjsoMrvUcjmVmLpSZMwTck9m9OO9T8GeT+ByCPxfC9zV5vF7dh4DPGqSPRUrrzbjfg5cTbhN0UpkhO3VaZk4DXJ4/1kU9h6C4tsxsaWzWHwFd9n9X7/hUKtVUNlUoFavZbKWUww+qWkflb44D/dlcuTBZLqRSpWyqmk211W/tv2jBVHsOsDg870aFe4RL5X8Q4q46yHSgWROgLwjkvaKkfwS4KvNp7hUdBD5oH9wrOiRwHRf8KA/GgvA8SYAf5zAgcBgX4g/EwJLSM7ch1q1bv/a66nnla9Zdv7oagMOygnW6L0R/QogfRGDxOC7q1WQuPzFpKleymnq4PM50vc5VJorJQrpcqkzmK5nc5Ezrr05kS4WJ0mQuWUmWUqVMJ+3KaDC9bCVC/lvXH4E9LmCtrT/yn9ogXo802yDCnwX8lPCb48JBwU6ke7aTtNVqcdtX0j8SOG3vm+3rbOCD9sF3XYfd2Kdqj2qkssfbrCHBNshjFnAcccRRWjMlTuQ3wPyIhw3zpeOncuxzxNFtHa1VpDEK34v8yyUtvTxv+Jo1L/d9zJ+H/zV7V+nfG9djwdR+ibdTc5j/LMGfflN+9Qlh+TX+Ju5oVx6eyuRQSFqHIK0U/ndsff6SBTImtx/n1ReC+XthzZ8w+V60qDpP4ecI4XkdIz5jwfS6OQfice7DwVTH70n5k4Cw2AdTP8Xjhf0eFnDCOMwWcLCfREzUKY31cC7VL+jhdYr3+cOCfsX+ISf1leSksXYC/HjaX1xvhUMnzV0pTTa934PnVTwc8pHqmubYiO4PsvuoF8fjQxCW9+dos0EFjuOCniHAnRXBPwE4A0K80UCuj9L/uHwTAt+o+fDB6uFYL6lP1cPzecpnDOG9BN6O9wtxN9Rb/jz8GUtbmKc1rtv1adiW8DS8tN66h202jmOxTuJzbey7MAzvx3n4sxvp4H0Xtg8cy947F+wpjRGkcR+OES5h9kyDPaUxwFgw3TZYhodBFx8fU/+CNngM41FYGq6L7DoakUZ773FL5XCcAw+HGFLfSRhSvaZ4YwIvrHvYdgxF6JD6M0nHIPh1mz9Sv83HGtIYRvLn/TnXg/f6hPDtxh8jIdgS7pCAI7Xzs8EvIfhhG8bTy9swHJtIczLeNkr1LizvosbeEvc446qhCO6S/Xg7pL2WkywmU8nJQq5WS1Xy5Ylsu7Ucuj+rPjVdD/9n9wZZuqybzcOD3zDzG6hP1T/S+D3A9HAs4jEI4SdYXls3xOJQ/HFB/xDon8JbuMfLGmL1C/covM3TFzc4ulijS+dKxXJpIplK19LpTDHfLl8lO/G1A+vI1jwvhoS0DUL4K1mfsxreQR0U9NlwmyLCJUL+P4wh3BuoT70n5REvuxSedI/Up3MkvznMbxD0zG385vbiWMRjEMLfBGWXlzeKPy7onw36p/AW7mHZnSOEnyOEt/lzLbRHPO3aa38P6wR8fg+5bXJYr/LZfKpYLBcn85O1UnZyYqbX3idL+Vopk5lIZUqVaimVn/G1/2xmopaqmfX/TC2ZKaZm/NlHOZk2zzInJnKparlUqs14+lOpVC2fnSjmJ9NmiXHGn71ka4VyvlZI5tKVbDVdKc+0/nKhWsrmM+nJTK1ULiaLM61/opKfTJYyqUq5XEgW8sWDefaEayTW0RqVo2fEsc83arbTwfSxrItnKv3AB+2Dz6ylZ8/Sczg6Rz8h+MV5Lu0aayyYnt+4LiHZpj9CD+aVdXH2SbhaF41b5kj/TO2TiLuvANcaeVycU1qH5UTajyE9O/AFi+Jbh+uavPxJ8+Co8kjrh9L681UNP2xLx4LwvCFeNJfl9wcFbFx7/BSc+Yvriasav5NdOuw7uC7He5jy0noZuVEh3ZjvfI0E8x2fe3M/3h/j/hru+uE3t4XV/YMY+/SkMpIAvyEhHdL6DPY1CYFX1DP5qHU+qZ+gM9sTgBkE0es40hp5u/EIPvOwznHZjz0eIf0jwfT8ctE3tFsvw7Ie9bxTWptNgB/XM1vQI2H1KWINQHp4fmBZcDQWjD1OIP0jwXSbuigLUp1LCHaVxqZx9ohFjUfijid7HStqzhMn3yU9WP65Ht6/8+eSv4DnaBSPP0fjcfHcPwq/8fgW5i9hPV/K/zGBM45TpHLWF5F+Sc+wEG9V43+yM5fFG273syXLODbgjvzmCGlOCOGlcQPx7vSMVD5umAN+vB+aC368zxwFP9720ncypDKCY5ZOywiPH1UWh7rUI42fXNf5QdDjei9I1DjpYPVIz9mk/UDd6uFlcTbo4fF4Wzn/+FYcHo+3lTzuZfWWPw9/JWsrF8GeTjd7h5MlnINwJ81BsMzydgbL2Vzmh2VjlPnhnmzupPaJbNHpGam8Hxhh+Fhf+oW4UetBjuacscf8j4b3ZqzD8ZS0j0CaW0S9g6OBFdUf4P62TvsDaT3T8VyyiH0rd1J70OkZ68S70/EDt+sw+El192DHHdJ6BY6RpXktvxfV386K0DPQpZ6oPZOu+sGZGqfg3NrFO0dSPzVT46Gw8cMzYfwg7QHlcXGuReFfxMYPl8D4wVGf0FFbIpXZuGMLLBt8bMFtjk5qn5r7goLOxg+8TFCa+D5aaV1J6hcTwfQ2FtehuD5p7ZXi9tr4EPNXmodKeYj5y8eHWF+PYn7cJujajR07eXddGj/wcLgvMCFwlOq6VAakNSMKL71fg3sYrZP2u1LcXl2fiKrbUrnA9pWXCyyHY8yP2wRdu/WQTsqM1B7ELTN8zzbNL6OeVdB9aQ1yUNAZxVEaF8dts3C/tfROFurm/RznHzZP3t6wR7sz58hOjs+cy0lnznG7DgKnKBta12mdx2fsUnssjbdwfUN6NszXgrX3BhXSk7lyJldKTlZzhXK+0MneoKj3CeKMuynt0njaOnzWTeHvg3GVozZUfNYdtled9qti3cVxIoV/PxsnPghtC65vcj9pThD1Lor0zibmQ3M/aiDXBUwDhX99zDaA0uO4DchKbQCvt9gGRL33ah22AXOF8LwPxfczwsbH2B9INsc+go9fotp8nI+8i+URfguDl+sR4C7NpaX1ElxLkt6XtVy+CHXW0TPxgjQPJyc9z0iAH68nOCbCcwe4nzRPSggcpLEN2aLTPSIa7QQf8z/Mrz6d16Got7x/xnob1RcHwfR6266e0zrAeDA9L7F8S31BJ3XGuotAn/SuHq8zc5iuoXorrGIeNM+HIlv3M84D9RZ30i+9o0ThmvNiN1yTxJXey6B+i+vkaemD8HiN70F9n80PeRp5Pka9zyS9E8LflSGO0vtDc+qdYc0GrFldYBEv6T2ZWQfJS8IaAqxO3v/6c1YnpH1hYXspfhhjfS9qLwWF/w0bt/0djNs09+y1a6uxzWvaMpD7qlWN38nuXOx9T6R/JJjer7p4Hib1CdIcmuwzxw2fbNRYUeqj7LlIRwXT84zzIyxpXh61LollvZ1txoX4uBeU53HUHlLsG+PsIeXlfU4QPb9MAJZUj6UxkmQLaW0G52v/w+r9/MZHpaLeiZbqL9Z7ac8x+YXtOQ4rW1FrF6NCeGluQrp52RuNgTUrQvdRQvjRCN2cF4+LusPqiDSOJdscijUoPvbEcWzUfNK6OLaU8nEcwnPbSfU4an1qDvjx+od1XHo+zOuLtMbF57XUR/PvnKMdNPsOXv+08YvJbAGf1yjzzzje45xy/NwySeXu/HoLX9rXIT27pTi2zlE5t9fjLI51FzDsBPhdKOh1mWZTJnKO319LLxD4D7C0WXdePWi6mHpT7RTTeLzxaZRpz16lsUO7fV9BCAbHwX0QiRD9PN2jEdxGI3REvSPG5+gD9an+qxr3k124QrE176W+jc97uRtg/jw8fQtT+xlCrVBO1TLlWjlXrlSyk23fr6ZvVnnevk/OVPvuqK0oOt47Kbbv0h6gfgiHcax/VB/gsh/kbbar9xod7zXMkN2i5j5cf7d7v7iukcBpGU5FpS3qvR9pP2wUVtx9qoR1KPM0bH/iw2HqLb8+8BtgfkPgx+cu/J3W5Swc1kFcr+J91TPqLYyVDI++pUH2c9l2u2ozrFsQhI8j6B5fq5XWUMnm0lr7TJwHtqLxu5fPAzu5cT0naK0J8+/7hNURPm7EdRlpfuq4PqeJq7R3SHrvxs77FzWuH/5+xNOuvuCm6uT1669Ye/V55clXVgNwvPLxgtkXhHfMPKESRj+LLzkfBsX0cdVDPShuPJv3fVBcnKlBsasXfhxvUBAHxVKDQ2WYFin4NXGiME9hYZ7CwlgXNXCWXia4APx4XboQ/HhjRXptAzwvaF1TuXfcoRcPZYfefBjZ+G0b5+WN66vXrr+ituGCq6+9vnp9tXLp9ROrr5i88PqrJx9pqFevDsDhoDsBv3HBA9vkAQEHHY+XYGno9bb6uMbvQ91W843/1i0K9O2VZG31Qjf4SWmT1CJ2vRDSycveKiUOhEflYDCY7vrArzmIBH4JfX7TvjHZL+gi19iL0LSbdWTP/w8Hq9g0y/cGAA==","debug_symbols":"","names":["withdraw_private"],"brillig_names":["discover_new_messages","decompose_hint","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper","directive_invert"]},{"name":"_compute_borrow_rate","hash":"5076539090837410795","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"asset","type":{"kind":"struct","path":"asset::Asset","fields":[{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"loan_to_value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"oracle","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_borrowable","type":{"kind":"boolean"}},{"name":"optimal_utilization_rate","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"under_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"over_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"deposit_cap","type":{"kind":"integer","sign":"unsigned","width":128}}]},"visibility":"private"},{"name":"utilization_rate","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"precision","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17134621154673181869":{"error_kind":"string","string":"Function _compute_borrow_rate can only be called internally"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VYy27TQBT1M42TVq1gwwp2bNjYseO4G1RQQ5q+EAKxAQlN/BAV5aEWEMt8Oh2YKx9uZ1pVsSM8UjVj3+Nzz33M2I1t/R2Dqz9brT24xwdh9tQcrjaiBrnCNnXaHdHpdESn2xGdXkd0+h3R2euIzo2O6Ox3RGfQoE4bdA6uLZR4eRDKQ0ZuYLk5ZOPJosqEBZpAB5p7n9RMeAfsDR5gUcD8NsmfhUmF8bagPw4U57AdfkH8m+3whxuKZ39Z82Ms5NdV83RZ53IKz/iAmQFmBhjkOQDMgYFnDpi5AXMImEMD5ggwRwbMMWCODZgTwJwwzJZa4wbdVxiyOWCbMpsLthfM5oFtxmw+2A6YrQe2ObNtgO2Q2fpgO2I23E/HzIbnCOVHcj206vUjq35GjlOFw9xRz7dx5lydCWVg/Zvzps+0+wb9cgxVHt6qa7m/dtRa/Pz88lv+tSifFcVFeXmJvcT35U3jLpybd+B8wDlPf5yfn1Vn5cX019nl92vcWxpuWjuWPjauC3E4dOeuHHtqDlcbfz4qMYbHapa1ew852eY5eV1+KcqL/6l0FgvFt8zHPA/7iZpl2B/UesvSl0w3y+Fq7lFZda+3Jr/nd26I1dbETvEHTA/mhvBzNctjdsQ4bfa8iZOwDnD5GkzANBA+VbOsz8LA6cBzqIteAVQDj+nbU9fhioP8Uh94oMfT6PEZ/imLi3LhavKBPITva/wGDIN++8yvvC4ZXlffAbuHeIrFVN+BIfbnoGFh4DTlwTZoRj89wLgMr+vJnoaf+56B5o9qrduHNvC/MWjF3sWakQ7dq7yN3qXYsIdcjR6ei1csLupNrJmt4aH7nsYv9jc/FzzmV9e7zi0aqC91NcOeoJptazjomSFo9Ja1vanPrUlW/0/sLutc4Oe0xfz7DP9OXeP+pXmV38CqiYiqWFRiLIoiycU9xm9BPoct+F+UURlXVRWXIqnSau3+yyIX6WSUxeM4TBJRrNv/KMvS3dEiTCZFXhVJvG7/aZJGWSayPM2r3SRfrNt/MhaTXEyiaDeJyiQa3+b/N2+7b5UQGQAA","debug_symbols":"vZfdavMwDIbvJcc5sGRZtnYrHx8jbdMRCGlJ28EovffZo0kzL9mPKD0pdnmf6I0tiehcbOrV6eW56ba7Q/H071y0u3V1bHZd3J0vZbHqm7ZtXp6nfxcm/Vj80B/2VZe2h2PVH4snsOhMWdTdJq1tcPEZ26at486YS/lVbxAHuSEc1eJnxMQMVzGxN6OY3Yw4OOOu4uAQpuL/ZWHtfdyLDHIAeZx7uo97F8azDz+cPTjvBzFb+717cTK8qrCl3L27t3vAT+5TDH5ADP+AGGE2BoiMEBrgH2JQsDSkXphU2ULqeRxTL/j88mTWEE7qGKeFvGDofrVA5hcnRPTJUMJAh6EOm203CGKGVEnrWwNx9oMiFeVUFKsov0CN2RDXHjLKzV4ZooWhxcQ1c06BikIVZVUULVF8o4RyyqkoVlFeRQUVJRqKjYoCFbWUG2MxIxKZnLIqilSUU1G/yA2ivCp5ITcwhO+ooKJEQ3mjokBFLdyy8WM/RIA8ozypKKeiWEV5FRVUlGioYFTUwi0blhtFIadQRdHfM+oSd69V31Srtr7OVttTt56MWse3fZ1NXft+t643p75O89dt9IJ0QoFLgWgG0ovHdhC/NGKQGOgd","names":["_compute_borrow_rate"],"brillig_names":["_compute_borrow_rate"]},{"name":"deposit_public","hash":"4192411957855998156","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"on_behalf_of","type":{"kind":"field"},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["deposit_public"],"brillig_names":["deposit_public"]},{"name":"public_dispatch","hash":"11236447832104325807","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"951653053333916160":{"error_kind":"string","string":"Deposit cap exceeded"},"1602191554767750373":{"error_kind":"string","string":"Function _borrow can only be called internally"},"2830029349304997821":{"error_kind":"fmtstring","length":27,"item_types":[{"kind":"field"}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"4270187767586857285":{"error_kind":"string","string":"Function _compute_total_collateral_value can only be called internally"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5235018679007078561":{"error_kind":"string","string":"Invalid asset or market id"},"6787403583199288031":{"error_kind":"string","string":"Insufficient balance"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7969124557626779129":{"error_kind":"string","string":"Function _compute_total_min_collateral_value can only be called internally"},"10435052277855889085":{"error_kind":"string","string":"Function _withdraw can only be called internally"},"12348881442450494403":{"error_kind":"string","string":"Function _compute_utilization_rate can only be called internally"},"13135008234568508716":{"error_kind":"string","string":"Function _repay can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14687457983715723088":{"error_kind":"string","string":"Asset is not borrowable"},"15333773746166717806":{"error_kind":"string","string":"Insufficient collateral"},"16022896159229267359":{"error_kind":"string","string":"Function _deposit can only be called internally"},"17134621154673181869":{"error_kind":"string","string":"Function _compute_borrow_rate can only be called internally"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","names":["public_dispatch"],"brillig_names":["public_dispatch"]},{"name":"repay_public","hash":"10372594252154713063","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["repay_public"],"brillig_names":["repay_public"]},{"name":"borrow_public","hash":"7577376501893644570","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"1Zzdbts4EIXfxde+4PyRw77KYlE4iVMYMJzASRZYBHn3lZxI1saq3TI+qnhTVAFnzmdZR4eyKL0u7tY3Lz++b3b3D0+Lb3+9LrYPt6vnzcOu2Xp9Wy5u9pvtdvPj+/DPi9D+w3wY//S42rWbT8+r/fPiGwlbWC7Wu7v2/+LW9LjfbNfNVghvy9PxgbkbHpT70TmNDNYY6WOwxhT6wdFGBrsF+xjsxjQc/PdywXId+py74UR5Onq9Dr15v+/9wr4nS6kbHEXO02fL3UfNUfQzvV2bnvh/9K1GnEAjjWmo525HaabU15iAjwkfpcmcexq9ROOi3WAfmPEnNIl7Gk+fafL4vnHradjP05z/uBLQAoQWYLSAoAUULWBogYgWSGgBRwugnaxoJ+vXncyRutMox5QGsaEHBYYrCFxB4QoGV4hwhQRXcLhCRitYgCvAPW1wTxvc0wb3tH3d01G6OXa043VFjof2Eds+Yds7tn2Gto8B256w7RnbXrDtFdse69qIdW3EujZiXRvh6Zvg6Zvg6Zvg6Zvg6Zvg6ZvgM+oEn1En+Iw6wWfUCe5ph3va4Z52uKcdm8qOTWXHprJjU9mxqezYVHbsXDpj59IZO5fO2Ll0xro2Y12bsa7NWNfmr7uWPHR3jcjJPwtgfZuxvm1uC4L7E7g/g/sLuL+C+xu4fwT3T+D+Du4P9i+B/Utg/xLYvwT2L4H9S2D/Eti/BPYvwa99ieAXv8QBL0F4CcZLCF5C8RKGl4h4iYSXwLub8e4WvLsF724BJ7WAk/oKi7nO9wcntYCTWsBJLeCZtoBn2gqeaSt4pq1g/15hBZeTdkuLXTwPFX5r8AFH54Vj88K5fDLJch6nuXSjfsV8M2s6rjW3sfX1ErRbCS7BYj/4fQkj/cK6s4mBfG5AeWZAv7AIbmIgmhsQzw1I5gakcwOyuQHN7Uxt05+pm1/5O6Bm9BBoJPjEpA++5Cf0XjV9rpk+hqrpqWp6rppeqqbXqumtavo/EJ/987FCg8vkUfrm/njq8JtPHfSEP1XO75Xz57r5U6icnyrnnz53mxEdP1u+xB8p9vxR0gn/9Mkrod//cuns3zB7/4aKkEhO+KfPXnY/8tsl/pQH76hQOuG3yvlj5fypcn6vnD/Xze+hcn6qnJ8r55fK+SvPX688f73y/PXK89crz1+vPH/znPL3ADSnQD0AzSkhD0DTn3I19He89OIlJ7FT31vCyQ2yHCvnT5Xze+X8uWp+Dtc4w4n3z9yRBh7yHzR4Ag2ZQEPxGuOPeJBqX6V2/N2PY3yvSkVVXlSVS6rGH5q4WEVFVVxUJUVVWlQ1/n0dF3U3t4CPztb3ovGV6c0Ny/434RjDSRGVFFkJXiwpKtoRXlKUC4o0lBRRSRGXFEnBlzu+1vZSkZUUxZKiVFLkJUW5oMhKTGglJjQuKSo5IqzkiLDfPiLemq1/VvvN6ma7/nih+/3L7nbwfvfnfx/Xn171/rh/uF3fvezX7Uvfj+97b4nZfCkkDUyLIqRLid7OydqviENcMlG72e58Jm42tWFoOP4D","names":["borrow_public"],"brillig_names":["borrow_public"]},{"name":"_deposit","hash":"16681137557370230916","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"951653053333916160":{"error_kind":"string","string":"Deposit cap exceeded"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5235018679007078561":{"error_kind":"string","string":"Invalid asset or market id"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"16022896159229267359":{"error_kind":"string","string":"Function _deposit can only be called internally"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"","names":["_deposit"],"brillig_names":["_deposit"]},{"name":"add_asset","hash":"13995952680462419085","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"oracle","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"loan_to_value","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"is_borrowable","type":{"kind":"boolean"},"visibility":"private"},{"name":"optimal_utilization_rate","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"under_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"over_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"deposit_cap","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"","names":["add_asset"],"brillig_names":["add_asset"]},{"name":"update_accumulators","hash":"12476502730871199499","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"12348881442450494403":{"error_kind":"string","string":"Function _compute_utilization_rate can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17134621154673181869":{"error_kind":"string","string":"Function _compute_borrow_rate can only be called internally"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"","names":["update_accumulators"],"brillig_names":["update_accumulators"]},{"name":"_borrow","hash":"15441418802491595610","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"1602191554767750373":{"error_kind":"string","string":"Function _borrow can only be called internally"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14687457983715723088":{"error_kind":"string","string":"Asset is not borrowable"},"15333773746166717806":{"error_kind":"string","string":"Insufficient collateral"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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","names":["_borrow"],"brillig_names":["_borrow"]},{"name":"_compute_total_collateral_value","hash":"2311757602069931672","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"4270187767586857285":{"error_kind":"string","string":"Function _compute_total_collateral_value can only be called internally"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"","names":["_compute_total_collateral_value"],"brillig_names":["_compute_total_collateral_value"]},{"name":"repay_private","hash":"8131124355583851132","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"on_behalf_of","type":{"kind":"field"},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["repay_private"],"brillig_names":["discover_new_messages","decompose_hint","store_in_execution_cache_oracle_wrapper","call_private_function_internal","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper","directive_invert"]},{"name":"get_position","hash":"9696183135388511515","is_unconstrained":true,"custom_attributes":["utility","view"],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"position::Position","fields":[{"name":"collateral","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"scaled_debt","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"debt","type":{"kind":"integer","sign":"unsigned","width":128}}]},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_position"],"brillig_names":["get_position"]},{"name":"get_total_deposited_assets","hash":"14070573857703752751","is_unconstrained":true,"custom_attributes":["utility","view"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_total_deposited_assets"],"brillig_names":["get_total_deposited_assets"]},{"name":"_repay","hash":"4923727447441237136","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5235018679007078561":{"error_kind":"string","string":"Invalid asset or market id"},"6787403583199288031":{"error_kind":"string","string":"Insufficient balance"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13135008234568508716":{"error_kind":"string","string":"Function _repay can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["_repay"],"brillig_names":["_repay"]},{"name":"sync_notes","hash":"10955766211644918689","is_unconstrained":true,"custom_attributes":["aztec::macros::functions::utility"],"abi":{"parameters":[],"return_type":null,"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["sync_notes"],"brillig_names":["sync_notes"]},{"name":"_compute_utilization_rate","hash":"16522737961453196639","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"precision","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"deposit_accumulator","type":{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]},"visibility":"private"},{"name":"borrow_accumulator","type":{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"12348881442450494403":{"error_kind":"string","string":"Function _compute_utilization_rate can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["_compute_utilization_rate"],"brillig_names":["_compute_utilization_rate"]},{"name":"constructor","hash":"6023396650610784153","is_unconstrained":false,"custom_attributes":["private","initializer"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["constructor"],"brillig_names":["get_contract_instance_internal","decompose_hint","lte_hint","discover_new_messages","notify_created_nullifier_oracle_wrapper","directive_invert"]},{"name":"deposit_private","hash":"16368240964552897799","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"on_behalf_of","type":{"kind":"field"},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["deposit_private"],"brillig_names":["discover_new_messages","decompose_hint","store_in_execution_cache_oracle_wrapper","call_private_function_internal","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper","directive_invert"]},{"name":"_compute_total_min_collateral_value","hash":"1035407812127835017","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7969124557626779129":{"error_kind":"string","string":"Function _compute_total_min_collateral_value can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"","names":["_compute_total_min_collateral_value"],"brillig_names":["_compute_total_min_collateral_value"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"Lending::repay_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::repay_public_parameters","fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"nonce","type":{"kind":"field"}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::withdraw_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::withdraw_private_parameters","fields":[{"name":"secret","type":{"kind":"field"}},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::_compute_utilization_rate_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_compute_utilization_rate_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"precision","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"deposit_accumulator","type":{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]}},{"name":"borrow_accumulator","type":{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]}}]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":128}}]},{"kind":"struct","path":"Lending::_withdraw_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_withdraw_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::borrow_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::borrow_public_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::_compute_total_collateral_value_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_compute_total_collateral_value_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":128}}]},{"kind":"struct","path":"Lending::_compute_borrow_rate_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_compute_borrow_rate_parameters","fields":[{"name":"asset","type":{"kind":"struct","path":"asset::Asset","fields":[{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"loan_to_value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"oracle","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_borrowable","type":{"kind":"boolean"}},{"name":"optimal_utilization_rate","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"under_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"over_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"deposit_cap","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"utilization_rate","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"precision","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":128}}]},{"kind":"struct","path":"Lending::_deposit_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_deposit_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::constructor_parameters","fields":[]}}]},{"kind":"struct","path":"Lending::deposit_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::deposit_public_parameters","fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"nonce","type":{"kind":"field"}},{"name":"on_behalf_of","type":{"kind":"field"}},{"name":"market_id","type":{"kind":"field"}},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::repay_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::repay_private_parameters","fields":[{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"nonce","type":{"kind":"field"}},{"name":"secret","type":{"kind":"field"}},{"name":"on_behalf_of","type":{"kind":"field"}},{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::_repay_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_repay_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::_borrow_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_borrow_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::update_accumulators_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::update_accumulators_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::withdraw_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::withdraw_public_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::borrow_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::borrow_private_parameters","fields":[{"name":"secret","type":{"kind":"field"}},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::_compute_total_min_collateral_value_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_compute_total_min_collateral_value_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":128}}]},{"kind":"struct","path":"Lending::deposit_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::deposit_private_parameters","fields":[{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"nonce","type":{"kind":"field"}},{"name":"secret","type":{"kind":"field"}},{"name":"on_behalf_of","type":{"kind":"field"}},{"name":"market_id","type":{"kind":"field"}},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::add_asset_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::add_asset_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"oracle","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"loan_to_value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"is_borrowable","type":{"kind":"boolean"}},{"name":"optimal_utilization_rate","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"under_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"over_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"deposit_cap","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]},{"kind":"struct","path":"Lending::compute_total_deposited_assets_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::compute_total_deposited_assets_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"deposit_accumulator","type":{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]}}]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":128}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"PriceFeed"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"assets","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}}]}}]},{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"Token"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"admin","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"minters","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"total_supply","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"public_balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"symbol","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"name","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}]}},{"name":"decimals","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000a"}}]}}]}}]},{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"Lending"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"market_assets","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"market_assets_list","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"market_assets_list_len","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"scaled_deposited_assets","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"scaled_borrowed_assets","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"scaled_total_deposited_assets","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"scaled_total_borrowed_assets","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}]}},{"name":"deposit_accumulators","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}]}},{"name":"borrow_accumulators","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}]}}]}}]}],"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"kind":"string","value":"UintNote"},{"kind":"struct","fields":[{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"kind":"string","value":"UintNote"},{"kind":"struct","fields":[{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]}]}},"file_map":{"6":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"16":{"source":"use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: x_coordinates_match,\n        };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n","path":"std/embedded_curve_ops.nr"},"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"19":{"source":"// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"20":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"25":{"source":"//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n","path":"std/meta/expr.nr"},"42":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"43":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"46":{"source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n","path":"std/slice.nr"},"52":{"source":"use dep::aztec::hash::pedersen_hash;\nuse std::ops::{Add, Sub};\n\n// Utility used to easily get a \"id\" for a private user that sits in the same\n// \"space\" as the public users.\n// It help us to have a single mapping for collateral that have both public and private users.\npub fn compute_identifier(secret: Field, on_behalf_of: Field, self: Field) -> Field {\n    // EITHER secret OR on_behalf_of MUST be set. But not both\n    assert(!((secret == 0) as bool & (on_behalf_of == 0) as bool));\n    if (secret != 0) {\n        pedersen_hash([self, secret], 0)\n    } else {\n        on_behalf_of\n    }\n}\n\npub fn covered_by_collateral(\n    collateral_price: u128,\n    borrow_price: u128,\n    loan_to_value: u128,\n    collateral: u128,\n    increase: u128,\n    decrease: u128,\n) -> u128 {\n    let price_precision = 1000000000 as u128;\n    let ltv_precision = 10000 as u128;\n\n    let collateral = (collateral + increase) - decrease;\n\n    let collateral_value = (collateral * collateral_price) / price_precision;\n    let debt_covered = (collateral_value * loan_to_value * price_precision) / (borrow_price * ltv_precision);\n\n    debt_covered\n}\n\npub struct DebtReturn {\n    debt_value: u128,\n    static_debt: u128,\n}\n\nfn div_up(a: u128, b: u128) -> u128 {\n    let div = a / b;\n    if div * b < a {\n        div + (1 as u128)\n    } else {\n        div\n    }\n}\n\npub fn debt_updates(\n    interest_accumulator: u128,\n    static_debt: u128,\n    increase: u128,\n    decrease: u128,\n) -> DebtReturn {\n    assert(interest_accumulator > (0 as u128));\n    let accumulator_precision = 1000000000 as u128;\n\n    let current_debt_value = (static_debt * interest_accumulator) / accumulator_precision;\n    let new_debt_value = current_debt_value.add(increase).sub(decrease);\n\n    // static_debt_increase = amount / accumulator\n    // rounding up new debt.\n    let static_debt_increase = div_up(increase * accumulator_precision, interest_accumulator);\n    // rounding down repayment.\n    let static_debt_decrease = (decrease * accumulator_precision) / interest_accumulator;\n\n    // We need to allow repaying of the entire debt as well etc. This is very prone to failing\n    // if you try to repay exact due to time diff between sim and execution.\n    let new_static_debt = static_debt.add(static_debt_increase).sub(static_debt_decrease);\n\n    DebtReturn { debt_value: new_debt_value, static_debt: new_static_debt }\n}\n\npub fn debt_value(static_debt: u128, interest_accumulator: u128) -> u128 {\n    let accumulator_precision = 1000000000 as u128;\n    div_up(static_debt * interest_accumulator, accumulator_precision)\n}\n","path":"/home/jean/work/noir/lending/contracts/src/helpers.nr"},"53":{"source":"mod asset;\nmod position;\nmod helpers;\nmod accumulator;\n\nuse dep::aztec::macros::aztec;\n\n#[aztec]\npub contract Lending {\n    use dep::aztec::prelude::{AztecAddress, Map, PublicMutable};\n\n    use crate::asset::Asset;\n    use crate::helpers::{compute_identifier};\n    use crate::position::Position;\n    use dep::price_feed::PriceFeed;\n    use dep::token::Token;\n    use crate::accumulator::Accumulator;\n    use dep::aztec::macros::{\n        functions::{initializer, internal, private, public, view, utility},\n        storage::storage,\n    };\n    use dep::aztec::protocol_types::traits::{FromField, ToField};\n\n    #[storage]\n    struct Storage<Context> {\n        market_assets: Map<Field, Map<AztecAddress, PublicMutable<Asset, Context>, Context>, Context>,\n        market_assets_list: Map<Field, Map<u64, PublicMutable<AztecAddress, Context>, Context>, Context>,\n        market_assets_list_len: Map<Field, PublicMutable<u64, Context>, Context>,\n        scaled_deposited_assets: Map<Field, Map<AztecAddress, Map<AztecAddress, PublicMutable<u128, Context>, Context>, Context>, Context>,\n        scaled_borrowed_assets: Map<Field, Map<AztecAddress, Map<AztecAddress, PublicMutable<u128, Context>, Context>, Context>, Context>, // static debt\n        scaled_total_deposited_assets: Map<Field, Map<AztecAddress, PublicMutable<u128, Context>, Context>, Context>,\n        scaled_total_borrowed_assets: Map<Field, Map<AztecAddress, PublicMutable<u128, Context>, Context>, Context>, // static debt\n        deposit_accumulators: Map<Field, Map<AztecAddress, PublicMutable<Accumulator, Context>, Context>, Context>,\n        borrow_accumulators: Map<Field, Map<AztecAddress, PublicMutable<Accumulator, Context>, Context>, Context>,\n    }\n\n    #[private]\n    #[initializer]\n    fn constructor() {}\n\n    #[private]\n    fn repay_private(\n        from: AztecAddress,\n        amount: u128,\n        nonce: Field,\n        secret: Field,\n        on_behalf_of: Field,\n        market_id: Field,\n        asset_address: AztecAddress,\n    ) {\n        let on_behalf_of =\n            compute_identifier(secret, on_behalf_of, context.msg_sender().to_field());\n        // docs:start:private_call\n        let _ = Token::at(asset_address).transfer_to_public(from, context.this_address(), amount, nonce).call(&mut context);\n        // docs:end:private_call\n        let _ = Lending::at(context.this_address())\n            ._repay(AztecAddress::from_field(on_behalf_of), amount, market_id, asset_address)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    fn repay_public(amount: u128, nonce: Field, owner: AztecAddress, market_id: Field, asset_address: AztecAddress) {\n        let _ = Token::at(asset_address).transfer_in_public(context.msg_sender(), context.this_address(), amount, nonce).call(&mut context);\n        let _ = Lending::at(context.this_address())._repay(owner, amount, market_id, asset_address).call(\n            &mut context,\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _repay(owner: AztecAddress, amount: u128, market_id: Field, asset_address: AztecAddress) {\n        let asset_loc = storage.market_assets.at(market_id).at(asset_address);\n        let asset: Asset = asset_loc.read();\n        assert(asset.asset_address == asset_address, \"Invalid asset or market id\");\n\n        Lending::at(context.this_address()).update_accumulators(market_id, asset_address).call(&mut context);\n\n        let scaled_user_borrowed_amount_loc = storage.scaled_borrowed_assets.at(market_id).at(asset_address).at(owner);\n        let scaled_user_borrowed_amount: u128 = scaled_user_borrowed_amount_loc.read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n        let scaled_amount = (amount * 1000000000 as u128) / borrow_accumulator.value;\n\n        assert(scaled_user_borrowed_amount >= scaled_amount, \"Insufficient balance\");\n        scaled_user_borrowed_amount_loc.write(scaled_user_borrowed_amount - scaled_amount);\n\n        let scaled_total_borrowed_asset_loc = storage.scaled_total_borrowed_assets.at(market_id).at(asset_address);\n        let scaled_total_borrowed_asset: u128 = scaled_total_borrowed_asset_loc.read();\n        scaled_total_borrowed_asset_loc.write(scaled_total_borrowed_asset - scaled_amount);\n    }\n\n     #[private]\n    fn borrow_private(secret: Field, to: AztecAddress, amount: u128, market_id: Field, asset_address: AztecAddress) {\n        let on_behalf_of = compute_identifier(secret, 0, context.msg_sender().to_field());\n        let _ = Lending::at(context.this_address())\n            ._borrow(AztecAddress::from_field(on_behalf_of), to, amount, market_id, asset_address)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    fn borrow_public(to: AztecAddress, amount: u128, market_id: Field, asset_address: AztecAddress) {\n        let _ = Lending::at(context.this_address())._borrow(context.msg_sender(), to, amount, market_id, asset_address).call(\n            &mut context,\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _borrow(owner: AztecAddress, to: AztecAddress, amount: u128, market_id: Field, asset_address: AztecAddress) {\n        let asset_loc = storage.market_assets.at(market_id).at(asset_address);\n        let asset: Asset = asset_loc.read();\n\n        assert(asset.is_borrowable, \"Asset is not borrowable\");\n\n        let total_collateral_value: u128 = Lending::at(context.this_address())._compute_total_collateral_value(market_id, owner).call(&mut context);\n        \n        let total_min_collateral_value = Lending::at(context.this_address())._compute_total_min_collateral_value(market_id, owner).call(&mut context);\n\n        let borrow_price = PriceFeed::at(asset.oracle).get_price(0).view(&mut context).price;\n        let min_collateral_for_borrow = (amount * borrow_price * 10000 as u128) / (asset.loan_to_value * 1000000000 as u128);\n\n        assert(total_min_collateral_value + min_collateral_for_borrow <= total_collateral_value, \"Insufficient collateral\");\n        \n        let scaled_user_borrowed_amount_loc = storage.scaled_borrowed_assets.at(market_id).at(asset_address).at(owner);\n        let scaled_user_borrowed_amount: u128 = scaled_user_borrowed_amount_loc.read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n        let scaled_amount = (amount * 1000000000 as u128) / borrow_accumulator.value;\n        scaled_user_borrowed_amount_loc.write(scaled_user_borrowed_amount + scaled_amount);\n\n        let scaled_total_borrowed_asset_loc = storage.scaled_total_borrowed_assets.at(market_id).at(asset_address);\n        let scaled_total_borrowed_asset: u128 = scaled_total_borrowed_asset_loc.read();\n        scaled_total_borrowed_asset_loc.write(scaled_total_borrowed_asset + scaled_amount);\n        \n        let _ = Token::at(asset_address)\n            .transfer_in_public(context.this_address(), to, amount, 0)\n            .call(&mut context);\n    }\n\n    #[private]\n    fn withdraw_private(secret: Field, to: AztecAddress, amount: u128, market_id: Field, collateral_asset: AztecAddress) {\n        let on_behalf_of = compute_identifier(secret, 0, context.msg_sender().to_field());\n        Lending::at(context.this_address())\n            ._withdraw(AztecAddress::from_field(on_behalf_of), to, amount, market_id, collateral_asset)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    fn withdraw_public(to: AztecAddress, amount: u128, market_id: Field, collateral_asset: AztecAddress) {\n        let _ = Lending::at(context.this_address())\n            ._withdraw(context.msg_sender(), to, amount, market_id, collateral_asset)\n            .call(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _withdraw(owner: AztecAddress, to: AztecAddress, amount: u128, market_id: Field, collateral_asset: AztecAddress) {\n        let asset_loc = storage.market_assets.at(market_id).at(collateral_asset);\n        let asset: Asset = asset_loc.read();\n        assert(asset.asset_address == collateral_asset, \"Invalid asset or market id\");\n        \n        Lending::at(context.this_address()).update_accumulators(market_id, collateral_asset).call(&mut context);\n\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(collateral_asset);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n\n        let scaled_user_deposited_amount_loc = storage.scaled_deposited_assets.at(market_id).at(collateral_asset).at(owner);\n        let scaled_user_deposited_amount: u128 = scaled_user_deposited_amount_loc.read();\n        let user_deposited_amount = (scaled_user_deposited_amount * deposit_accumulator.value) / 1000000000 as u128 ;\n        assert(user_deposited_amount >= amount, \"Insufficient balance\");\n\n        let total_collateral_value: u128 = Lending::at(context.this_address())._compute_total_collateral_value(market_id, owner).call(&mut context);\n\n        let total_min_collateral_value = Lending::at(context.this_address())._compute_total_min_collateral_value(market_id, owner).call(&mut context);\n\n        let collateral_price = PriceFeed::at(asset.oracle).get_price(0).view(&mut context).price;\n        let withdraw_amount_value = (amount * collateral_price) / 10000 as u128;\n\n        let total_collateral_value_after_withdraw = total_collateral_value - withdraw_amount_value;\n\n        assert(total_min_collateral_value <= total_collateral_value_after_withdraw, \"Insufficient collateral\");\n\n        let scaled_withdraw_amount = (amount * 1000000000 as u128) / deposit_accumulator.value;\n        scaled_user_deposited_amount_loc.write(scaled_user_deposited_amount - scaled_withdraw_amount);\n\n        let scaled_total_deposited_asset_loc = storage.scaled_total_deposited_assets.at(market_id).at(collateral_asset);\n        let scaled_total_deposited_asset: u128 = scaled_total_deposited_asset_loc.read();\n        scaled_total_deposited_asset_loc.write(scaled_total_deposited_asset - scaled_withdraw_amount);\n\n        let _ = Token::at(collateral_asset)\n            .transfer_in_public(context.this_address(), to, amount, 0)\n            .call(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _compute_total_collateral_value(market_id: Field, owner: AztecAddress) -> u128 {\n        let mut total_collateral_value: u128 = 0 as u128;\n\n        let market_assets_list_len_loc = storage.market_assets_list_len.at(market_id);\n        let market_assets_list_len: u64 = market_assets_list_len_loc.read();\n        let market_assets_list_loc = storage.market_assets_list.at(market_id);\n\n        for i in 0..market_assets_list_len {\n            let market_asset_loc = market_assets_list_loc.at(i);\n            let market_asset: AztecAddress = market_asset_loc.read();\n            let collateral_asset_loc = storage.market_assets.at(market_id).at(market_asset);\n            let collateral_asset: Asset = collateral_asset_loc.read();\n            let collateral_price = PriceFeed::at(collateral_asset.oracle).get_price(0).view(&mut context).price;\n            let scaled_collateral_amount_loc = storage.scaled_deposited_assets.at(market_id).at(market_asset).at(owner);\n            let scaled_collateral_amount: u128 = scaled_collateral_amount_loc.read();\n            let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(market_asset);\n            let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n            let collateral_amount = (scaled_collateral_amount * deposit_accumulator.value) / 1000000000 as u128;\n            total_collateral_value += (collateral_amount * collateral_price);\n        }\n        total_collateral_value / 1000000000 as u128\n    }\n\n    #[public]\n    #[internal]\n    fn _compute_total_min_collateral_value(market_id: Field, owner: AztecAddress) -> u128 {\n        let mut min_collateral_value: u128 = 0 as u128;\n\n        let market_assets_list_len_loc = storage.market_assets_list_len.at(market_id);\n        let market_assets_list_len: u64 = market_assets_list_len_loc.read();\n        let market_assets_list_loc = storage.market_assets_list.at(market_id);\n\n        for i in 0..market_assets_list_len {\n            let market_asset_loc = market_assets_list_loc.at(i);\n            let market_asset: AztecAddress = market_asset_loc.read();\n            let debt_asset_loc = storage.market_assets.at(market_id).at(market_asset);\n            let debt_asset: Asset = debt_asset_loc.read();\n            if(debt_asset.is_borrowable) {\n                let scaled_user_borrowed_amount_loc = storage.scaled_borrowed_assets.at(market_id).at(market_asset).at(owner);\n                let scaled_user_borrowed_amount: u128 = scaled_user_borrowed_amount_loc.read();\n                let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(market_asset);\n                let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n                let user_borrowed_amount = (scaled_user_borrowed_amount * borrow_accumulator.value) / 1000000000 as u128;\n                \n                let borrow_price= PriceFeed::at(debt_asset.oracle).get_price(0).view(&mut context).price;\n\n                min_collateral_value += (user_borrowed_amount * borrow_price * 10000 as u128) / debt_asset.loan_to_value;\n            }\n        }\n        min_collateral_value / 1000000000 as u128\n    }\n\n    #[private]\n    fn deposit_private(\n        from: AztecAddress,\n        amount: u128,\n        nonce: Field,\n        secret: Field,\n        on_behalf_of: Field,\n        market_id: Field,\n        collateral_asset: AztecAddress,\n    ) {\n        let on_behalf_of =\n            compute_identifier(secret, on_behalf_of, context.msg_sender().to_field());\n        let _res = Token::at(collateral_asset)\n            .transfer_to_public(from, context.this_address(), amount, nonce)\n            .call(&mut context);\n        Lending::at(context.this_address())\n            ._deposit(AztecAddress::from_field(on_behalf_of), amount, market_id,collateral_asset)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    fn deposit_public(\n        amount: u128,\n        nonce: Field,\n        on_behalf_of: Field,\n        market_id: Field,\n        collateral_asset: AztecAddress,\n    ) {\n        // docs:start:public_to_public_call\n        let _ = Token::at(collateral_asset)\n            .transfer_in_public(context.msg_sender(), context.this_address(), amount, nonce)\n            .call(&mut context);\n        // docs:end:public_to_public_call\n        let _ = Lending::at(context.this_address())\n            ._deposit(AztecAddress::from_field(on_behalf_of), amount, market_id, collateral_asset)\n            .call(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _deposit(owner: AztecAddress, amount: u128, market_id: Field, collateral_asset: AztecAddress) {\n        let asset_loc = storage.market_assets.at(market_id).at(collateral_asset);\n        let asset: Asset = asset_loc.read();\n        assert(asset.asset_address == collateral_asset, \"Invalid asset or market id\");\n        \n        Lending::at(context.this_address()).update_accumulators(market_id, collateral_asset).call(&mut context);\n\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(collateral_asset);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n\n        let total_deposited_assets = Lending::at(context.this_address()).compute_total_deposited_assets(market_id, collateral_asset, deposit_accumulator).call(&mut context);\n        assert((total_deposited_assets + amount) < asset.deposit_cap, \"Deposit cap exceeded\");\n\n        let scaled_user_deposited_asset_loc = storage.scaled_deposited_assets.at(market_id).at(collateral_asset).at(owner);\n        let scaled_user_deposited_asset: u128 = scaled_user_deposited_asset_loc.read();\n        let scaled_amount = (amount * 1000000000 as u128) / deposit_accumulator.value;\n        scaled_user_deposited_asset_loc.write(scaled_user_deposited_asset + scaled_amount);\n\n        let scaled_total_deposited_asset_loc = storage.scaled_total_deposited_assets.at(market_id).at(collateral_asset);\n        let scaled_total_deposited_asset: u128 = scaled_total_deposited_asset_loc.read();\n        scaled_total_deposited_asset_loc.write(scaled_total_deposited_asset + scaled_amount);\n    }\n\n    #[public]\n    fn compute_total_deposited_assets(market_id: Field, asset_address: AztecAddress, deposit_accumulator: Accumulator) -> u128 {\n        let scaled_total_deposited_asset_static = storage.scaled_total_deposited_assets.at(market_id).at(asset_address).read();\n        let total_deposited_asset = scaled_total_deposited_asset_static * deposit_accumulator.value / 1000000000 as u128;\n        total_deposited_asset\n    }\n\n    #[public]\n    fn add_asset(market_id: Field, asset_address: AztecAddress, oracle: AztecAddress, loan_to_value: u128, is_borrowable: bool, optimal_utilization_rate: u128, under_optimal_slope: u128, over_optimal_slope: u128, deposit_cap: u128) {\n        let asset_loc = storage.market_assets.at(market_id).at(asset_address);\n        let asset: Asset = asset_loc.read();\n\n        assert(loan_to_value <= (10000 as u128));\n\n        asset_loc.write(Asset {\n            asset_address,\n            oracle,\n            loan_to_value,\n            is_borrowable,\n            optimal_utilization_rate,\n            under_optimal_slope,\n            over_optimal_slope,\n            deposit_cap,\n        });\n\n        let market_assets_list_len_loc = storage.market_assets_list_len.at(market_id);\n        let market_assets_list_len: u64 = market_assets_list_len_loc.read();\n        let market_assets_list_loc = storage.market_assets_list.at(market_id).at(market_assets_list_len);\n        market_assets_list_loc.write(asset_address);\n        market_assets_list_len_loc.write(market_assets_list_len + 1);\n\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(asset_address);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n\n        assert(deposit_accumulator.last_updated_ts == 0);\n        assert(deposit_accumulator.value == 0 as u128);\n\n        deposit_accumulator_loc.write(Accumulator {\n            // 10**9\n            value: 1000000000 as u128,\n            last_updated_ts: context.timestamp(),\n        });\n\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n\n        assert(borrow_accumulator.last_updated_ts == 0);\n        assert(borrow_accumulator.value == 0 as u128);\n\n        borrow_accumulator_loc.write(Accumulator {\n            // 10**9\n            value: 1000000000 as u128,\n            last_updated_ts: context.timestamp(),\n        });\n    }\n\n\n    // Create a position.\n    #[public]\n    fn update_accumulators(market_id: Field, asset_address: AztecAddress) {\n        let asset_loc = storage.market_assets.at(market_id).at(asset_address);\n        let asset: Asset = asset_loc.read();\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(asset_address);\n        let mut deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let mut borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n\n        let timestamp = context.timestamp();\n        let time_delta = timestamp - deposit_accumulator.last_updated_ts;\n\n        // Only update if time has passed.\n        if !(time_delta == 0) {\n            let precision = 1000000000 as u128; // 10**9\n            let utilization_rate = _compute_utilization_rate(market_id, asset_address, precision, deposit_accumulator, borrow_accumulator);\n            let borrow_rate_per_year = _compute_borrow_rate(asset, utilization_rate, precision);\n            // TODO: let supply_rate_per_year = borrow_rate_per_year * utilization_rate * (1 - reserve_factor);\n            let supply_rate_per_year = (borrow_rate_per_year * utilization_rate) / precision;\n\n            let new_borrow_accumulator = ((borrow_accumulator.value * borrow_rate_per_year * time_delta as u128) / 31536000 as u128) / precision;\n            let new_deposit_accumulator = ((deposit_accumulator.value * supply_rate_per_year * time_delta as u128) / 31536000 as u128) / precision;\n\n            borrow_accumulator.value += new_borrow_accumulator;\n            borrow_accumulator.last_updated_ts = timestamp;\n            borrow_accumulator_loc.write(borrow_accumulator);\n            deposit_accumulator.value += new_deposit_accumulator;\n            deposit_accumulator.last_updated_ts = timestamp;\n            deposit_accumulator_loc.write(deposit_accumulator);\n        }\n    }\n\n    #[public]\n    #[internal]\n    fn _compute_utilization_rate(market_id: Field, asset_address: AztecAddress, precision: u128, deposit_accumulator: Accumulator, borrow_accumulator: Accumulator) -> u128 {\n        \n        let scaled_total_deposited_asset = storage.scaled_total_deposited_assets.at(market_id).at(asset_address).read();\n        let scaled_total_borrowed_asset = storage.scaled_total_borrowed_assets.at(market_id).at(asset_address).read();\n\n        let total_deposited_assets = (scaled_total_deposited_asset * deposit_accumulator.value) / precision;\n        let total_borrowed_assets = (scaled_total_borrowed_asset * borrow_accumulator.value) / precision;\n        let mut utilization_rate = 0 as u128;\n        if (total_borrowed_assets != 0) {\n            utilization_rate = (total_borrowed_assets * precision) / total_deposited_assets;\n        } else {\n            utilization_rate = 0;\n        }\n\n        utilization_rate\n    }\n\n    #[public]\n    #[internal]\n    fn _compute_borrow_rate(asset: Asset, utilization_rate: u128, precision: u128) -> u128 {\n        let mut rate = 0 as u128;\n        if utilization_rate < asset.optimal_utilization_rate {\n            // rate = base + utilization * slope1 / optimal No base for now\n            rate = (utilization_rate * asset.under_optimal_slope) / asset.optimal_utilization_rate;\n        } else {\n            // rate = base +slope1 + (utilization - optimal) * slope2 / (1 - optimal) No base for now\n            rate = asset.under_optimal_slope + (utilization_rate - asset.optimal_utilization_rate) * asset.over_optimal_slope / (precision - asset.optimal_utilization_rate);\n        }\n        rate\n    }\n\n    #[utility]\n    #[view]\n    unconstrained fn get_position(owner: AztecAddress, market_id: Field, asset_address: AztecAddress) -> pub Position {\n        let scaled_user_deposited_asset_loc = storage.scaled_deposited_assets.at(market_id).at(asset_address).at(owner);\n        let scaled_user_deposited_asset: u128 = scaled_user_deposited_asset_loc.read();\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(asset_address);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n        let collateral = (scaled_user_deposited_asset * deposit_accumulator.value) / 1000000000 as u128;\n        let scaled_user_borrowed_amount_loc = storage.scaled_borrowed_assets.at(market_id).at(asset_address).at(owner);\n        let scaled_user_borrowed_amount: u128 = scaled_user_borrowed_amount_loc.read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n        let debt = (scaled_user_borrowed_amount * borrow_accumulator.value) / 1000000000 as u128;\n        Position { collateral, scaled_debt:scaled_user_borrowed_amount, debt }\n    }\n\n    #[utility]\n    #[view]\n    unconstrained fn get_total_deposited_assets(market_id: Field, asset_address: AztecAddress) -> u128 {\n        let scaled_total_deposited_asset = storage.scaled_total_deposited_assets.at(market_id).at(asset_address).read();\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(asset_address);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n        let total_deposited_assets = (scaled_total_deposited_asset * deposit_accumulator.value) / 1000000000 as u128;\n        total_deposited_assets\n    }\n\n    #[utility]\n    #[view]\n    unconstrained fn get_total_borrowed_assets(market_id: Field, asset_address: AztecAddress) -> u128 {\n        let scaled_total_borrowed_asset = storage.scaled_total_borrowed_assets.at(market_id).at(asset_address).read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n        let total_borrowed_assets = (scaled_total_borrowed_asset * borrow_accumulator.value) / 1000000000 as u128;\n        total_borrowed_assets\n    }\n\n\n    #[utility]\n    #[view]\n    unconstrained fn get_accumulators(market_id: Field, asset_address: AztecAddress) -> (Accumulator, Accumulator) {\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(asset_address);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n        (deposit_accumulator, borrow_accumulator)\n    }\n}\n","path":"/home/jean/work/noir/lending/contracts/src/main.nr"},"56":{"source":"use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/capsules/mod.nr"},"57":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static: true }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr"},"64":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"65":{"source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"66":{"source":"use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr"},"67":{"source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/utility_context.nr"},"71":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/hash.nr"},"88":{"source":"use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"92":{"source":"use crate::{\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_notes` utility function PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    // TODO(https://github.com/noir-lang/noir/issues/7912): Doing the following unfortunately doesn't work. Once\n    // the issue is fixed uncomment the following and remove the workaround from TS (look for the issue link in the\n    // codebase).\n    // let utility: fn(FunctionDefinition) -> () = crate::macros::functions::utility;\n    // quote {\n    //     #[$utility]\n    //     unconstrained fn sync_notes() {\n    //     }\n    // }\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[aztec::macros::functions::utility]\n        unconstrained fn sync_notes() { }\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/aztec.nr"},"93":{"source":"use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr"},"96":{"source":"use crate::macros::utils::{\n    add_to_field_slice, AsStrQuote, compute_fn_selector, is_fn_private, is_fn_view,\n};\nuse std::meta::{type_of, unquote};\n\ncomptime global FROM_FIELD: TypedExpr = {\n    let from_field_trait = quote { protocol_types::traits::FromField }.as_trait_constraint();\n    let function_selector_typ =\n        quote { protocol_types::abis::function_selector::FunctionSelector }.as_type();\n    function_selector_typ.get_trait_impl(from_field_trait).unwrap().methods().filter(|m| {\n        m.name() == quote { from_field }\n    })[0]\n        .as_typed_expr()\n};\n\ncomptime global SERIALIZED_ARGS_SLICE_NAME: Quoted = quote { serialized_args };\n\npub comptime fn stub_fn(f: FunctionDefinition) -> Quoted {\n    let is_static_call = is_fn_view(f);\n    let is_void = f.return_type() == type_of(());\n\n    if is_fn_private(f) {\n        if is_static_call {\n            if is_void {\n                create_private_static_void_stub(f)\n            } else {\n                create_private_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_private_void_stub(f)\n            } else {\n                create_private_stub(f)\n            }\n        }\n    } else {\n        if is_static_call {\n            if is_void {\n                create_public_static_void_stub(f)\n            } else {\n                create_public_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_public_void_stub(f)\n            } else {\n                create_public_stub(f)\n            }\n        }\n    }\n}\n\n/// Utility function creating stubs used by all the stub functions in this file.\ncomptime fn create_stub_base(\n    f: FunctionDefinition,\n) -> (Quoted, Quoted, Quoted, Quoted, u32, Field) {\n    let fn_name = f.name();\n    let fn_parameters = f.parameters();\n    let fn_parameters_list =\n        fn_parameters.map(|(name, typ): (Quoted, Type)| quote { $name: $typ }).join(quote {,});\n\n    // Example of what the fold(...) below will generate for `target_address` and `fee_juice_limit_per_tx` function\n    // parameters:\n    // ```\n    // let mut serialized_args =  &[];\n    // serialized_args = serialized_args.append(aztec::protocol_types::traits::Serialize::serialize(target_address));\n    // serialized_args = serialized_args.push_back(fee_juice_limit_per_tx as Field);\n    // ```\n    let serialized_args_slice_construction = fn_parameters.fold(\n        quote {\n            let mut $SERIALIZED_ARGS_SLICE_NAME = &[];\n        },\n        |args, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let arg_to_append = add_to_field_slice(SERIALIZED_ARGS_SLICE_NAME, name, typ);\n            quote {\n                $args\n                $arg_to_append\n            }\n        },\n    );\n\n    let (fn_name_str, _) = fn_name.as_str_quote();\n    let fn_name_len: u32 = unquote!(quote { $fn_name_str.as_bytes().len()});\n    let fn_selector: Field = compute_fn_selector(f);\n\n    (\n        fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len,\n        fn_selector,\n    )\n}\n\ncomptime fn create_private_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_private_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_public_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_public_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/call_interface_stubs.nr"},"97":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr"},"100":{"source":"use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr"},"102":{"source":"use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, &[], true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/notes.nr"},"103":{"source":"use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/storage.nr"},"104":{"source":"use std::meta::unquote;\n\npub(crate) comptime fn get_fn_visibility(f: FunctionDefinition) -> Quoted {\n    if f.has_named_attribute(\"private\") {\n        quote { private }\n    } else if f.has_named_attribute(\"public\") {\n        quote { public }\n    } else {\n        panic(f\"Function is neither private nor public\")\n    }\n}\n\npub(crate) comptime fn is_fn_private(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"private\")\n}\n\npub(crate) comptime fn is_fn_public(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"public\")\n}\n\npub(crate) comptime fn is_fn_utility(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"utility\")\n}\n\npub(crate) comptime fn is_fn_contract_library_method(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"contract_library_method\")\n}\n\npub(crate) comptime fn is_fn_test(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"test\")\n}\n\npub(crate) comptime fn is_fn_view(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"view\")\n}\n\npub(crate) comptime fn is_fn_internal(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"internal\")\n}\n\npub(crate) comptime fn is_fn_initializer(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"initializer\")\n}\n\npub(crate) comptime fn fn_has_noinitcheck(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"noinitcheck\")\n}\n\n/// Takes a function body as a collection of expressions, and alters it by prepending and appending quoted values.\npub(crate) comptime fn modify_fn_body(body: [Expr], prepend: Quoted, append: Quoted) -> Expr {\n    // We need to quote the body before we can alter its contents, so we fold it by quoting each expression.\n    let mut body_quote = body.fold(quote {}, |full_quote: Quoted, expr: Expr| {\n        let expr_quote = expr.quoted();\n        quote {\n                $full_quote\n                $expr_quote\n            }\n    });\n    body_quote = quote {\n        {\n            $prepend\n            $body_quote\n            $append\n        }\n    };\n    let body_expr = body_quote.as_expr();\n    body_expr.expect(f\"Body is not an expression: {body_quote}\")\n}\n\npub(crate) comptime fn add_to_field_slice(slice_name: Quoted, name: Quoted, typ: Type) -> Quoted {\n    if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        quote { $slice_name = $slice_name.push_back($name as Field); }\n    } else if typ.as_data_type().is_some() {\n        // We invoke serialize as a static trait function rather than calling $name.serialize() directly in the quote\n        // to avoid \"trait not in scope\" compiler warnings.\n        quote { $slice_name = $slice_name.append(aztec::protocol_types::traits::Serialize::serialize($name)); }\n    } else if typ.as_array().is_some() {\n        let (element_type, _) = typ.as_array().unwrap();\n        let serialized_name = f\"{name}_serialized\".quoted_contents();\n        // We invoke serialize as a static trait function rather than calling x.serialize() directly in the quote\n        // to avoid \"trait not in scope\" compiler warnings.\n        quote {\n            let $serialized_name = $name.map(|x: $element_type | aztec::protocol_types::traits::Serialize::serialize(x));\n            for i in 0..$name.len() {\n                $slice_name = $slice_name.append($serialized_name[i].as_slice());\n            }\n        }\n    } else if typ.as_str().is_some() {\n        quote {\n            $slice_name = $slice_name.append($name.as_bytes().map(| byte: u8 | byte as Field).as_slice());\n        }\n    } else {\n        panic(\n            f\"Cannot add to slice: unsupported type {typ} variable {name}\",\n        )\n    }\n}\n\n/// Adds a value to a hash::ArgsHasher. Structs and values inside arrays are required to implement the Serialize trait.\npub(crate) comptime fn add_to_hasher(hasher_name: Quoted, name: Quoted, typ: Type) -> Quoted {\n    if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        quote { $hasher_name.add($name as Field); }\n    } else if typ.as_data_type().is_some() {\n        quote { $hasher_name.add_multiple(dep::aztec::protocol_types::traits::Serialize::serialize($name)); }\n    } else if typ.as_array().is_some() {\n        let (element_type, _) = typ.as_array().unwrap();\n        let serialized_name = f\"{name}_serialized\".quoted_contents();\n        quote {\n           let $serialized_name = $name.map(|x: $element_type | dep::aztec::protocol_types::traits::Serialize::serialize(x));\n            for i in 0..$name.len() {\n                $hasher_name.add_multiple($serialized_name[i]);\n            }\n        }\n    } else if typ.as_str().is_some() {\n        quote {\n            $hasher_name.add_multiple($name.as_bytes().map(| byte: u8 | byte as Field));\n        }\n    } else {\n        panic(\n            f\"Cannot add to hasher: unsupported type {typ} of variable {name}\",\n        )\n    }\n}\n\ncomptime fn signature_of_type(typ: Type) -> Quoted {\n    if typ.is_field() {\n        quote {Field}\n    } else if typ.as_integer().is_some() {\n        let (is_signed, bit_size) = typ.as_integer().unwrap();\n        if is_signed {\n            f\"i{bit_size}\".quoted_contents()\n        } else {\n            f\"u{bit_size}\".quoted_contents()\n        }\n    } else if typ.is_bool() {\n        quote {bool}\n    } else if typ.as_str().is_some() {\n        let str_len_typ = typ.as_str().unwrap();\n        let str_len = str_len_typ.as_constant().unwrap();\n        f\"str<{str_len}>\".quoted_contents()\n    } else if typ.as_array().is_some() {\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let element_typ_quote = signature_of_type(element_type);\n        f\"[{element_typ_quote};{array_len}]\".quoted_contents()\n    } else if typ.as_data_type().is_some() {\n        let (s, generics) = typ.as_data_type().unwrap();\n        let field_signatures = s\n            .fields(generics)\n            .map(|(_, typ): (Quoted, Type)| signature_of_type(typ))\n            .join(quote {,});\n        f\"({field_signatures})\".quoted_contents()\n    } else if typ.as_tuple().is_some() {\n        // Note that tuples are handled the same way as structs\n        let types = typ.as_tuple().unwrap();\n        let field_signatures = types.map(|typ: Type| signature_of_type(typ)).join(quote {,});\n        f\"({field_signatures})\".quoted_contents()\n    } else {\n        panic(f\"Unsupported type {typ}\")\n    }\n}\n\npub(crate) trait AsStrQuote {\n    fn as_str_quote(self) -> (Self, u32);\n}\n\nimpl<let N: u32, Env> AsStrQuote for Quoted {\n    // Used to convert an arbitrary quoted type into a quoted string, removing whitespace between tokens\n    comptime fn as_str_quote(self) -> (Quoted, u32) {\n        let tokens = self.tokens();\n        let mut acc: [u8] = &[];\n        let mut total_len: u32 = 0;\n        for token in tokens {\n            let token_as_fmt_str = f\"{token}\";\n            let token_as_str = unquote!(quote {$token_as_fmt_str});\n            let token_len = unquote!(quote { $token_as_str.as_bytes().len() });\n            let token_as_bytes = unquote!(quote { $token_as_str.as_bytes().as_slice() });\n            total_len += token_len;\n            acc = acc.append(token_as_bytes);\n        }\n        let result = unquote!(\n            quote {\n                let signature_as_array: [u8; $total_len] = $acc.as_array();\n                signature_as_array.as_str_unchecked()\n            },\n        );\n        (quote { $result }, total_len)\n    }\n}\n\npub(crate) comptime fn compute_fn_selector(f: FunctionDefinition) -> Field {\n    // The function selector is computed from the function signature, which is made up of the function name and types of\n    // parameters, but not including the return type. For example, given:\n    //\n    // fn foo(a: Field, b: AztecAddress) -> Field\n    //\n    // The signature will be \"foo(Field,AztecAddress)\".\n    let fn_name = f.name();\n    let args_signatures =\n        f.parameters().map(|(_, typ): (Quoted, Type)| signature_of_type(typ)).join(quote {,});\n    let signature_quote = quote { $fn_name($args_signatures) };\n    let (signature_str_quote, _) = signature_quote.as_str_quote();\n\n    let computation_quote = quote {\n        protocol_types::traits::ToField::to_field(protocol_types::abis::function_selector::FunctionSelector::from_signature($signature_str_quote))\n    };\n    unquote!(computation_quote)\n}\n\npub(crate) comptime fn compute_event_selector(s: TypeDefinition) -> Field {\n    // The event selector is computed from the type signature of the struct in the event, similar to how one might type\n    // the constructor function. For example, given:\n    //\n    // struct Foo {\n    //   a: Field,\n    //   b: AztecAddress,\n    // }\n    //\n    // The signature will be \"Foo(Field,AztecAddress)\".\n    let event_name = s.name();\n    let args_signatures = s\n        .fields_as_written()\n        .map(|(_, typ): (Quoted, Type)| {\n            // signature_of_type can handle structs, so this supports nested structs\n            // FIXME: Field generics are not handled here!\n            signature_of_type(typ)\n        })\n        .join(quote {,});\n    let signature_quote = quote { $event_name($args_signatures) };\n    let (signature_str_quote, _) = signature_quote.as_str_quote();\n\n    let computation_quote = quote {\n        protocol_types::traits::ToField::to_field(protocol_types::abis::event_selector::EventSelector::from_signature($signature_str_quote))\n    };\n    unquote!(computation_quote)\n}\n\n/// Returns how many storage slots a type needs to reserve for itself. State variables must implement the Storage trait\n/// for slots to be allocated for them.\npub(crate) comptime fn get_storage_size(typ: Type) -> u32 {\n    // We create a type variable for the storage size. We can't simply read the value used in the implementation because\n    // it may not be a constant (e.g. N + 1). We then bind it to the implementation of the Storage trait.\n    let storage_size = std::meta::typ::fresh_type_variable();\n    assert(\n        typ.implements(quote { crate::state_vars::Storage<$storage_size> }.as_trait_constraint()),\n        f\"Attempted to fetch storage size, but {typ} does not implement the Storage trait\",\n    );\n\n    storage_size.as_constant().unwrap()\n}\n\npub(crate) comptime fn module_has_storage(m: Module) -> bool {\n    m.structs().any(|s: TypeDefinition| {\n        s.has_named_attribute(\"storage\") | s.has_named_attribute(\"storage_no_init\")\n    })\n}\n\npub(crate) comptime fn module_has_initializer(m: Module) -> bool {\n    m.functions().any(|f: FunctionDefinition| is_fn_initializer(f))\n}\n\npub(crate) comptime fn is_note(typ: Type) -> bool {\n    typ.as_data_type().map_or(false, |struc: (TypeDefinition, [Type])| {\n        let (def, _) = struc;\n        def.has_named_attribute(\"note\")\n            | def.has_named_attribute(\"partial_note\")\n            | def.has_named_attribute(\"custom_note\")\n    })\n}\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `noir-protocol-circuits/crates/types/src/meta/mod.nr`. We maintain separate\n/// copies because importing it here from there would cause the `target_trait` to be interpreted in the context\n/// of the protocol circuits types crate, making it impossible to compile code for traits from this crate\n/// (e.g. NoteType).\npub(crate) comptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Type does not implement trait\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/utils.nr"},"105":{"source":"use protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr"},"106":{"source":"use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash =\n            compute_unique_note_hash(nonce, compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash));\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.nonce, note_and_data.nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == first_note_and_data.nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == second_note_and_data.nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr"},"107":{"source":"use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    pending_partial_notes.for_each(|i, pending_partial_note: DeliveredPendingPartialNote| {\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log sans the extra\n            // fields) to get the complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                // temporary node connectivity issue - is simply throwing good enough here?\n                assert(\n                    deliver_note(\n                        contract_address,\n                        pending_partial_note.storage_slot,\n                        discovered_note.nonce,\n                        complete_packed_note,\n                        discovered_note.note_hash,\n                        discovered_note.inner_nullifier,\n                        log.tx_hash,\n                        pending_partial_note.recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr"},"109":{"source":"use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{\n            ComputeNoteHashAndNullifier,\n            partial_notes::process_partial_note_private_msg,\n            pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n            private_notes::process_private_note_msg,\n        },\n        encoding::decode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        msg_type::{\n            PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n        },\n    },\n    oracle::{logs::store_private_event_log, message_discovery::sync_notes},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `syncNotes` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    sync_notes(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get the logs from the capsule array and process them one by one\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    logs.for_each(|i, log: PendingTaggedLog| {\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n        logs.remove(i);\n    });\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(log_plaintext);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            pending_tagged_log.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        // In the case of events, the msg metadata is the event selector.\n        let event_selector = EventSelector::from_field(msg_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            msg_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n            pending_tagged_log.tx_index_in_block,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_logs.nr"},"110":{"source":"use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n        // issue, and we should perhaps not have marked the tag index as taken.\n        assert(\n            oracle::message_discovery::deliver_note(\n                contract_address,\n                storage_slot,\n                discovered_note.nonce,\n                packed_note,\n                discovered_note.note_hash,\n                discovered_note.inner_nullifier,\n                tx_hash,\n                recipient,\n            ),\n            \"Failed to deliver note\",\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr"},"111":{"source":"// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\nglobal MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/encoding.nr"},"112":{"source":"use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr"},"133":{"source":"use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr"},"136":{"source":"use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"139":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr"},"140":{"source":"use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr"},"141":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(notifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"142":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"143":{"source":"/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr"},"144":{"source":"use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"149":{"source":"use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"150":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"151":{"source":"use crate::messages::encoding::MAX_MESSAGE_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        msg_content,\n        tx_hash,\n        log_index_in_tx,\n        tx_index_in_block,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr"},"152":{"source":"use crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn sync_notes(pending_tagged_log_array_base_slot: Field) {\n    sync_notes_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr"},"154":{"source":"use crate::{\n    note::{note_interface::NoteType, note_metadata::NoteMetadata, retrieved_note::RetrievedNote},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::IndexedTaggingSecret,\n    traits::{FromField, Packable},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {\n    // This wrapper exists to extract the ORACLE_RETURN_FIELD_LENGTH generic numeric param into a value and pass it to\n    // the oracle, so that it knows how big the return array must be.\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        ORACLE_RETURN_FIELD_LENGTH,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let MAX_NOTES: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    _placeholder_fields: [Field; ORACLE_RETURN_FIELD_LENGTH], // TODO: Compute this value automatically from MAX_NOTES\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let fields: [_; ORACLE_RETURN_FIELD_LENGTH] = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n\n    let mut opt_notes = [Option::none(); MAX_NOTES];\n    for i in 0..opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let maybe_nonce = fields[read_offset];\n            let maybe_note_hash_counter = fields[read_offset + 1] as u32;\n            let packed_note = array::subarray(fields, read_offset + 2);\n\n            let note = Note::unpack(packed_note);\n            let retrieved_note = RetrievedNote {\n                note,\n                contract_address,\n                metadata: NoteMetadata::from_raw_data(maybe_note_hash_counter != 0, maybe_nonce),\n            };\n\n            opt_notes[i] = Option::some(retrieved_note);\n        };\n    }\n    opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"156":{"source":"use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr"},"157":{"source":"use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"159":{"source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"168":{"source":"use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"182":{"source":"/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/append.nr"},"185":{"source":"/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr"},"186":{"source":"use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr"},"188":{"source":"use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr"},"189":{"source":"// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr"},"191":{"source":"use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/field.nr"},"193":{"source":"use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/point.nr"},"221":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr"},"223":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"266":{"source":"use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"269":{"source":"use crate::{\n    address::{aztec_address::AztecAddress, salted_initialization_hash::SaltedInitializationHash},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    pub inner: Field,\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress,\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer),\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n    ) -> Self {\n        PartialAddress::from_field(poseidon2_hash_with_separator(\n            [contract_class_id.to_field(), salted_initialization_hash.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr"},"271":{"source":"use crate::{\n    address::aztec_address::AztecAddress, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    pub inner: Field,\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(poseidon2_hash_with_separator(\n            [salt, initialization_hash, deployer.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr"},"276":{"source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress},\n    constants::CONTRACT_INSTANCE_LENGTH,\n    contract_class_id::ContractClassId,\n    public_keys::PublicKeys,\n    traits::{Deserialize, FromField, Hash, Serialize, ToField},\n};\n\npub struct ContractInstance {\n    pub salt: Field,\n    pub deployer: AztecAddress,\n    pub contract_class_id: ContractClassId,\n    pub initialization_hash: Field,\n    pub public_keys: PublicKeys,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys.eq(other.public_keys)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        let public_keys_serialized = self.public_keys.serialize();\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            public_keys_serialized[0],\n            public_keys_serialized[1],\n            public_keys_serialized[2],\n            public_keys_serialized[3],\n            public_keys_serialized[4],\n            public_keys_serialized[5],\n            public_keys_serialized[6],\n            public_keys_serialized[7],\n            public_keys_serialized[8],\n            public_keys_serialized[9],\n            public_keys_serialized[10],\n            public_keys_serialized[11],\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys: PublicKeys::deserialize([\n                serialized[4],\n                serialized[5],\n                serialized[6],\n                serialized[7],\n                serialized[8],\n                serialized[9],\n                serialized[10],\n                serialized[11],\n                serialized[12],\n                serialized[13],\n                serialized[14],\n                serialized[15],\n            ]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    pub fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer,\n            ),\n        )\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"283":{"source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr"},"284":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"298":{"source":"use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_data_type().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_data_type().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr"},"300":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"301":{"source":"use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr"},"310":{"source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize, ToField},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr"},"321":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"335":{"source":"use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"339":{"source":"use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr"},"340":{"source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"356":{"source":"pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr"},"359":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"365":{"source":"use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n","path":"/home/jean/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr"},"396":{"source":"use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER},\n        hash::poseidon2_hash_with_separator,\n        traits::{Deserialize, Hash, Packable, Serialize, ToField},\n        utils::arrays::array_concat,\n    },\n};\n\n// UintNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the amount).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n/// A private note representing a numeric value associated to an account (e.g. a token balance).\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct UintNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The number stored in the note.\n    value: u128,\n}\n\nimpl NoteHash for UintNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because UintNote has just one variant (where the value is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            UintPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note = PartialUintNote {\n            commitment: private_content.compute_partial_commitment(storage_slot),\n        };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.value)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: u128, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness }\n    }\n\n    pub fn get_value(self) -> u128 {\n        self.value\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the value, since the note will be later\n    /// completed in public. This is a powerful technique for scenarios in which the value cannot be known in private\n    /// (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// The returned `PartialUintNote` value must be sent to public execution via a secure channel, since it is not\n    /// possible to verify the integrity of its contents due to it hiding information. The recommended ways to do this\n    /// are to retrieve it from public storage, or to receive it in an internal public function call.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` from `sender` so that they can\n    /// discover the note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        sender: AztecAddress,\n    ) -> PartialUintNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = UintPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        let encrypted_log =\n            note::compute_partial_note_log(private_log_content, storage_slot, recipient, sender);\n        context.emit_private_log(encrypted_log);\n\n        PartialUintNote { commitment }\n    }\n}\n\n/// The private content of a partial UintNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct UintPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of UintNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl UintPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            array_concat(self.pack(), [storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateUintPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateUintPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        UintNote::get_id()\n    }\n}\n\n/// A partial instance of a UintNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the value field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the value to the public), resulting in a UintNote that can be used like any other one (except\n/// of course that its value is known).\n#[derive(Packable, Serialize, Deserialize)]\npub struct PartialUintNote {\n    commitment: Field,\n}\n\nimpl PartialUintNote {\n    pub fn commitment(self) -> Field {\n        self.commitment\n    }\n}\n\nimpl PartialUintNote {\n    /// Completes the partial note, creating a new note that can be used like any other UintNote.\n    pub fn complete(self, value: u128, context: &mut PublicContext) {\n        // A note with a value of zero is valid, but we cannot currently complete a partial note with such a value\n        // because this will result in the completion log having its last field set to 0. Public logs currently do not\n        // track their length, and so trailing zeros are simply trimmed. This results in the completion log missing its\n        // last field (the value), and note discovery failing.\n        // TODO(#11636): remove this\n        assert(value != 0, \"Cannot complete a PartialUintNote with a value of 0\");\n\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the value). The contract will later find it by searching\n        //  for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(value));\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    fn compute_note_completion_log(self, value: u128) -> [Field; 2] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, value.to_field()]\n    }\n\n    fn compute_complete_note_hash(self, value: u128) -> Field {\n        // Here we finalize the note hash by including the (public) value into the partial note commitment. Note that we\n        // use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator(\n            [self.commitment, value.to_field()],\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\nmod test {\n    use super::{\n        PartialUintNote, PrivateUintPartialNotePrivateLogContent, UintNote,\n        UintPartialNotePrivateContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Packable},\n            utils::arrays::array_concat,\n        },\n        utils::array::subarray,\n    };\n\n    global value: u128 = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a UintNote has the same note hash as a PartialUintNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = UintNote { value, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialUintNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(value);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular UintNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular UintNote.\n\n        let note = UintNote { value, randomness, owner };\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        let partial_note = PartialUintNote { commitment };\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(value)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in UintNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(value), 1);\n\n        assert_eq(\n            array_concat(private_log_without_public_tag, public_log_without_tag),\n            note.pack(),\n        );\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/uint-note/src/uint_note.nr"}}}