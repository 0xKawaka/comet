{"noir_version":"1.0.0-beta.4+0000000000000000000000000000000000000000","name":"Lending","functions":[{"name":"borrow_public","hash":"10957915482675014587","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"1Zzdbts4EIXfxde+4PyRw77KYlE4iVMYMJzASRZYBHn3lZxI1saq3TI+qnhTVAFnzmdZR4eyKL0u7tY3Lz++b3b3D0+Lb3+9LrYPt6vnzcOu2Xp9Wy5u9pvtdvPj+/DPi9D+w3wY//S42rWbT8+r/fPiGwlbWC7Wu7v2/+LW9LjfbNfNVghvy9PxgbkbHpT70TmNDNYY6WOwxhT6wdFGBrsF+xjsxjQc/PdywXId+py74UR5Onq9Dr15v+/9wr4nS6kbHEXO02fL3UfNUfQzvV2bnvh/9K1GnEAjjWmo525HaabU15iAjwkfpcmcexq9ROOi3WAfmPEnNIl7Gk+fafL4vnHradjP05z/uBLQAoQWYLSAoAUULWBogYgWSGgBRwugnaxoJ+vXncyRutMox5QGsaEHBYYrCFxB4QoGV4hwhQRXcLhCRitYgCvAPW1wTxvc0wb3tH3d01G6OXa043VFjof2Eds+Yds7tn2Gto8B256w7RnbXrDtFdse69qIdW3EujZiXRvh6Zvg6Zvg6Zvg6Zvg6Zvg6ZvgM+oEn1En+Iw6wWfUCe5ph3va4Z52uKcdm8qOTWXHprJjU9mxqezYVHbsXDpj59IZO5fO2Ll0xro2Y12bsa7NWNfmr7uWPHR3jcjJPwtgfZuxvm1uC4L7E7g/g/sLuL+C+xu4fwT3T+D+Du4P9i+B/Utg/xLYvwT2L4H9S2D/Eti/BPYvwa99ieAXv8QBL0F4CcZLCF5C8RKGl4h4iYSXwLub8e4WvLsF724BJ7WAk/oKi7nO9wcntYCTWsBJLeCZtoBn2gqeaSt4pq1g/15hBZeTdkuLXTwPFX5r8AFH54Vj88K5fDLJch6nuXSjfsV8M2s6rjW3sfX1ErRbCS7BYj/4fQkj/cK6s4mBfG5AeWZAv7AIbmIgmhsQzw1I5gakcwOyuQHN7Uxt05+pm1/5O6Bm9BBoJPjEpA++5Cf0XjV9rpk+hqrpqWp6rppeqqbXqumtavo/EJ/987FCg8vkUfrm/njq8JtPHfSEP1XO75Xz57r5U6icnyrnnz53mxEdP1u+xB8p9vxR0gn/9Mkrod//cuns3zB7/4aKkEhO+KfPXnY/8tsl/pQH76hQOuG3yvlj5fypcn6vnD/Xze+hcn6qnJ8r55fK+SvPX688f73y/PXK89crz1+vPH/znPL3ADSnQD0AzSkhD0DTn3I19He89OIlJ7FT31vCyQ2yHCvnT5Xze+X8uWp+Dtc4w4n3z9yRBh7yHzR4Ag2ZQEPxGuOPeJBqX6V2/N2PY3yvSkVVXlSVS6rGH5q4WEVFVVxUJUVVWlQ1/n0dF3U3t4CPztb3ovGV6c0Ny/434RjDSRGVFFkJXiwpKtoRXlKUC4o0lBRRSRGXFEnBlzu+1vZSkZUUxZKiVFLkJUW5oMhKTGglJjQuKSo5IqzkiLDfPiLemq1/VvvN6ma7/nih+/3L7nbwfvfnfx/Xn171/rh/uF3fvezX7Uvfj+97b4nZfCkkDUyLIqRLid7OydqviENcMlG72e58Jm42tWFoOP4D","names":["borrow_public"],"brillig_names":["borrow_public"]},{"name":"deposit_private","hash":"657196385882883935","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"on_behalf_of","type":{"kind":"field"},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"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","debug_symbols":"","names":["deposit_private"],"brillig_names":["discover_new_messages","decompose_hint","store_in_execution_cache_oracle_wrapper","call_private_function_internal","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper","directive_invert"]},{"name":"_deposit","hash":"15290132050209716071","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"951653053333916160":{"error_kind":"string","string":"Deposit cap exceeded"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5235018679007078561":{"error_kind":"string","string":"Invalid asset or market id"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"16022896159229267359":{"error_kind":"string","string":"Function _deposit can only be called internally"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","names":["_deposit"],"brillig_names":["_deposit"]},{"name":"repay_public","hash":"2243361814114891291","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["repay_public"],"brillig_names":["repay_public"]},{"name":"_withdraw","hash":"7880272261759852750","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5235018679007078561":{"error_kind":"string","string":"Invalid asset or market id"},"6787403583199288031":{"error_kind":"string","string":"Insufficient balance"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"10435052277855889085":{"error_kind":"string","string":"Function _withdraw can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"15333773746166717806":{"error_kind":"string","string":"Insufficient collateral"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","names":["_withdraw"],"brillig_names":["_withdraw"]},{"name":"get_position","hash":"7986109410175164344","is_unconstrained":true,"custom_attributes":["utility","view"],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"position::Position","fields":[{"name":"collateral","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"scaled_debt","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"debt","type":{"kind":"integer","sign":"unsigned","width":128}}]},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"7f3briu7dqUJv4uvfRE8k/UqhR+JPLgSBgw74cz8gULC715aS0MhzTVCijG5KPVO9s8Xxtx7ByXya31E9NZCwfg///Df/um//O///p/++V//n3/7n//wf/3f/+cf/uXf/ut//l///G//evlP/+c//vEf/su///O//Ms///f/9Phf/8P2x/9zsfw54H/+j//8r3/85//5v/7zv/+vf/i/3BZd/cd/+Kd//W9//ruUy4f8P//8L//0x3/a/uMfvx1fav46um5xPzaXg0OTT1+HprTdPzb6//j//eNlOnXEdGoot+mk9no6MbSvQ2Ou36fThkynxtt0Wn09nbzd6GSfv00nbSOm07z/OrqFdDKdun0dWrbvYiV3OJ1Q3e0LXGjFnUzHt819HR62/LDo7etb/Ee+JXzkW+JHviV95FvyR76lfORb6ke+pX3iW/L2kW/5yN9+/sjffv7I337+yN9+/sjffv7I337+yN9+/sjffv7I3375yN9++cjffvnI3375yN9++cjffvnI3375yN9++cjffvnI3375yN9+/cjffv3I3379yN9+/cjffv3I3379yN9+/cjffv3I3379yN9+/cjffvvI3377yN9++8jffvvI3377yN9++8jffvvI3377yN9++8jffvvE377fto98i/vIt/iPfEv4yLfEj3xL+si35I98S/nIt9SPfMtH/vbdR/723Uf+9t1H/vbdkL/9sKW8f0t7vOGSrt8SP/It6SPfkj/yLeUj31I/8i1D/vbD5V7e7Vu8b798y/ejL7djbnO6ZPP+4eh2dNezhq+DU3j4G0nXvxG/Ccy/7nc+LxlDPZl/ymW/i5xr2I9O+boAN/sC/OwLCLMvIM6+gDT7AvLsCyizL6DOvoA2+QLC7FfioP9KXOKtcUolxccFHLiL5G6Nk08P0z48uKbbNGp5/C3XoW1x+0/WLm39/YOjPzq43i3OL4f+SVx/67Aacf29zmrEI8Q/TFx/N7kacf3t72rE9ffrqxHXbzBWI67fES1GPOq3cKsRx3N+mjie89PE8ZyfJh4h/mHieM5PE8dzfpo4nvPTxPGcnyaO5/ww8YTn/DRxPOenieM5P00cz/lp4hHiHyaO5/w0cTznp4njOT9NHM/5aeIzeE53J15fQ3R1f+LENR9OPtrFdtvUzqXiHz/6DzZ5BncoxWYGHyfFZgbHJcVm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","names":["get_position"],"brillig_names":["get_position"]},{"name":"_compute_total_min_collateral_value","hash":"14411916803114918222","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7969124557626779129":{"error_kind":"string","string":"Function _compute_total_min_collateral_value can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"","names":["_compute_total_min_collateral_value"],"brillig_names":["_compute_total_min_collateral_value"]},{"name":"withdraw_private","hash":"16557942595650458800","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"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","debug_symbols":"","names":["withdraw_private"],"brillig_names":["discover_new_messages","decompose_hint","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper","directive_invert"]},{"name":"repay_private","hash":"4195526877129225945","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"on_behalf_of","type":{"kind":"field"},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["repay_private"],"brillig_names":["discover_new_messages","decompose_hint","store_in_execution_cache_oracle_wrapper","call_private_function_internal","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper","directive_invert"]},{"name":"sync_notes","hash":"13307775542289704548","is_unconstrained":true,"custom_attributes":["aztec::macros::functions::utility"],"abi":{"parameters":[],"return_type":null,"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"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","debug_symbols":"","names":["sync_notes"],"brillig_names":["sync_notes"]},{"name":"_compute_borrow_rate","hash":"10813834332045066558","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"asset","type":{"kind":"struct","path":"asset::Asset","fields":[{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"loan_to_value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"oracle","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_borrowable","type":{"kind":"boolean"}},{"name":"optimal_utilization_rate","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"under_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"over_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"deposit_cap","type":{"kind":"integer","sign":"unsigned","width":128}}]},"visibility":"private"},{"name":"utilization_rate","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"precision","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17134621154673181869":{"error_kind":"string","string":"Function _compute_borrow_rate can only be called internally"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VYy27TQBT1M42TVq1gwwp2bNjYseO4G1RQQ5q+EAKxAQlN/BAV5aEWEMt8Oh2YKx9uZ1pVsSM8UjVj3+Nzz33M2I1t/R2Dqz9brT24xwdh9tQcrjaiBrnCNnXaHdHpdESn2xGdXkd0+h3R2euIzo2O6Ox3RGfQoE4bdA6uLZR4eRDKQ0ZuYLk5ZOPJosqEBZpAB5p7n9RMeAfsDR5gUcD8NsmfhUmF8bagPw4U57AdfkH8m+3whxuKZ39Z82Ms5NdV83RZ53IKz/iAmQFmBhjkOQDMgYFnDpi5AXMImEMD5ggwRwbMMWCODZgTwJwwzJZa4wbdVxiyOWCbMpsLthfM5oFtxmw+2A6YrQe2ObNtgO2Q2fpgO2I23E/HzIbnCOVHcj206vUjq35GjlOFw9xRz7dx5lydCWVg/Zvzps+0+wb9cgxVHt6qa7m/dtRa/Pz88lv+tSifFcVFeXmJvcT35U3jLpybd+B8wDlPf5yfn1Vn5cX019nl92vcWxpuWjuWPjauC3E4dOeuHHtqDlcbfz4qMYbHapa1ew852eY5eV1+KcqL/6l0FgvFt8zHPA/7iZpl2B/UesvSl0w3y+Fq7lFZda+3Jr/nd26I1dbETvEHTA/mhvBzNctjdsQ4bfa8iZOwDnD5GkzANBA+VbOsz8LA6cBzqIteAVQDj+nbU9fhioP8Uh94oMfT6PEZ/imLi3LhavKBPITva/wGDIN++8yvvC4ZXlffAbuHeIrFVN+BIfbnoGFh4DTlwTZoRj89wLgMr+vJnoaf+56B5o9qrduHNvC/MWjF3sWakQ7dq7yN3qXYsIdcjR6ei1csLupNrJmt4aH7nsYv9jc/FzzmV9e7zi0aqC91NcOeoJptazjomSFo9Ja1vanPrUlW/0/sLutc4Oe0xfz7DP9OXeP+pXmV38CqiYiqWFRiLIoiycU9xm9BPoct+F+UURlXVRWXIqnSau3+yyIX6WSUxeM4TBJRrNv/KMvS3dEiTCZFXhVJvG7/aZJGWSayPM2r3SRfrNt/MhaTXEyiaDeJyiQa3+b/N2+7b5UQGQAA","debug_symbols":"vdfbiuMwDADQf8lzHizbkqX5lWUZ0jYdAiEtabuwlP772kNzGW8yF1H6UuKiEymOHOxrsas3l7fXptsfTsXLr2vRHrbVuTl0cXS9lcWmb9q2eXud/12Y9OPse/zpWHVpeDpX/bl4AWfRlEXd7dK1Y4z32DdtHUfG3Mr/4421Q7jxdoyWsBDsieAe7CmYMZhwIZjR4D2Y0cI8+HdZOPeY6kWGcAB5XvX+MdUjj3PPX8w9YAhDMDn3efWCMjyqkPN59fjo6sF+qD7loCfkCE/IwYs5QGRE1gB9kcOz80Pr8WyVrbResGPrcchfniwWZGfr2M4X8kpBj1sL3nxjhrz/UFBioGNWxxY/Nxa8HVolXU8fEHTvyqsUqhSpVFhR3k5KIFNolhW7MCpmyhWolFUpp1J+TdGoBHyuUKVIpYJKsUqJRpFRKVCpld4Q4EmRyZVTKa9SqFLf6Q3KVyWt9YbhzxSrlGhUMCoFKrXyllGm7+F8a3NXXqVQpUilgkqxSolGsVGplbeMLJMizpVVKf/zjrrF0Z+qb6pNW9/PVvtLt50dtc5/j3V26jr2h229u/R1On9NRy9IM8RUCsRiID143H3EnUZMEhP9Aw==","names":["_compute_borrow_rate"],"brillig_names":["_compute_borrow_rate"]},{"name":"add_asset","hash":"8495915255098655994","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"oracle","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"loan_to_value","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"is_borrowable","type":{"kind":"boolean"},"visibility":"private"},{"name":"optimal_utilization_rate","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"under_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"over_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"deposit_cap","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+1dbYhk2Vm+9XGru6qnumt3emZ24i8l4D/pmu6e7gHRlvSsu252dndmN3E/ZknPdLeMZJN1Z10MBL3ixw/F/PALIZJABCNGlKD4Q4mBLEQhwago+EsigQjJH0H8oX+SPTP37XrqqefevqfqnOqqnj7Q3K57zn2/zvue8573fNWSh2nxvb9a/n8zf7aT0WRldvLn2mSpHxDWWkw6a3NCZ31O6GzMCZ3NOaEznRM6W3NC58Kc0LkYic6hxt8R7RoWZ7TOIJyyuYp0QlpMipMx+3JrGGYd8gM2BP024Q0Jf3tt87At+AtI/3o7h9mJA/+awV+KA39tIYfzoWwAH3kxvA3Ti2wgy5fhmxTKvAJlXoEyCOdVKPNqAZzXoMxrBWVuQ5nbBWVehzKvU5lu/n9tUORIFpZXh7wPU14D8n6a8pqQ9zLlpZD3CuW1IO9VyluAvNcoD+36NuWhHZgMXPn3JYP/fyT/33Qupk2iXEPr9HlBfx14c+kDWRTc6wZ/F+AnAXkz+Nfj0H8E/8kcfgzafzKObI76kqfiyOYI/tPhZXME+6fi0H7F4D8TnPaNfYP9wfCwDwz2s8Fhbx7p443wsI/k/Vx42BsG+/nwsK8a7BfCw75msG+Gh33HYN8KD/tIB18MDvvqkd2/NDnsK/zC+W6uX/9K7qSYL7A0QDXUR+LTpYZ4Z/1oT8DazYbxnAuIB2E9SXi6AfCYT7IMeTv5c22ydKVHdCKeczmPLu2988Zzb979+P7BT+zvv3Vw/36N+FoR9KvkA7PnAfMJhnnj5z/60XuH9w7euv4L9+6/PQL7MQHb/q8nmjemC8thSgnHj+VPp+//QPrOsF1qJ6P8h/QDq+gf4u8ko3Uc0nepET6jh+Vj8u4mo3Vo3/YozyXziWoiryHe1Qtgod/eTUZp5vp7LI68NqrWn+HvJFH1qV8m156Qq8nucUFrj/Jcsja1JvIa4l19yrBWkmJ9HFfn8Hsr1xXfsc6hTAPW8WZVnTP8nSSqDfTL6k/J1WR3XtDaozyXWE/OCzznBZ55gmV+nekv6g7rr6+d4PdWTuF5bEI8jwk8XfFdreBpePhdkd0jb2V9wLh4fO1+XDwI63o2jOd8QDwIazcbxtMRNLj44jsA1/2t5r8tbsrfWlwipfJ/0RjA/ET+znQQfZnzBfia8H5F8MH4fjF/Wlt8Ab4PGQdDXUwIV1vwFw53f6NLPGPqCr7ZJi9CHtvRJchj3X8C8rC+ODXoN8rC+d9fA/+by1lSOsJt2Krgw/IuCD5UO7JCeWj7q5SH7dwFykMbw/glt02NZLTuLB6peOZ2zX6nyahNcL9k9DYL4O1mw7Cs/O/mT1dXzfzjE/S1K4+VToOvzfWPeYinin9cEzSUjXVnbawUe6yr6q9srHuax0qsc75jJfz+bKxUrHNnY6XxYZWNlSZtM8v8jHkfK60QnpWAeHztflw8szxW+jrAdX/jjpX+EMZK38jfmQ6iL1NlrFTm51n5f82fszBWiuOrhR0rsR3FGiuZLHzHSmXxnlXBh+9YieP7aPuP6ljpO/lzRsZK16q0e4j/bF7iDNZphRXTD0H9jTxXvH2c/5HWBnhRFsr/UO2ilf8t8D8Wc5hVfGDl02N9mL+jxp32bZkvZ/LFPizk2reqbabh7ySj/XqMNnNVyFWNlZQfw/2x6uPjyrW/yXRhUv6Vr59kdLu+dwH6Xi7HOFH/LpIsItXpZk3Igm0F8Su/7QLxUWYrkXz5yrZi+KdlK0quZbZyUdDaE3mrU5Fr/yrThUmNN3xtxej2tRXUv0ski0h1erUmZFHFVrBuLhIfZbZyMQ4flW3F8E/LVpRcy2zlkqC1J/IuTEWu/S2mC1OI8bfR7WsrqH9PkCwi1elWTciiiq1g3VwiPsps5VIcPirbiuGflq0ouZbZyhOC1p7IuzgVufa3mS5MlncZcPvaitHtayuof4i/ii7zXP95QU9ZTH1WdTnSXFi/ilxdGleXz09Frv66zHHnhPjHNIkuo/5dJlkgDaE29F/Z6q9xnabJ6Hje/Y/xTMxrCr5d2s0G8LD8ndowX1j/secKuC+dFf1qEq2YjtOvFQ/9QplcBvhMA+4ZnjVZteB/TiFllULe5RmVxYKgP4YsWnMgi0VBfwxZLMyBLNqC/hiyWBSyqOoj8PxbW9BTBistgfW4J6xWCazUE9ZCCayWJ6zFElgLAlZXfDclX7XyfCH7qotx6OlXleu4vmod/mfbbIh39RJY7YCwGgFhNQPCejwgrDQgrFZAWGaTx82zfb42jNPqrOo8m5X/VZhn+9Mcptk5ngmzkz/XJkvr7BsZfYgX5XkSa7cNfycZ1ZUY7UuL6GH5cPuyIGjtiTy2vQWBZ0HgUbBqRAPqxpTqb2Pc+mvGoae0/ppCrj715xKvQxi3/mLBUj4J65ySTasED35v5briO9Y5lGnouVLEZ3zgO8TfSaLaQL+s/pRclZ+9QDJHX4b1ZFHgUb7PPMHitdsh20z83sopPK0J8bQEnq74rlbwNDz8rqwPaBKeZkA8vnY/Lh6EZf5U2ZhnXDwIazcbxtMQNDi6vlUbwHV/5tOjT4ff8tptK/9z4NN9O4epxqLYJuD3RXG83QJ8381xRD5fUsZjDVdb8BcQ96Har2CJ19gqm8R1PmxHyBfrPsbzfeNTJgvftdup4EPFWJqU1xF8qHYkpTzUtzblYTvXoTy0MV67jXrbINgucSykSOfxd5qMtnvcLxm9VW3oiL+8AcG12+4cI1vzcnSO0a23P/7W3s8c3DzY268V0Mn6weWK5gpO0M+qPE95GvwsrKvIcvVut3znRoxux9vlMedGeN//Cejf+qOmf8vwP7elPv60fY80KP+zLb47idiA4e8kUfWpXyZX5dfz2cf4bS8Z7b+432kLPG2BZ1qwVpJifRxX5/B7K1dlvgJlehKxAcM/rfmKdkW5coxZ+V8Yf2Y96Qg8HYFnnmBxbAB1h/XX107weyun8CxOiGdR4OmK72oFT8PD74rsHnmLHYOoYvfj4kFY17NhPJ2AeBDWbjaMpyg28FR9ABf776qxASv/OsQGnslhqjgutgn4vYrTIB+M7/kcR9xzqHRswHBFnpc46BLPmLqCb7bJqnED1n3kGeuLk/LbTRa+sYGW4MPylgUfam90kV+D8JXtL1MetnN8dhbaGMcGlE+NdVe25oLbNfvN43mXimLWzQJ4u9kwLCt/KGID7EvWkuE4wwn6RZXHUqfBL2L9YN3z8T+U/Z/AWLjyWGrWx8LKP5nnsdRJzh/N6lgq9vi9XVGuZ2Op0byysRTrr6+dlPkhscdsscdS05j/rGr34+JBWNezYTwnPZb6bKCx1DMwlvocjaWQdh5LKT+wIfhgP/DzNJZapu938t9rEyY1ljJcbcHfrI6l2I5wLMW6P8lYyt75jqUagg8VN21RnhpnqXakQXlo+zwGKxtnlY2l1PqusjXnDcEX/+Y1qi4VrV+rGo+w8l8qmGe1/dI8z/rht+69fZBQqhPhDfpdF+UwKSMKeBOwXJjYzN/xAgn7H4XUKijPFWTl3wWh/iANUIsqfGKh8+qjhiiHiYXu0k7+XJssbUf2jr1bxSXKw1bxHOVhq9ilPN4FjHm489xu6lMndaie3ZJqTU2GTpne7zGjrE7n95ltRlmolbp8GiO20LzrONJp+2tcn4mQQ9WVRinl4Uoj7jmxPrnnxJMmOEKJO+vNLqvqAZ7S/3g6gMvlEsKJDQ7XJ9on1yf2+nwSGPa4fApPpKiH98oNtk/UA/aSlLej9AD55nRcVPlbHnWmTrpUtsunhUXqQNe4A20m5R0oR3//lzz1SFEK6akvkIyQ3lC7/otkxCvkED/L6P9nQEauL7T8IyfkxXtvHNx/e++NN1FTmSv1HpNqHUJIf/3Otb27ew/vJ+ZeaJ7WjRndk+yd7gF8lgV7h9gK4jdle23VutSJ3dZl+t0U5TgphhDO01kg4hjJoiiHKeJOwWuz5kuxT43tCvvU2IeyT42+FPtneHKg3VCtfClsyzgd50u9f0xrY18KrY19KfSz2JdCP2uV8tDf4BPcupA3qyv7y2bo2QdDHWEfDHVkmfLQ3/b1qU2Gvj416hv7Z9hKso4sQR7ryDnI4/FTpF5tv0tySASvvDIW87AtYttFHeG2AnUE+eZ0XE/p41OjbrAOoV3zbSUGC31e9s1cSqn8dp7BfULgOpT+XLOEh1TIIy3g4UeJh0hRbsmD4fLzSVVPwD2ypchceVuXr8+IcXYfn1FZggpPKtk2iSaE5xL7jEorJ3bLzgnCuBwnxRDCCeYzMpLj4rCubeSZtGdhJu3VxjBs7JfVDEOdaFG3drAPmSR6NoVP0Z8V37MsflO2Y5B9FfQr2OdAv8I37oP+Zas1gMvlLKl6XiYcWFcumaWpON8ywLXZXdaxj4COfayCjqmVRY+qjrEeqV2ps6hjH4ukY0+Rjpns7oOO/TLhVitp1CkvZTrJO6uTRK964ZXPkXZkz9SuaKV/KBNOSsdMTj46xvWsokxVdawNcO00AOWpoC7ZO47dqPbIaFS7o8v61LITipCesln+qU/41pJR4bMhucQVoowMj9wqu4bG4KvBPdK1Sr/V9eO+27+LjsuuFeDmcqbojWyQbzweHQ0BeQEbkmtO+XbA4FhGKeDFjiRJBjLH8qzA6poB7Iz4aAF1FYy6doknutVVUVV1zb7Fa5T4msTPQAfzZ9TwKJmoa818ZaKuf+Ej42flKhIOMuHRerwoAI8b5cDV+yCPA5g/AHlFtpQkuoPBq0+qdjBcz+oqpqo6tgpw7apQ1rEvgo59uYKOqWuqH1Ud4+DovOjYlyPp2Dv5/zH7j63th5PRD2jN4dtSXk5NyMfyf58X5qWf5nfsjEnn4dZe/3B973Bvc29/f+PunroGwGxmKQL+Owf9g/XDw8P1g72Nw6uHx+J3OvMVWMKKjp5L17OHT1e3/0g6g6sD1QDnA9kgH8t/G9qbf87/V0cRGc1qW16d8lTAWi2tNZ8y8gK+DbaTBPgx3EtxcFfeWmP4O8moTQek52h16hLRg3XqUp3kcy5S3Rg9XUGP2uri2vHlZLTOkD6DpZYQVNlu7XtsZtnRW1jHfPRWXdBgeagjvMwc+TJ7WirgrWiVsWon+NsiWaij23lV8nehXannBKv2gdsVbB+4XVHL69XxZzwhdU7wUDbgVrqI+pUSbtTDbgVYCyW4VZCsW4Ib6eLVLV36rexFjTtNNpHHnZtq3IntUpoNy0bVI5avIktVjz0qj7JTdsz2iHiXKE8FmJQdm/6ivbAPgPaIPkBov2Xtyv7dqwdX3nPttq72r1zb9/FbasR3kgxkj9/z1B3KsEHfoQx5IplhF+Fm3UAYaqFFEX9l8BIBK0lGfY1IU8CVj/Gzd51Ey24nDD39qrrA23jV1jxlM7Ogg81kch1sJsfrYGgb39jc27q7t9XvX9voH2z0N8cZm5wdbxH/eAv2ZSY53oIncjimnyTRN1acmmsEyo7NmcfjLWbhGoFZO94i9pEq7Ypy9WkzXGI9edSOt2D99bWTsrhB7GM0uuK7WsHT8PC7IrtH3sr6gHHxzMI1AtM63kIdseHout0cwHV/Nh7EsQp+y8dbWPnvNQcwP0LxExyncuzK5oOwLpYFHymVP8g/sLaYNzfu5L/XJkxq8S0vyop0tIb3ghm2yRALZnyPtzBZ+B5vsSz4UMcB8jUCaluZakf4mAq1AVy1cz3K8z3eAuuubMuYfdsWsHby59pEaaOfkFzMplS8hn+XXWfAC9v+G9qCT5KdtsPztW60dkr4Yp6t7H8BrVl8Wrd8aI1Hx+Yey+E/QA6/RnLohJfDtvG6XCIHvq4lPB2b27zw999ADr9BclgOL4c943WlRA4sIyv7daD1U/FpvTMJre8Crb8NjUiZDrhkh4VwPf0NwPs9D3gfLID3RYD3BxXhKTu2sn8C8D5N8MZppz5bUL/T8Hd4k5vRq/ovl3Yzzd/n8g/wOCX2T2uAm+N27n8eY/I8OObh3An7P+iT3MwePh0P/9cMw+sXZpTXF7LwvP7VjPL6bBae1y/NKK83svC8fnVGeX0uC8/rN2aU1+ez8Lz++wzyin1dSF7/c0Z5bUfg9TszqsO3svC8/s+M8vpiNsqrmivlzU0418qblNA/7FIexgX5IAGUqdGPG2qP+E0HNK+kg2/wuyQJsxaJr3pQa5Eir+Hz3nrOcbWqBzuUHSnLmx3R70aZcFIxN5OTzxpurme1vlIdd6RsbAng3ga7PJt/H0ln8+9+6Wz+XeA5m3+P2maczb8LPGfz78V4zubfx8NzNv/+Xny7wA/znX//J/Dhb+T/mw6qMbbhU1f1dQUfHN++leOIezBJtav6unFwB71egu0IxwKs+5NcL2Gy8J1/V7EJNTfP8+8rgg/VjvD+BLXeQ7VzPlf1Kb+j7Kq+Kc+/byYkl1jz7+9CW/Cz6TC8ItwuPVsA728B3hse8G4UwPtLgPemB7znCuB9AeDd94D3fAG8PwJ473jAe6EA3qcB3ic84N0sgPc7AO+THvBuFcD7TYD3Sx7wXiyA9yvUN0TaGyr7Bu7fxo0v/nr+z0nGFx2dX0vD8POpU8bP758yfj5zyvj541PGz5+fMn7++pTx83enjJ+vzhg/k85hhZin+hfwU755Nk/1IO+0z1N9M9I81TNgXzZP5XuGHo7binhg/U5E2VZBeZeezsajrVmRtlZBuSrx90iX8FTeFz7rV4ovClp7Ii+djly31TxsQjQXxas5Kfs2uh38BeizuBzjRDviNuxM/+LrX3M6cp2q/l320D81f6N8Gu5DURdMh/nsgbIzjtT5QjwXpa5/Rj3YzR4+UyrfzRFGniuVMZg28YDX7yq95bPerPwP54Xco9calhnPpWEeyrNOebyuA/PK5gRxzb7yL5kHK38pJ9SV/RD5PHiGEcafXWpmw3Tu5O/XJksb6gwjjKmn2TDfyt9Sc65WvuzMI5RZj8pzP4C/EZa6LtrKmwxbojzCS6n8D0Ed2Y3E6hwlPvMMeef2tSHwls0XOxJ+nGw2Un+ypeYkLam+o0Z5aCdlaw54jIl6UOYTq7bdZOE7rxWincB2/wF92ShdJ2G3OOfPdqvWSqi1BVXt/Hr28NlLRuuS9Vv1BT4249JThA/1xeoGbcbOE3zwPhvAwbpyaSH/3QR8WN7oS6n8LvRFT1I7ngp8rshLJeVqBc8HMMS7Zjb8rp2Nlm9ko+UNdycbpdHyliAP9cilc/lvlBfCMjpSKn8T+muXFuEb+74n8C8S/iG6xTvUJ4bVEO+s/IMYQE7jUd8OuEP77w9wEnx8x7S9BHod+iytu5tX79zd2NxbO+i7n1eOO0vr+1FmbvyY+wAA","debug_symbols":"","names":["add_asset"],"brillig_names":["add_asset"]},{"name":"withdraw_public","hash":"15804379813507337950","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"1ZzdbuM2EIXfxde+4HA4P9xXKYpFfpyFAcMJnKRAEeTdKzmRrMaqhWV8VPEmsALOnM+yjg5l0Xpb3W9uX3/93O4fHp9XP/54W+0e725eto/7Zuvtfb26PWx3u+2vn8N/r0L7J8bj+Oenm327+fxyc3hZ/SCOEtarzf6+fc0uTY+H7W7TbIXwvj4fH2LshocU+9HZRgYnVfocnNRCP1hlZLBLkM/BLpGGg/9cryJfhz7nbjhRno8+XYdevN/3PrHvScy6wcp8mT5L7t5qVk5f6eXa9BT/Rd9q6AwaNqZhGrtjwjSdjglh8DHh4zSmPU1OEzTOqaPxgRn/g8ZiT+P2lSaP05D1NCaXaS6/XQ5oAUILRLQAowUSWkDQAooWMLSAowXQTk5oJ6fvOzkqdSf1qGaD2EhHhQhXYLhCgisIXEHhCgZXcLhCRitIgCvAPS1wTwvc0wL3tHzf08rdHFvldF2R9dhese0N296x7TO0vQZse8K2j9j2jG2fsO2xrlWsaxXrWsW6VuHpa/D0NXj6Gjx9DZ6+Bk9fg8+oDT6jNviM2uAzaoN72uGedrinHe5px6ayY1PZsans2FR2bCo7NpUdO5fO2Ll0xs6lM3YunbGuzVjXZqxrM9a1+fuuJQ/dXSNy8q8CWN9mrG+b24Lg/gTuH8H9Gdw/gfsLuL+C+xu4v4P7g/1LYP8S2L8E9i+B/Utg/xLYvwT2L4H9S/BrXyL4xS/FgJcgvETESzBeIuElBC+heAnDS+DdHfHuZry7Ge9uBic1g5P6Cou5LvcHJzWDk5rBSc3gmTaDZ9oJPNNO4Jl2Avv3Ciu4nFI32NnzUOG3Bh9x0rJwZFk4kycTE72M01y69aOb12lAP7a+nkPqVoJzGPT+WMJI0+vO5gbypQHlhQFNL4KbG4iWBhSXBsRLA0pLA5KlAS3tTC3zn6mbb/k7oGb0EGgk+Fi4Dz7zM3qvmj7XTK+hanqqmj5WTc9V06eq6aVq+v8hPrP19IPL5FH65v64dfjNuw7pjN8q5/fK+XPd/BYq56fK+efP3WZExx8lT/Erac+vbGf88ycvh37/89TZv2H2/gkVwYjP+OfP3uh+4pcpfsuDZ1QkOuOXyvm1cn6rnN8r589183uonJ8q54+V83Pl/JXnr1eev155/nrl+euV569Xnr95Sfl7BFpSoB6BlpSQR6D5T7kp9He80uQlJ0WnvjeHsxtkWSvnt8r5vXL+XDV/DNc4w7H3v7mjFOKQ/6gRZ9DgGTQSXmP8Jx6UUl+V5PS9X1T9qLKiKi+qyiVV4z+amKyioqpYVMVFVamoavzzOi3qbm4Bn5ydPorGV6Y3Nyz774RVw1kRlRRJCZ6WFBXtCC8pygVFKZQUUUlRLCnigg93fK3tVJGUFGlJkZUUeUlRLiiSEhNKiQkllhSVHBFSckTIbx8R783WXzeH7c3tbvP5QPeH1/3d4PnuL38/bb486v3p8Hi3uX89bNqHvp+e994SR/E1EzcwLQpTWrN6OydrP6IYdB2J2s1250eKzWZqGBqOfwA=","names":["withdraw_public"],"brillig_names":["withdraw_public"]},{"name":"public_dispatch","hash":"328861792516642497","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"951653053333916160":{"error_kind":"string","string":"Deposit cap exceeded"},"1602191554767750373":{"error_kind":"string","string":"Function _borrow can only be called internally"},"2830029349304997821":{"error_kind":"fmtstring","length":27,"item_types":[{"kind":"field"}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"4270187767586857285":{"error_kind":"string","string":"Function _compute_total_collateral_value can only be called internally"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5235018679007078561":{"error_kind":"string","string":"Invalid asset or market id"},"6787403583199288031":{"error_kind":"string","string":"Insufficient balance"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7969124557626779129":{"error_kind":"string","string":"Function _compute_total_min_collateral_value can only be called internally"},"10435052277855889085":{"error_kind":"string","string":"Function _withdraw can only be called internally"},"12348881442450494403":{"error_kind":"string","string":"Function _compute_utilization_rate can only be called internally"},"13135008234568508716":{"error_kind":"string","string":"Function _repay can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14687457983715723088":{"error_kind":"string","string":"Asset is not borrowable"},"15333773746166717806":{"error_kind":"string","string":"Insufficient collateral"},"16022896159229267359":{"error_kind":"string","string":"Function _deposit can only be called internally"},"17134621154673181869":{"error_kind":"string","string":"Function _compute_borrow_rate can only be called internally"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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","names":["public_dispatch"],"brillig_names":["public_dispatch"]},{"name":"_repay","hash":"147366190914045555","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5235018679007078561":{"error_kind":"string","string":"Invalid asset or market id"},"6787403583199288031":{"error_kind":"string","string":"Insufficient balance"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13135008234568508716":{"error_kind":"string","string":"Function _repay can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"","names":["_repay"],"brillig_names":["_repay"]},{"name":"_borrow","hash":"660004963845279735","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"1602191554767750373":{"error_kind":"string","string":"Function _borrow can only be called internally"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14687457983715723088":{"error_kind":"string","string":"Asset is not borrowable"},"15333773746166717806":{"error_kind":"string","string":"Insufficient collateral"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","names":["_borrow"],"brillig_names":["_borrow"]},{"name":"get_total_deposited_assets","hash":"4595936194548732346","is_unconstrained":true,"custom_attributes":["utility","view"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_total_deposited_assets"],"brillig_names":["get_total_deposited_assets"]},{"name":"borrow_private","hash":"8137682365934656484","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"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","names":["borrow_private"],"brillig_names":["discover_new_messages","decompose_hint","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper","directive_invert"]},{"name":"update_accumulators","hash":"16478099979640613461","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"12348881442450494403":{"error_kind":"string","string":"Function _compute_utilization_rate can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17134621154673181869":{"error_kind":"string","string":"Function _compute_borrow_rate can only be called internally"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+1da4xkx1Wufs1Mz0zP9O7O7tpex147QUiRQN3zHokfA7vr2CSxE+/TL0jPTA9aKUvMek0iUJQrIhGJRyTeIsJScASIKAgUFFAigkiiBJmAEQQlMgICP0gwiJCARDCJrPju3NP99den7tyarurpbd+Sdnu6T93v1Dl1zqnHuXVvweyVQvIvLuXks2j6i9TZTD4bg5WmR6xGyHYWArWzR8kFYy9Ce2By77NK18f0kkeBq8TXJ/56Y7WDb8K0f6kKmAHwFwW/HAa/kXSz+eGoF98Q35rpdV68RmhoY29LaFMJXf5+ffJ3lfBC9Du2ybfejintL4JscTkTBeG9JPhnAd94lE3wz4Vpfwf/vgQ/RNvfEEY3nXhyfxjddPAf8K+bDvYPhmn7ouC/0Xvbl1uC/Sb/2NuC/Wb/2G3BftA79krH1h/yj92xlbf4x+7Er7f6x14W7If9Y68K9nn/2GuCfcE/9oZgX/SPvSXYl/xj7wj2Zf/Yu4J9xTt2d875iH/sTox91D92xy8f84/d8cvH/WN3fOcJ/9idceeHBsde5B9mzN6ceD6ZcMs8utxl1TO/xM+4lJTfZA5aV7DORr18Kh75INZ9xGfCAx+Zz08CbTP5bAxWFuvUTuTDfD3PmdZFR1OmvwgN18i8HpsGWoVoM0BD2biU6DvKG7frONgn1+O2Tip00eEU/O5zPZTFlpD/tAnap82C6e/TkunXT5F0V1XaWidaXGRtUFBoJeW3ogUL16+aHXL/VcPoazlr/wn/aRPUnpppep1S9Kr5YpV0Pg3XSXwsKLSS8ltxyFjzxm6PB7U5vF7q1ZTr2OZQpx77eCWrzQn/aRPUB5pp/afpVYvx06TzGbiO7WRG4TOj8LmVsGSOJvaLtsP26+oneL3U0/hUB+RTVfjUlOsKlk/hw7/Z/B5lSxsDDsrH1e8PygexzkW9fGY88kGss1Evn5LShnje9TTgxv9mk+8V07UJvFb25ypU/9vFLua7kt/EBnEuM2PhhzmESUUO5vfu5FNicQ2u97kffBRwDfEKPP/erpHMWGqK3OyTc0BjP5oHGtt+HWjYX1z2m5vfmWFurtkIx7BZRQ6h1RQ5tDgySTT0/VmiYZyrEQ19DPfxOTaVTH/fyb68JjPHNfleMf0+weOStLdswTsb9WJJ/V9KPuO6F2mdfwhz7cxrpXGYa3P/Iw35ZJkfF5Q2pK11R22tFHqtq/Vf2lp3nNdKbHOuayW8Pl8r2W0uXysdHCttrTRozEybZ9zqa6VJ4jPpkY+r3x+UzyivlT4PuPG/g66VXoS10vPJb2KDOJfJslZKm+dJ/S8kn6OwVgo0V/O6VmI/CrVWEl24rpXS9ntmFTlc10q8v4++/2pdK72YfI7IWmkjS9xD/nleIscaV6yQ8xC038Bj2Pp+849yocsXdaHNP7S4KPX/HuYfkwnmvHI9z4E139bmO1rMHoG14mLWmDkOa0XUf2C9bmnzc0NtxnkJ6pOLNk+Sdsf2fOUA93sg/8Dj8kpB0YXmm8JfW3vOkBxpvjITRo7MviL8h+Urml7TfGVWaWtdoU0PR6/O6xRXX5F2u/oK2h+v2QL16WpB0UUWX8G+mSU50nxlNowcmX1F+A/LVzS9pvlKTWlrXaHNDEevO9wuLNq63dVXpN2uvoL2N0e6CNSnawVFF1l8BfumRnKk+UqgPaLMviL8h+Urml7TfGVOaWtdoc0OR69tbheWtH2srL6C5yRdfAXtD/lnsWXO9Wt7TdqaiW050Hotsy3zvb2lMO1JvbcX9ZMW93nvT5uLBI51znFfW8+j/Fiw3a62jHbEcR/5bCafjcHKumAfIVn94DcXRa6jpr8I7Rjw5vv7F4DG9/cfB9oE0U6QPEg7CW2Qc3JCuw2u03xPitbnosO4D9/m0Odo48eIhr6xQDS0z+NEwzh4gmiYTxBdVE2/vj3awQr3mVH0gH3GezkngcZxGftsjmi3A22eaHcArU60U0Arwt9cNDsQHcZ2cF+5i8v1DPHEGMN9hv55kmiYE7uNaOhbogvpa45vm8n3xkClucy+axRZjxNvpKEdHCEa2sFRoqEdoNxctD4TXcR9dqLSxeV6LAf6Lvsg+i73pzaXyDLWx4X3kbW5eej9al6/o642k8/GYGVj1GISj01oizw2oS3y2HS7okeOSXGRc9ZaTNL6UMp+McllbMIYwTaMYwzHJBxjOCZhLLudaBjLRBejZgc8xqAd8BiDdsBjDNoBxzkcmzjOHcbYhLlstoMK0NgO8Nwl2wHGRx6b0H4Oc2xin0c7YJ9HO2CfRztAublofSa6cB2bDjo/DHH+WvObEOevUbZ4X0B8p/Xj1x56cvsdO+0LV6+1n7rRuvZkgbhrJ4RZG1LmTb8WOZNZJwzmwTsVEgEmoP680r4K1f9M0uDYOr43UUNVuT7G3Ey+NwYs3OYytLmuyMhtfgGyw39e6NUp36kdF14dC137NCabxWh35LB3+OCDWHw3wREPfKSvcYW9mXw2BiqL63VqJ/Jhvocdqfn0EUZqHpUxUqNsXLRoLPJmfTLALPDvRKHz7R/daV8vWKC1phiCrDPk9+/sXG8/9RRjLmTElDqi0orSpgWiSd0vQwhqUgjyb5aNVcHGCZRH02tpk3Ep2iSMTe9OoLHpvQZoPOm7C2g86bsb2iAPpRLaabhOCx9SNHMWHcYyLDtMLtCuThEN3fJOoqFbvoZo6JZ3EQ0nUKKLqunXt0c72OE+M4oesM94g+5uoPEE7DTQeAJ2D9B4Qn0v0HhC/VqguS4MRIexHdwx0cXleoZ4YnzgPkP/vJtouMA5TTT0LdFFHPNEv90weuMd11s/0n643drJGve43ilLPW1RKHXE7niTeTP53hisZE76CP9p0+93IZI+J6g9rB9O+pxU2lpXaAtD0Wtzi+0Lixa7UZ9cNB+SdrsmfdBW7yRdoH43k8/GYGVNsHEs8qjnNsdGo8iMsZHHz9NA4/HzHqDx+ImxkePta6EN8uBFob0OrtN8T4rW56JD1/ETbZxjI/rGaaLhOHgP0TCW3Us0tGvRBdvYYY+fPA6ijfA4eBpoPA6ijfDcBG2E5yaDjJ+iQ9fxE+2Nx09MBrON4NL+NNFwSSO6cB0/bfJzPdvyKW2JG9buso+fwn9akSXE+Hmc2sP64fHzhNLWukIrDkWv7uOn69Iafchl/ERbRf7YhriOrFtxvOUb2HmDdzP53hiwsA2UoT0nlPbwGvtcsVcuiXkl07+9hjhS/6TCF8cSXtufJL5xn/z7RK+uJj3ramlro7Xd6upqwVFGra/RNviGmsPu6znSudR/yLGv50gP+/V1kfieJL7Y1wW6JmtfSJtsfcF+hzErRF8cUXRyXGkPy3alqOsW9TCXoocTCl+c33FfnCC+WfsC22C7UUjo2qfg8W+8nY1YZ6NePj62s+sKFm+bL3jgE2591Vypm/5x5riF72GP0ZyUy7o/mbavvN/Y7nnbfE65XCsu2+ZHMmJKHR4+5xQsnn48CS7+n7Bk8OWy2r2dPkNrPUXWgiK7NgxMk26k/vshQ/hOCsEFkseGKXVlGTVh+s+paiFY6v8k9I9kVhkThzdsF9+TH6oPhK+4Stnow/MsySj130u61aZc2nPspP5Rhe8C1UG+R4mvNrxp/as9U6dAbbL1Lw/tUv99Kf07vY8eCkZvM/KZSWmzZpMzCj7z/jlo89cTvWl+WAD8X7f4j21qlnb2KoTtimxoQ9qZStbFr5JcYu/YZwUFJ6vPcFyYJ76a7U7t0wY+S609PxP7bF7B4H7eLxbxeIB6CNGf04peZ1L0KvWfpf6cU3Q5peBwHEC+mk+wjT3rONXGNvDzb5BWJt4iZ9Gkx5Rh+d2Moq9ZY9eX1P8I9dO8oqNpBYf7FfnidiY/U2KO+GI/lRQeddJbmp9o7Rx1/X8sg/7Txqr99M9zsjniq20FTfvWVbPdXFpa79OVTUbb+Foyegxiv+Wz+IglfVI06fFMu+suhN3s138cX6X+pzKMl7MKjtSvK3xxvORxuk580+Jr0aT7gHZmZVg+mTaGSP3nirquULdFBYd9uKzoD3XC/f1chnm0rQ3sM9pYh+3k51trzzfT7sedAFzG1M6RlpVrTaID2UbgFNbl61dvtA2VIvwdg9Xoe0GpxwXraTgPRJ4ax0zSXg8dF+30T9qJnbReQB4DC3LM6IK5ahlxDk3LsdbkbuXY19Oe4yqa1cYS5DlL37V3F7ima23PhSxYeHM9MelS1KXj82riUo565dpMfm8MVjbiGPA/tP+FOqoAX3a/klKf4+ycUh/PYEgfaWsyfp4PehSPU9oztrD/5XmTNdPvuXItPoONx8P/gD2xl2i80XSiPRPRVSfaMz44jcbXbSbfG4MV5+dN8PNWcfzk563ivIXPTOItjfycLDxXavMlY/Z/vkV1sovL9aRo/Zz2HKO4pNkY7pPJc4bZxl4GG5st9fLWbEx7xv2r1cb4NrZbxca4n33ZmLz3J+T4sba+N3e/2dYEv2L6dYP8K1R/IamMY7p8DnJqanet1dxdau22Vlo7O8vbLe14h/gMvwvVJVdVVnC14oJZccC8jTEffPrtb7+6e7V9/dy7rj51ow/bdtIuLkWLbNwu23ytQjxOJfqMdXsm8Qfbe2crgHMu2vuMce4m/8CTeCXl2jOR3pa1Uhfz3uTvedOvb9HFvOnXV5Fo2mm5tL3IwM/V6Zza0t4/EPi5h5nf08HPkwz0zNLU50niupb3jwI96245bRzXnoccj19zpr/PtOe9YQzi58Oh/fKew0RG3WjPkJ8gGvZxhWjavoe2gs6yxzFjkY33DTHvyHGCr7XpAuOKjLucE/0+iCvnKa7w7UhI03Ip2nPQOK5gH3COQ5s7pK1D0tZyKL+2T1vLgDXI/JR5a/NTbosxdn/R1tj43O+4lIHmMzZqa2yMS5WoVzdaP2rv1knTpdaP2hq7RjT0Y/ZHLU+d9hwczY9xrX3eMgdAf8Q5gO85YmNxZ3u1vfjKNHZttbm4seMyRyyQ3Mb07+7Fhd9zgTos0XXabqLoRds51Hjb9rljDO3Yg00+PgZhTP9cItA85lX3nkBbrhr5ZH1PID/7RHueSJXqetZX5vcECv9pRQ8h+k8b48uKXkV32g6+9h4ruUU2zU60Z80OC0ubL7HNuc4FtTxRTbluSDEj8/qDY0YgH0iNGZpeXWJGXNhOxvH9L/yeQLQdtl9XP0lbM2l+f1A+EwqfmnJdwfIpfPi3tGwjPzcr1DOlsvj9Qfkg1rmol0+I9yvG5WzUy2dSacPN+wNpDoj3XmhrH35PoNRfKncxf4PWjjhH53U73q9gqD7Kwfcr/GbCI+xz3vT3BAqvsM8/bexy3gCLljdgn8S8AfsRysW2j3kDXqdg0fIG+PxTl/cEau9G0J6OViZaXZFDiyNzREN7mycaxrk60dDH3hB167Gfl0x/3/H6yXZ/Cn4Xu8f9mzdGvXWrVBdjpIxhvIf8OvDXPy5l5/0mC94pwPuEA96DFryjgPdJB7yHLHhVwPszB7y3WPAM4H3GAe+tFrxvwt7b5xzwHrbgfQ3wnnPAO2/B+1fA+0sHvCsWvH8AvL92wHvUgvcFGg8C7cWr4wGPadJebV4Wl7ORLt8XIcfE7+3U9l95XyP+m+fg2j1EfG+MNj5gzH4s2vuMdf09ZT+yfnlEZX0k8i/rv42orBci/7J+Y0RlvRj5l/X/R1TWS5F/WUvl0ZT1cuRf1tkRlfVKAFmPj6isjwaQ9a4RlfXxyL+s3z2isj4R9cuq5XL4PkvMBfH9cZhrqxEN9034/jjUqbR/xvTvbazAXP8M9Y/vPHXaeSK5NvD9HQd+lyHvV2i2oK3Xtf0Kvj9Su8+xYPqLtieB707Mei8j97N27w3ui/G9jNq9+Ljflucn1ZLnJ91Knp9U+OT5yaAxI89PKnzy/KSdT56fPBifPD9pzHss8zDX/GSp0sX8qQRTbBDv1eS9XDwjb6g+ysFnvN+XXKCd5Q+9Hy28Ru3ME/skv9kIabgWYNtHmV3zk6IL1/xkTZFDy11yflJ781LaexDT3nelxTnOXbrmJ7HvfOUn3xz11j1IfvJ/Yc39TDk77wsWvK8B3gcd8C5a8L4CeB9ywLtkwfsnwPttB7zLFrwvAt7vOuA9YsF7HvA+4oD3mAXvc4D3+w54j1vw/hTwPuqA94QF748oft+K+cSPj8AeYKzPlz3taX5qzOR5bszk+Zsxk+eFMZPnX8ZMnhfHTJ5vjJk8L42YPIPmmXzkkiqwDj1WMT06yHNJ45lL4n72lUt6D/gXPu/B5XlPmDu1ycD2bZS6E5b6cXkgOljbyhnbNmGpl2WPnJ97sJl8bwxWMr86SPgPa498ktrD+uF4qz2jtq7QKsPR67qWKzXUZtueMhfNv6Xdrq8OQj/i57ihLsr0d0lpp9ZHZYtMZaOPXRwr0eakrXEs8X0OeXF9fXVjcauxvLazvbuzvLTfOWTf/Ftbq6/8t9Rurba2d5a2l1zOQed5+E7J8/BuJc/DK3zyPHzQmJHn4RU+eR7ezifPwx+MT56HN+aaZQ3rmoefnOhiPplghjwn/HTCIz8n3OWdnxPeK/k54W6x5eH/D/Yrf7aSnbftnPB/Ad77HfBs54S/Ani/4IBnOyf8j4D3yw54tnPCfwd4v+aAZzsn/HnA+4ADnu2c8KcB7xkHPNs54Y8D3gcd8GznhP8A8D7kgGc7J/w7NB7cinn9Dyd/jPI54cKEH1n/cERlfSSArH8yorJeCCDrZ0dU1osBZH1+RGW9FEDWL42orJcDyPrPIyrrlQCyvjiisj4aQNb/HlFZHw8g67dGVNYnFFkHvX8Dc3Q1ovm4t6MKexsnqX/yezvG894O7mdf93ZcA7/M85N9Jc9PupU8P6nwyfOTQWNGnp9U+OT5STufPD95MD55fvKV/WjLPMw1P/klmMNfSv4OeU74sYRHfk64yzs/J7xX8nPC3WLLT/4F+OuPTWTnbTsn/GnAu+GAZzsn/AnAe6cDnu2c8EcB7ycc8GznhD8MeO92wLOdE34W8CIHPNs54Q8A3nsd8GznhH8R8H7aAc92TvhnKH7fivnEn09kOOxzWn/raU/zV8ZMnmfGTJ7fGjN5fm/M5PnYmMnzyTGT57NjJs9fjZg8g+aZfOSSXoB5ylfzXNJN2rjnkr5q2cMQHthXccmaS5K9Ed9n7VaXV5vr66317dXt3Y3l7a1hn/Vr72y3VtcW15dWlhrLy62dYfNfXmmtbbfWms2N5WZ7ubmyH3+x0YmoS8d3+MZlMvkuZ0O5vuBVqP43IV68BHHsZl2FX1xlatJer2D5vImh/FaOen+rRv31S1F/feE9HfW3UWgzQKsQn9nkO+oLsaQdFapfSWSXPpmCa+T6usJ/ivj3tFv5DWMxY5WU36R+3D8vk9+i7L7zIjd5Ej7+xm0T2+EztGnvM9feJc45AxnH8HeMeWejRBdUv55UCpzTUtfhVZJhEmTQ8ktnol4ZpP7rkz/iusfAPlmfwlvTZ5FonH9HWlrupmNzRp9jsAxS/46kMXHd+yi+YKwTeaQN5ai3nZvJ743ByrL2vnLc+0Sfso25Wm4sbS6Gc4WOfZr++VOFsCoKFur8fmqr6HBCqY94vGf1XdBHX5/obR/a9TS1HWXnZ0GUFL5peb2Y7Q+QzwbK+65puSMp2lqiQDT0k7TcMK8z0A7Snp+izR9FF675Bx9xAufPN9sX9bfrMPwW15Lst1pOW8sBZ/Xzc9HeZ9309yXbtzYWuPhMXO4nfmgv0jfoMyHms1vtZntpd3d3qd1a3l3dbQ17Pr29srq1/cqkutFuxl8X9+P/HYskAEsNDwEA","debug_symbols":"","names":["update_accumulators"],"brillig_names":["update_accumulators"]},{"name":"deposit_public","hash":"10250617948902371407","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"on_behalf_of","type":{"kind":"field"},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+1bT28bRRSftdd2bCexUxBw4EPYsZ3YcEnVtPyTALUXxM2x11Kl0lZpWkHFYc/wAbhxQ3DigEDiXD5AT9wQEt+ETLPP+fnnt5Pd2OMkVUaKdjdv5vf+zJv33s6sA3PSwuO/AO5tK5n5Jn32kmtrsdZeIlbLp5zBFZGzcEXkLF4ROUNPcs4sLiu0nThrlNCkN1Huv+SmmjwXgL5Ew7arxHeZ+P1Wd1RV9Fui/J1qgln2g98T/Iof/JbgfhCf4qMuQi9SPx5jfW0juQ/MfB+hFYD2IdGKQPuIaOizHxMN/fyThLZ2/LdlTu/fSu6rJKMPf0M9lz1fbyjyF0A3227Fp/YQvp3WTrcb7W5H7U572NoeHPR7rW7vYKff7rd7/d54u9/pRP1uf3dwMNhtDdrdTtSe9AadScJXsPdjP3oJ/m3AN2b5ceaOH/nbdXPiZ+8ngq8f/zUT7OGzrz57PHo0jm6Ox4fRkye4Pni9uVoezEoOzHcY89OnDx7cn9yPDm9/ff/J0Rz2moIt9wWj68ZyYT9sJeLxbnK1zzfBtg2W+V70cBwdXibTSijAFLfsJWMx637wOxJmaqBTUdFJ+Es4XiN7aVfBYprwqpl5V1vmcnXphvKLmzapP9sgDauWE6uq0HzMadWhN/L3LE9b8Nc961s36XOD/DcU++T1YeFVM17Xf9ulG8rPfofxAm2QhlXPiXVZ45Imq6ZHeTV6jESudTPfhLYB/9uPZ2mbINcajWvAuDs0rgnj+PULW5Ge0RaW335wisv9WA/MwxtEQx8UnRqKfOyrWgxz+b0r3nqa42l82/CDP10L64ot6g6bLxLfhNeq4pumm2ueMZegDdKw1nNiXWTOQltzztJk1fSorEaPsRbDDMmMMaxMtAbQakRrAhbHty0Ylze+iS3yxjd8J9gkGvqg6CTxDeMi+2qZZOX/uXJxOWWcYBt6DhReFYWX2KIYz8sttg6Btsx4YOfkEcwJx4FSPEvD+qCc0LRcILZpmPm55Bq/ktFOTWV8JQNWoGBpNsf8ZVsINN82R7uyzTFmsc3RP0W3BunNc5Pmm5qdminjxU48bs8sZqP+aBD1urvbAemEcmZdQ1g72xYCbdnz+XOONZR1PsWu2nzyGso7n1WFj7bVzHPtacu8ExA/0cOQ3sK/ZuZt4qNOyhNPeJ1UyOa4xmU7OVBoefY5NKysMsv/s9aC4ofoozLWc02+7bIT1lrCfx3up3uPt4YPHhhqIRlD20u1/9fO/aQfT3w9BRubtlcrRiso/a1CbxpS6N7T0eh4M/XWo8ffBCnyaYvZKNhvM/bd6Ojp4cPx8Gh47/7ziGEqKfBFBV7Lcbhucd6Mcfu/+KA25+KDmyTPXvLcWqxNfVB7h0C/F/5nmNXOGnsZngynLTUek+Yx7GH78ey4igMP7z2bteNyAZxm5I9XY/RUIXiSKnxttwYkH8rvCuGoD+qZhrWZE4tLEY1PFXhkCf247LkkzFvGa6lSTqqk76/J1b5O/EL8XNvPZ8m+om0HZxmrrW31FO5u9Cw6PDLUzgodmABcS10LHdbcYvqGgsdTr6lXUGTVpr6QghUa3SX345Mru8ofydX3xx03ANcQrzwnnlqC1prmvniqdJ6lt6bI7vlktX1ZTzDQTkHKVbCYxiernnzOebKaNcS+bierWiracMjaTJF1BXocaG/+hmTGt7D9eJaG1SWfSmFZwLu2uNvr+sJC27UVW+TdtcV14ipFBOsy7BAWFazLtkOIX1CU4lnaeXdlca44p6BNXHbSckoxA1bWXTzBvQib48kA2xxjEtsc/U82ARr0jPgB0dBOoWKnpjI+BDv5zEWe64RpzF9TbKHFCO1j1iDlKlhME141Mz9HPvK4pptrnrV6zYW1lhOravQ1vLccvTuu2Iu25tymyarpUVqNHgNt7RuSWasvtFNLPpnF/M95HPM/2oublsfFFnnzeAloXF9pr9JaTmFfzZtTOIbZVlXG7SXX1jnbZDwYdFvDgSsOlxQ5tXyFa8q2MJ7VYW9BWZOmnjq58hXGBM5XWu7W5pPzVd75LGfkEyzIJ1D4uLACBcsVX7UvBlzv6Z5z5nSbqaTIinMr/M99OlIkpYXGzyH042BSScHG5vt0BB3EKPeMnfN0JO3wpajAn1W/oMmMcdcL2hcwK8rxTh/U1sQ5TkfQ+9irykDjMec5HSk48PD+IksnnGb+/UhA/ZnGB+mXueTltLNIyctlV5b0hqcjWtrRtsg5uuXdIsfxQisBnm07yY2VuxXM8tOWYZhRdi6nPf0OcxoyAkVWbW0vcDrCoQOXgmupp52O7JC5pQ+eWqCr7McnV57C95Ib3z9x1E4thFfd+K1Wd/st8c5ppVwyejYMgY799xIAfLuS6yK/9Z7sDtuTznAy7A3H4+5oyHYyZKdl8z+I2lFnMpl0omF3sjM5kz/+HFKr+oOU6ytbOrC1Cl36ub4LOy8fzQ9XFUb5Dde2/fjkavX/PNB5lowenopAx/5fQHi+F6Tr6NqVTZsDTZ+CIlNdkevLBMT60r8Ufy7LDpAr1WM1WSLbFRQs7c2Mbc588d51+mTM5d299vFNse+vALQ4xCd4QU4ZcJ3zzlpJkQFjgJQblRhw49MxttXjWZ7Yx5hZG9q2BrR6Bqy6A6vqwKplxHLxRllDwl9Pnssp+FXqv5E8h9C/oshTIvznEEe/D2b7COa30CeGdfCqb3zKg+duE2lKf/RL7i+6Wp7fQRy1rQF8lh1H0+RGXxD+mg3y5m7hVSOsZcewZc6JC2szI5bYE+fX3v+wmrneZh0KRl9nwn8aJ/3IM/W9Ruy2qfBfhu8Jr1X5nqaby/ewP/uehtXIiCX21Pxtw48NOhzXTYoNkD8+Y1zH/CdjOWb/FMziaPbCHCa5SPyqCbQa0baAtk7y3ojn5UWsBsl7g+SV3Kv5fFPhv0n8kZfGn/PyltJ/S+lvfeVHsmlZGYvzKza1Nd91rXP6v5DwV1Xr/AZ55q+UWud36PPnBdQ6L65rnde61nkB/vXyutYxLpte1zrpWOepdV5ekVoH+yNGSP03SX7bMM9wXtLsiDyz1BI1R395xv13rY4qUf9/qPbB+oNrH9RhK0XewGSrfRpKf82vrO/8TbkQax+ZIx97+KPezsGo2xu2orZ93D5rD/9/SQ46KrxZAAA=","debug_symbols":"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","names":["deposit_public"],"brillig_names":["deposit_public"]},{"name":"_compute_utilization_rate","hash":"2451643179130002175","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"precision","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"deposit_accumulator","type":{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]},"visibility":"private"},{"name":"borrow_accumulator","type":{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"12348881442450494403":{"error_kind":"string","string":"Function _compute_utilization_rate can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["_compute_utilization_rate"],"brillig_names":["_compute_utilization_rate"]},{"name":"get_total_borrowed_assets","hash":"16612078083792195706","is_unconstrained":true,"custom_attributes":["utility","view"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_total_borrowed_assets"],"brillig_names":["get_total_borrowed_assets"]},{"name":"compute_total_deposited_assets","hash":"5656942920977102779","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"deposit_accumulator","type":{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["compute_total_deposited_assets"],"brillig_names":["compute_total_deposited_assets"]},{"name":"constructor","hash":"6249857465717271049","is_unconstrained":false,"custom_attributes":["private","initializer"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["constructor"],"brillig_names":["get_contract_instance_internal","decompose_hint","lte_hint","discover_new_messages","notify_created_nullifier_oracle_wrapper","directive_invert"]},{"name":"_compute_total_collateral_value","hash":"16234001079922298836","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"4270187767586857285":{"error_kind":"string","string":"Function _compute_total_collateral_value can only be called internally"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"","names":["_compute_total_collateral_value"],"brillig_names":["_compute_total_collateral_value"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"Lending::_repay_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_repay_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::borrow_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::borrow_private_parameters","fields":[{"name":"secret","type":{"kind":"field"}},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::update_accumulators_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::update_accumulators_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::_deposit_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_deposit_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::_compute_utilization_rate_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_compute_utilization_rate_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"precision","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"deposit_accumulator","type":{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]}},{"name":"borrow_accumulator","type":{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]}}]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":128}}]},{"kind":"struct","path":"Lending::withdraw_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::withdraw_public_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::_borrow_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_borrow_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::add_asset_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::add_asset_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"oracle","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"loan_to_value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"is_borrowable","type":{"kind":"boolean"}},{"name":"optimal_utilization_rate","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"under_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"over_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"deposit_cap","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]},{"kind":"struct","path":"Lending::_compute_total_collateral_value_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_compute_total_collateral_value_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":128}}]},{"kind":"struct","path":"Lending::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::constructor_parameters","fields":[]}}]},{"kind":"struct","path":"Lending::_compute_borrow_rate_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_compute_borrow_rate_parameters","fields":[{"name":"asset","type":{"kind":"struct","path":"asset::Asset","fields":[{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"loan_to_value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"oracle","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_borrowable","type":{"kind":"boolean"}},{"name":"optimal_utilization_rate","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"under_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"over_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"deposit_cap","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"utilization_rate","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"precision","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":128}}]},{"kind":"struct","path":"Lending::_withdraw_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_withdraw_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::compute_total_deposited_assets_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::compute_total_deposited_assets_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"deposit_accumulator","type":{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]}}]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":128}}]},{"kind":"struct","path":"Lending::_compute_total_min_collateral_value_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_compute_total_min_collateral_value_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":128}}]},{"kind":"struct","path":"Lending::deposit_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::deposit_public_parameters","fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"nonce","type":{"kind":"field"}},{"name":"on_behalf_of","type":{"kind":"field"}},{"name":"market_id","type":{"kind":"field"}},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::deposit_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::deposit_private_parameters","fields":[{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"nonce","type":{"kind":"field"}},{"name":"secret","type":{"kind":"field"}},{"name":"on_behalf_of","type":{"kind":"field"}},{"name":"market_id","type":{"kind":"field"}},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::repay_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::repay_private_parameters","fields":[{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"nonce","type":{"kind":"field"}},{"name":"secret","type":{"kind":"field"}},{"name":"on_behalf_of","type":{"kind":"field"}},{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::repay_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::repay_public_parameters","fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"nonce","type":{"kind":"field"}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::withdraw_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::withdraw_private_parameters","fields":[{"name":"secret","type":{"kind":"field"}},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::borrow_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::borrow_public_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}]},"globals":{"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"kind":"string","value":"UintNote"},{"kind":"struct","fields":[{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"kind":"string","value":"UintNote"},{"kind":"struct","fields":[{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]}],"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"PriceFeed"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"assets","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}}]}}]},{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"Token"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"admin","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"minters","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"total_supply","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"public_balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"symbol","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"name","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}]}},{"name":"decimals","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000a"}}]}}]}}]},{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"Lending"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"market_assets","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"market_assets_list","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"market_assets_list_len","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"scaled_deposited_assets","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"scaled_borrowed_assets","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"scaled_total_deposited_assets","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"scaled_total_borrowed_assets","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}]}},{"name":"deposit_accumulators","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}]}},{"name":"borrow_accumulators","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}]}}]}}]}]}},"file_map":{"6":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"16":{"source":"use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: x_coordinates_match,\n        };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n","path":"std/embedded_curve_ops.nr"},"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"19":{"source":"// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"20":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"25":{"source":"//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n","path":"std/meta/expr.nr"},"42":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"43":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"46":{"source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n","path":"std/slice.nr"},"52":{"source":"use dep::aztec::hash::pedersen_hash;\nuse std::ops::{Add, Sub};\n\n// Utility used to easily get a \"id\" for a private user that sits in the same\n// \"space\" as the public users.\n// It help us to have a single mapping for collateral that have both public and private users.\npub fn compute_identifier(secret: Field, on_behalf_of: Field, self: Field) -> Field {\n    // EITHER secret OR on_behalf_of MUST be set. But not both\n    assert(!((secret == 0) as bool & (on_behalf_of == 0) as bool));\n    if (secret != 0) {\n        pedersen_hash([self, secret], 0)\n    } else {\n        on_behalf_of\n    }\n}\n\npub fn covered_by_collateral(\n    collateral_price: u128,\n    borrow_price: u128,\n    loan_to_value: u128,\n    collateral: u128,\n    increase: u128,\n    decrease: u128,\n) -> u128 {\n    let price_precision = 1000000000 as u128;\n    let ltv_precision = 10000 as u128;\n\n    let collateral = (collateral + increase) - decrease;\n\n    let collateral_value = (collateral * collateral_price) / price_precision;\n    let debt_covered = (collateral_value * loan_to_value * price_precision) / (borrow_price * ltv_precision);\n\n    debt_covered\n}\n\npub struct DebtReturn {\n    debt_value: u128,\n    static_debt: u128,\n}\n\nfn div_up(a: u128, b: u128) -> u128 {\n    let div = a / b;\n    if div * b < a {\n        div + (1 as u128)\n    } else {\n        div\n    }\n}\n\npub fn debt_updates(\n    interest_accumulator: u128,\n    static_debt: u128,\n    increase: u128,\n    decrease: u128,\n) -> DebtReturn {\n    assert(interest_accumulator > (0 as u128));\n    let accumulator_precision = 1000000000 as u128;\n\n    let current_debt_value = (static_debt * interest_accumulator) / accumulator_precision;\n    let new_debt_value = current_debt_value.add(increase).sub(decrease);\n\n    // static_debt_increase = amount / accumulator\n    // rounding up new debt.\n    let static_debt_increase = div_up(increase * accumulator_precision, interest_accumulator);\n    // rounding down repayment.\n    let static_debt_decrease = (decrease * accumulator_precision) / interest_accumulator;\n\n    // We need to allow repaying of the entire debt as well etc. This is very prone to failing\n    // if you try to repay exact due to time diff between sim and execution.\n    let new_static_debt = static_debt.add(static_debt_increase).sub(static_debt_decrease);\n\n    DebtReturn { debt_value: new_debt_value, static_debt: new_static_debt }\n}\n\npub fn debt_value(static_debt: u128, interest_accumulator: u128) -> u128 {\n    let accumulator_precision = 1000000000 as u128;\n    div_up(static_debt * interest_accumulator, accumulator_precision)\n}\n","path":"/home/jean/work/noir/lending/contracts/src/helpers.nr"},"53":{"source":"mod asset;\nmod position;\nmod helpers;\nmod accumulator;\n\nuse dep::aztec::macros::aztec;\n\n#[aztec]\npub contract Lending {\n    use dep::aztec::prelude::{AztecAddress, Map, PublicMutable};\n\n    use crate::asset::Asset;\n    use crate::helpers::{compute_identifier};\n    use crate::position::Position;\n    use dep::price_feed::PriceFeed;\n    use dep::token::Token;\n    use crate::accumulator::Accumulator;\n    use dep::aztec::macros::{\n        functions::{initializer, internal, private, public, view, utility},\n        storage::storage,\n    };\n    use dep::aztec::protocol_types::traits::{FromField, ToField};\n\n    #[storage]\n    struct Storage<Context> {\n        market_assets: Map<Field, Map<AztecAddress, PublicMutable<Asset, Context>, Context>, Context>,\n        market_assets_list: Map<Field, Map<u64, PublicMutable<AztecAddress, Context>, Context>, Context>,\n        market_assets_list_len: Map<Field, PublicMutable<u64, Context>, Context>,\n        scaled_deposited_assets: Map<Field, Map<AztecAddress, Map<AztecAddress, PublicMutable<u128, Context>, Context>, Context>, Context>,\n        scaled_borrowed_assets: Map<Field, Map<AztecAddress, Map<AztecAddress, PublicMutable<u128, Context>, Context>, Context>, Context>, // static debt\n        scaled_total_deposited_assets: Map<Field, Map<AztecAddress, PublicMutable<u128, Context>, Context>, Context>,\n        scaled_total_borrowed_assets: Map<Field, Map<AztecAddress, PublicMutable<u128, Context>, Context>, Context>, // static debt\n        deposit_accumulators: Map<Field, Map<AztecAddress, PublicMutable<Accumulator, Context>, Context>, Context>,\n        borrow_accumulators: Map<Field, Map<AztecAddress, PublicMutable<Accumulator, Context>, Context>, Context>,\n    }\n\n    #[private]\n    #[initializer]\n    fn constructor() {}\n\n    #[private]\n    fn repay_private(\n        from: AztecAddress,\n        amount: u128,\n        nonce: Field,\n        secret: Field,\n        on_behalf_of: Field,\n        market_id: Field,\n        asset_address: AztecAddress,\n    ) {\n        let on_behalf_of =\n            compute_identifier(secret, on_behalf_of, context.msg_sender().to_field());\n        // docs:start:private_call\n        let _ = Token::at(asset_address).transfer_to_public(from, context.this_address(), amount, nonce).call(&mut context);\n        // docs:end:private_call\n        let _ = Lending::at(context.this_address())\n            ._repay(AztecAddress::from_field(on_behalf_of), amount, market_id, asset_address)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    fn repay_public(amount: u128, nonce: Field, owner: AztecAddress, market_id: Field, asset_address: AztecAddress) {\n        let _ = Token::at(asset_address).transfer_in_public(context.msg_sender(), context.this_address(), amount, nonce).call(&mut context);\n        let _ = Lending::at(context.this_address())._repay(owner, amount, market_id, asset_address).call(\n            &mut context,\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _repay(owner: AztecAddress, amount: u128, market_id: Field, asset_address: AztecAddress) {\n        let asset_loc = storage.market_assets.at(market_id).at(asset_address);\n        let asset: Asset = asset_loc.read();\n        assert(asset.asset_address == asset_address, \"Invalid asset or market id\");\n\n        Lending::at(context.this_address()).update_accumulators(market_id, asset_address).call(&mut context);\n\n        let scaled_user_borrowed_amount_loc = storage.scaled_borrowed_assets.at(market_id).at(asset_address).at(owner);\n        let scaled_user_borrowed_amount: u128 = scaled_user_borrowed_amount_loc.read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n        let scaled_amount = (amount * 1000000000 as u128) / borrow_accumulator.value;\n\n        assert(scaled_user_borrowed_amount >= scaled_amount, \"Insufficient balance\");\n        scaled_user_borrowed_amount_loc.write(scaled_user_borrowed_amount - scaled_amount);\n\n        let scaled_total_borrowed_asset_loc = storage.scaled_total_borrowed_assets.at(market_id).at(asset_address);\n        let scaled_total_borrowed_asset: u128 = scaled_total_borrowed_asset_loc.read();\n        scaled_total_borrowed_asset_loc.write(scaled_total_borrowed_asset - scaled_amount);\n    }\n\n     #[private]\n    fn borrow_private(secret: Field, to: AztecAddress, amount: u128, market_id: Field, asset_address: AztecAddress) {\n        let on_behalf_of = compute_identifier(secret, 0, context.msg_sender().to_field());\n        let _ = Lending::at(context.this_address())\n            ._borrow(AztecAddress::from_field(on_behalf_of), to, amount, market_id, asset_address)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    fn borrow_public(to: AztecAddress, amount: u128, market_id: Field, asset_address: AztecAddress) {\n        let _ = Lending::at(context.this_address())._borrow(context.msg_sender(), to, amount, market_id, asset_address).call(\n            &mut context,\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _borrow(owner: AztecAddress, to: AztecAddress, amount: u128, market_id: Field, asset_address: AztecAddress) {\n        let asset_loc = storage.market_assets.at(market_id).at(asset_address);\n        let asset: Asset = asset_loc.read();\n\n        assert(asset.is_borrowable, \"Asset is not borrowable\");\n\n        let total_collateral_value: u128 = Lending::at(context.this_address())._compute_total_collateral_value(market_id, owner).call(&mut context);\n        \n        let total_min_collateral_value = Lending::at(context.this_address())._compute_total_min_collateral_value(market_id, owner).call(&mut context);\n\n        let borrow_price = PriceFeed::at(asset.oracle).get_price(0).view(&mut context).price;\n        let min_collateral_for_borrow = (amount * borrow_price * 10000 as u128) / (asset.loan_to_value * 1000000000 as u128);\n\n        assert(total_min_collateral_value + min_collateral_for_borrow <= total_collateral_value, \"Insufficient collateral\");\n        \n        let scaled_user_borrowed_amount_loc = storage.scaled_borrowed_assets.at(market_id).at(asset_address).at(owner);\n        let scaled_user_borrowed_amount: u128 = scaled_user_borrowed_amount_loc.read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n        let scaled_amount = (amount * 1000000000 as u128) / borrow_accumulator.value;\n        scaled_user_borrowed_amount_loc.write(scaled_user_borrowed_amount + scaled_amount);\n\n        let scaled_total_borrowed_asset_loc = storage.scaled_total_borrowed_assets.at(market_id).at(asset_address);\n        let scaled_total_borrowed_asset: u128 = scaled_total_borrowed_asset_loc.read();\n        scaled_total_borrowed_asset_loc.write(scaled_total_borrowed_asset + scaled_amount);\n        \n        let _ = Token::at(asset_address)\n            .transfer_in_public(context.this_address(), to, amount, 0)\n            .call(&mut context);\n    }\n\n    #[private]\n    fn withdraw_private(secret: Field, to: AztecAddress, amount: u128, market_id: Field, collateral_asset: AztecAddress) {\n        let on_behalf_of = compute_identifier(secret, 0, context.msg_sender().to_field());\n        Lending::at(context.this_address())\n            ._withdraw(AztecAddress::from_field(on_behalf_of), to, amount, market_id, collateral_asset)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    fn withdraw_public(to: AztecAddress, amount: u128, market_id: Field, collateral_asset: AztecAddress) {\n        let _ = Lending::at(context.this_address())\n            ._withdraw(context.msg_sender(), to, amount, market_id, collateral_asset)\n            .call(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _withdraw(owner: AztecAddress, to: AztecAddress, amount: u128, market_id: Field, collateral_asset: AztecAddress) {\n        let asset_loc = storage.market_assets.at(market_id).at(collateral_asset);\n        let asset: Asset = asset_loc.read();\n        assert(asset.asset_address == collateral_asset, \"Invalid asset or market id\");\n        \n        Lending::at(context.this_address()).update_accumulators(market_id, collateral_asset).call(&mut context);\n\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(collateral_asset);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n\n        let scaled_user_deposited_amount_loc = storage.scaled_deposited_assets.at(market_id).at(collateral_asset).at(owner);\n        let scaled_user_deposited_amount: u128 = scaled_user_deposited_amount_loc.read();\n        let user_deposited_amount = (scaled_user_deposited_amount * deposit_accumulator.value) / 1000000000 as u128 ;\n        assert(user_deposited_amount >= amount, \"Insufficient balance\");\n\n        let total_collateral_value: u128 = Lending::at(context.this_address())._compute_total_collateral_value(market_id, owner).call(&mut context);\n\n        let total_min_collateral_value = Lending::at(context.this_address())._compute_total_min_collateral_value(market_id, owner).call(&mut context);\n\n        let collateral_price = PriceFeed::at(asset.oracle).get_price(0).view(&mut context).price;\n        let withdraw_amount_value = (amount * collateral_price) / 10000 as u128;\n\n        let total_collateral_value_after_withdraw = total_collateral_value - withdraw_amount_value;\n\n        assert(total_min_collateral_value <= total_collateral_value_after_withdraw, \"Insufficient collateral\");\n\n        let scaled_withdraw_amount = (amount * 1000000000 as u128) / deposit_accumulator.value;\n        scaled_user_deposited_amount_loc.write(scaled_user_deposited_amount - scaled_withdraw_amount);\n\n        let _ = Token::at(collateral_asset)\n            .transfer_in_public(context.this_address(), to, amount, 0)\n            .call(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _compute_total_collateral_value(market_id: Field, owner: AztecAddress) -> u128 {\n        let mut total_collateral_value: u128 = 0 as u128;\n\n        let market_assets_list_len_loc = storage.market_assets_list_len.at(market_id);\n        let market_assets_list_len: u64 = market_assets_list_len_loc.read();\n        let market_assets_list_loc = storage.market_assets_list.at(market_id);\n\n        for i in 0..market_assets_list_len {\n            let market_asset_loc = market_assets_list_loc.at(i);\n            let market_asset: AztecAddress = market_asset_loc.read();\n            let collateral_asset_loc = storage.market_assets.at(market_id).at(market_asset);\n            let collateral_asset: Asset = collateral_asset_loc.read();\n            let collateral_price = PriceFeed::at(collateral_asset.oracle).get_price(0).view(&mut context).price;\n            let scaled_collateral_amount_loc = storage.scaled_deposited_assets.at(market_id).at(market_asset).at(owner);\n            let scaled_collateral_amount: u128 = scaled_collateral_amount_loc.read();\n            let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(market_asset);\n            let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n            let collateral_amount = (scaled_collateral_amount * deposit_accumulator.value) / 1000000000 as u128;\n            total_collateral_value += (collateral_amount * collateral_price) / 10000 as u128;\n        }\n        total_collateral_value\n    }\n\n    #[public]\n    #[internal]\n    fn _compute_total_min_collateral_value(market_id: Field, owner: AztecAddress) -> u128 {\n        let mut min_collateral_value: u128 = 0 as u128;\n\n        let market_assets_list_len_loc = storage.market_assets_list_len.at(market_id);\n        let market_assets_list_len: u64 = market_assets_list_len_loc.read();\n        let market_assets_list_loc = storage.market_assets_list.at(market_id);\n\n        for i in 0..market_assets_list_len {\n            let market_asset_loc = market_assets_list_loc.at(i);\n            let market_asset: AztecAddress = market_asset_loc.read();\n            let debt_asset_loc = storage.market_assets.at(market_id).at(market_asset);\n            let debt_asset: Asset = debt_asset_loc.read();\n            if(debt_asset.is_borrowable) {\n                let scaled_user_borrowed_amount_loc = storage.scaled_borrowed_assets.at(market_id).at(market_asset).at(owner);\n                let scaled_user_borrowed_amount: u128 = scaled_user_borrowed_amount_loc.read();\n                let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(market_asset);\n                let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n                let user_borrowed_amount = (scaled_user_borrowed_amount * borrow_accumulator.value) / 1000000000 as u128;\n                \n                let borrow_price= PriceFeed::at(debt_asset.oracle).get_price(0).view(&mut context).price;\n\n                min_collateral_value += (user_borrowed_amount * borrow_price * 10000 as u128) / debt_asset.loan_to_value;\n            }\n        }\n        min_collateral_value / 1000000000 as u128\n    }\n\n    #[private]\n    fn deposit_private(\n        from: AztecAddress,\n        amount: u128,\n        nonce: Field,\n        secret: Field,\n        on_behalf_of: Field,\n        market_id: Field,\n        collateral_asset: AztecAddress,\n    ) {\n        let on_behalf_of =\n            compute_identifier(secret, on_behalf_of, context.msg_sender().to_field());\n        let _res = Token::at(collateral_asset)\n            .transfer_to_public(from, context.this_address(), amount, nonce)\n            .call(&mut context);\n        Lending::at(context.this_address())\n            ._deposit(AztecAddress::from_field(on_behalf_of), amount, market_id,collateral_asset)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    fn deposit_public(\n        amount: u128,\n        nonce: Field,\n        on_behalf_of: Field,\n        market_id: Field,\n        collateral_asset: AztecAddress,\n    ) {\n        // docs:start:public_to_public_call\n        let _ = Token::at(collateral_asset)\n            .transfer_in_public(context.msg_sender(), context.this_address(), amount, nonce)\n            .call(&mut context);\n        // docs:end:public_to_public_call\n        let _ = Lending::at(context.this_address())\n            ._deposit(AztecAddress::from_field(on_behalf_of), amount, market_id, collateral_asset)\n            .call(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _deposit(owner: AztecAddress, amount: u128, market_id: Field, collateral_asset: AztecAddress) {\n        let asset_loc = storage.market_assets.at(market_id).at(collateral_asset);\n        let asset: Asset = asset_loc.read();\n        assert(asset.asset_address == collateral_asset, \"Invalid asset or market id\");\n        \n        Lending::at(context.this_address()).update_accumulators(market_id, collateral_asset).call(&mut context);\n\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(collateral_asset);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n\n        let total_deposited_assets = Lending::at(context.this_address()).compute_total_deposited_assets(market_id, collateral_asset, deposit_accumulator).call(&mut context);\n        assert((total_deposited_assets + amount) < asset.deposit_cap, \"Deposit cap exceeded\");\n\n        let scaled_user_deposited_asset_loc = storage.scaled_deposited_assets.at(market_id).at(collateral_asset).at(owner);\n        let scaled_user_deposited_asset: u128 = scaled_user_deposited_asset_loc.read();\n        let scaled_amount = (amount * 1000000000 as u128) / deposit_accumulator.value;\n        scaled_user_deposited_asset_loc.write(scaled_user_deposited_asset + scaled_amount);\n\n        let scaled_total_deposited_asset_loc = storage.scaled_total_deposited_assets.at(market_id).at(collateral_asset);\n        let scaled_total_deposited_asset: u128 = scaled_total_deposited_asset_loc.read();\n        scaled_total_deposited_asset_loc.write(scaled_total_deposited_asset + scaled_amount);\n    }\n\n    #[public]\n    fn compute_total_deposited_assets(market_id: Field, asset_address: AztecAddress, deposit_accumulator: Accumulator) -> u128 {\n        let scaled_total_deposited_asset_static = storage.scaled_total_deposited_assets.at(market_id).at(asset_address).read();\n        let total_deposited_asset = scaled_total_deposited_asset_static * deposit_accumulator.value / 1000000000 as u128;\n        total_deposited_asset\n    }\n\n    #[public]\n    fn add_asset(market_id: Field, asset_address: AztecAddress, oracle: AztecAddress, loan_to_value: u128, is_borrowable: bool, optimal_utilization_rate: u128, under_optimal_slope: u128, over_optimal_slope: u128, deposit_cap: u128) {\n        let asset_loc = storage.market_assets.at(market_id).at(asset_address);\n        let asset: Asset = asset_loc.read();\n\n        assert(loan_to_value <= (10000 as u128));\n\n        asset_loc.write(Asset {\n            asset_address,\n            oracle,\n            loan_to_value,\n            is_borrowable,\n            optimal_utilization_rate,\n            under_optimal_slope,\n            over_optimal_slope,\n            deposit_cap,\n        });\n\n        let market_assets_list_len_loc = storage.market_assets_list_len.at(market_id);\n        let market_assets_list_len: u64 = market_assets_list_len_loc.read();\n        let market_assets_list_loc = storage.market_assets_list.at(market_id).at(market_assets_list_len);\n        market_assets_list_loc.write(asset_address);\n        market_assets_list_len_loc.write(market_assets_list_len + 1);\n\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(asset_address);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n\n        assert(deposit_accumulator.last_updated_ts == 0);\n        assert(deposit_accumulator.value == 0 as u128);\n\n        deposit_accumulator_loc.write(Accumulator {\n            // 10**9\n            value: 1000000000 as u128,\n            last_updated_ts: context.timestamp(),\n        });\n\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n\n        assert(borrow_accumulator.last_updated_ts == 0);\n        assert(borrow_accumulator.value == 0 as u128);\n\n        borrow_accumulator_loc.write(Accumulator {\n            // 10**9\n            value: 1000000000 as u128,\n            last_updated_ts: context.timestamp(),\n        });\n    }\n\n\n    // Create a position.\n    #[public]\n    fn update_accumulators(market_id: Field, asset_address: AztecAddress) {\n        let asset_loc = storage.market_assets.at(market_id).at(asset_address);\n        let asset: Asset = asset_loc.read();\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(asset_address);\n        let mut deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let mut borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n\n        let timestamp = context.timestamp();\n        let time_delta = timestamp - deposit_accumulator.last_updated_ts;\n\n        // Only update if time has passed.\n        if !(time_delta == 0) {\n            let precision = 1000000000 as u128; // 10**9\n            let utilization_rate = _compute_utilization_rate(market_id, asset_address, precision, deposit_accumulator, borrow_accumulator);\n            let borrow_rate_per_year = _compute_borrow_rate(asset, utilization_rate, precision);\n            // TODO: let supply_rate_per_year = borrow_rate_per_year * utilization_rate * (1 - reserve_factor);\n            let supply_rate_per_year = (borrow_rate_per_year * utilization_rate) / precision;\n\n            let new_borrow_accumulator = ((borrow_accumulator.value * borrow_rate_per_year * time_delta as u128) / 31536000 as u128) / precision;\n            let new_deposit_accumulator = ((deposit_accumulator.value * supply_rate_per_year * time_delta as u128) / 31536000 as u128) / precision;\n\n            borrow_accumulator.value = new_borrow_accumulator;\n            borrow_accumulator.last_updated_ts = timestamp;\n            borrow_accumulator_loc.write(borrow_accumulator);\n            deposit_accumulator.value = new_deposit_accumulator;\n            deposit_accumulator.last_updated_ts = timestamp;\n            deposit_accumulator_loc.write(deposit_accumulator);\n        }\n    }\n\n    #[public]\n    #[internal]\n    fn _compute_utilization_rate(market_id: Field, asset_address: AztecAddress, precision: u128, deposit_accumulator: Accumulator, borrow_accumulator: Accumulator) -> u128 {\n        let scaled_total_deposited_asset = storage.scaled_total_deposited_assets.at(market_id).at(asset_address).read();\n        let scaled_total_borrowed_asset = storage.scaled_total_borrowed_assets.at(market_id).at(asset_address).read();\n\n        let total_deposited_assets = (scaled_total_deposited_asset * deposit_accumulator.value) / precision;\n        let total_borrowed_assets = (scaled_total_borrowed_asset * borrow_accumulator.value) / precision;\n        let utilization_rate = (total_borrowed_assets * precision) / total_deposited_assets;\n\n        utilization_rate\n    }\n\n    #[public]\n    #[internal]\n    fn _compute_borrow_rate(asset: Asset, utilization_rate: u128, precision: u128) -> u128 {\n        let mut rate = 0 as u128;\n        if utilization_rate < asset.optimal_utilization_rate {\n            // rate = base + utilization * slope1 / optimal No base for now\n            rate = (utilization_rate * asset.under_optimal_slope) / asset.optimal_utilization_rate;\n        } else {\n            // rate = base +slope1 + (utilization - optimal) * slope2 / (1 - optimal) No base for now\n            rate = asset.under_optimal_slope + (utilization_rate - asset.optimal_utilization_rate) * asset.over_optimal_slope / (precision - asset.optimal_utilization_rate);\n        }\n        rate\n    }\n\n    #[utility]\n    #[view]\n    unconstrained fn get_position(owner: AztecAddress, market_id: Field, asset_address: AztecAddress) -> pub Position {\n        let scaled_user_deposited_asset_loc = storage.scaled_deposited_assets.at(market_id).at(asset_address).at(owner);\n        let scaled_user_deposited_asset: u128 = scaled_user_deposited_asset_loc.read();\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(asset_address);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n        let collateral = (scaled_user_deposited_asset * deposit_accumulator.value) / 1000000000 as u128;\n        let scaled_user_borrowed_amount_loc = storage.scaled_borrowed_assets.at(market_id).at(asset_address).at(owner);\n        let scaled_user_borrowed_amount: u128 = scaled_user_borrowed_amount_loc.read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n        let debt = (scaled_user_borrowed_amount * borrow_accumulator.value) / 1000000000 as u128;\n        Position { collateral, scaled_debt:scaled_user_borrowed_amount, debt }\n    }\n\n    #[utility]\n    #[view]\n    unconstrained fn get_total_deposited_assets(market_id: Field, asset_address: AztecAddress) -> u128 {\n        let scaled_total_deposited_asset = storage.scaled_total_deposited_assets.at(market_id).at(asset_address).read();\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(asset_address);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n        let total_deposited_assets = (scaled_total_deposited_asset * deposit_accumulator.value) / 1000000000 as u128;\n        total_deposited_assets\n    }\n\n    #[utility]\n    #[view]\n    unconstrained fn get_total_borrowed_assets(market_id: Field, asset_address: AztecAddress) -> u128 {\n        let scaled_total_borrowed_asset = storage.scaled_total_borrowed_assets.at(market_id).at(asset_address).read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n        let total_borrowed_assets = (scaled_total_borrowed_asset * borrow_accumulator.value) / 1000000000 as u128;\n        total_borrowed_assets\n    }\n}\n","path":"/home/jean/work/noir/lending/contracts/src/main.nr"},"56":{"source":"use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/capsules/mod.nr"},"57":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static: true }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr"},"64":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"65":{"source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"66":{"source":"use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr"},"67":{"source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/utility_context.nr"},"71":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/hash.nr"},"88":{"source":"use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"92":{"source":"use crate::{\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_notes` utility function PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    // TODO(https://github.com/noir-lang/noir/issues/7912): Doing the following unfortunately doesn't work. Once\n    // the issue is fixed uncomment the following and remove the workaround from TS (look for the issue link in the\n    // codebase).\n    // let utility: fn(FunctionDefinition) -> () = crate::macros::functions::utility;\n    // quote {\n    //     #[$utility]\n    //     unconstrained fn sync_notes() {\n    //     }\n    // }\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[aztec::macros::functions::utility]\n        unconstrained fn sync_notes() { }\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/aztec.nr"},"93":{"source":"use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr"},"96":{"source":"use crate::macros::utils::{\n    add_to_field_slice, AsStrQuote, compute_fn_selector, is_fn_private, is_fn_view,\n};\nuse std::meta::{type_of, unquote};\n\ncomptime global FROM_FIELD: TypedExpr = {\n    let from_field_trait = quote { protocol_types::traits::FromField }.as_trait_constraint();\n    let function_selector_typ =\n        quote { protocol_types::abis::function_selector::FunctionSelector }.as_type();\n    function_selector_typ.get_trait_impl(from_field_trait).unwrap().methods().filter(|m| {\n        m.name() == quote { from_field }\n    })[0]\n        .as_typed_expr()\n};\n\ncomptime global SERIALIZED_ARGS_SLICE_NAME: Quoted = quote { serialized_args };\n\npub comptime fn stub_fn(f: FunctionDefinition) -> Quoted {\n    let is_static_call = is_fn_view(f);\n    let is_void = f.return_type() == type_of(());\n\n    if is_fn_private(f) {\n        if is_static_call {\n            if is_void {\n                create_private_static_void_stub(f)\n            } else {\n                create_private_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_private_void_stub(f)\n            } else {\n                create_private_stub(f)\n            }\n        }\n    } else {\n        if is_static_call {\n            if is_void {\n                create_public_static_void_stub(f)\n            } else {\n                create_public_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_public_void_stub(f)\n            } else {\n                create_public_stub(f)\n            }\n        }\n    }\n}\n\n/// Utility function creating stubs used by all the stub functions in this file.\ncomptime fn create_stub_base(\n    f: FunctionDefinition,\n) -> (Quoted, Quoted, Quoted, Quoted, u32, Field) {\n    let fn_name = f.name();\n    let fn_parameters = f.parameters();\n    let fn_parameters_list =\n        fn_parameters.map(|(name, typ): (Quoted, Type)| quote { $name: $typ }).join(quote {,});\n\n    // Example of what the fold(...) below will generate for `target_address` and `fee_juice_limit_per_tx` function\n    // parameters:\n    // ```\n    // let mut serialized_args =  &[];\n    // serialized_args = serialized_args.append(aztec::protocol_types::traits::Serialize::serialize(target_address));\n    // serialized_args = serialized_args.push_back(fee_juice_limit_per_tx as Field);\n    // ```\n    let serialized_args_slice_construction = fn_parameters.fold(\n        quote {\n            let mut $SERIALIZED_ARGS_SLICE_NAME = &[];\n        },\n        |args, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let arg_to_append = add_to_field_slice(SERIALIZED_ARGS_SLICE_NAME, name, typ);\n            quote {\n                $args\n                $arg_to_append\n            }\n        },\n    );\n\n    let (fn_name_str, _) = fn_name.as_str_quote();\n    let fn_name_len: u32 = unquote!(quote { $fn_name_str.as_bytes().len()});\n    let fn_selector: Field = compute_fn_selector(f);\n\n    (\n        fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len,\n        fn_selector,\n    )\n}\n\ncomptime fn create_private_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_private_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_public_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_public_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/call_interface_stubs.nr"},"97":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr"},"100":{"source":"use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr"},"102":{"source":"use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, &[], true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/notes.nr"},"103":{"source":"use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/storage.nr"},"104":{"source":"use std::meta::unquote;\n\npub(crate) comptime fn get_fn_visibility(f: FunctionDefinition) -> Quoted {\n    if f.has_named_attribute(\"private\") {\n        quote { private }\n    } else if f.has_named_attribute(\"public\") {\n        quote { public }\n    } else {\n        panic(f\"Function is neither private nor public\")\n    }\n}\n\npub(crate) comptime fn is_fn_private(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"private\")\n}\n\npub(crate) comptime fn is_fn_public(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"public\")\n}\n\npub(crate) comptime fn is_fn_utility(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"utility\")\n}\n\npub(crate) comptime fn is_fn_contract_library_method(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"contract_library_method\")\n}\n\npub(crate) comptime fn is_fn_test(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"test\")\n}\n\npub(crate) comptime fn is_fn_view(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"view\")\n}\n\npub(crate) comptime fn is_fn_internal(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"internal\")\n}\n\npub(crate) comptime fn is_fn_initializer(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"initializer\")\n}\n\npub(crate) comptime fn fn_has_noinitcheck(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"noinitcheck\")\n}\n\n/// Takes a function body as a collection of expressions, and alters it by prepending and appending quoted values.\npub(crate) comptime fn modify_fn_body(body: [Expr], prepend: Quoted, append: Quoted) -> Expr {\n    // We need to quote the body before we can alter its contents, so we fold it by quoting each expression.\n    let mut body_quote = body.fold(quote {}, |full_quote: Quoted, expr: Expr| {\n        let expr_quote = expr.quoted();\n        quote {\n                $full_quote\n                $expr_quote\n            }\n    });\n    body_quote = quote {\n        {\n            $prepend\n            $body_quote\n            $append\n        }\n    };\n    let body_expr = body_quote.as_expr();\n    body_expr.expect(f\"Body is not an expression: {body_quote}\")\n}\n\npub(crate) comptime fn add_to_field_slice(slice_name: Quoted, name: Quoted, typ: Type) -> Quoted {\n    if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        quote { $slice_name = $slice_name.push_back($name as Field); }\n    } else if typ.as_data_type().is_some() {\n        // We invoke serialize as a static trait function rather than calling $name.serialize() directly in the quote\n        // to avoid \"trait not in scope\" compiler warnings.\n        quote { $slice_name = $slice_name.append(aztec::protocol_types::traits::Serialize::serialize($name)); }\n    } else if typ.as_array().is_some() {\n        let (element_type, _) = typ.as_array().unwrap();\n        let serialized_name = f\"{name}_serialized\".quoted_contents();\n        // We invoke serialize as a static trait function rather than calling x.serialize() directly in the quote\n        // to avoid \"trait not in scope\" compiler warnings.\n        quote {\n            let $serialized_name = $name.map(|x: $element_type | aztec::protocol_types::traits::Serialize::serialize(x));\n            for i in 0..$name.len() {\n                $slice_name = $slice_name.append($serialized_name[i].as_slice());\n            }\n        }\n    } else if typ.as_str().is_some() {\n        quote {\n            $slice_name = $slice_name.append($name.as_bytes().map(| byte: u8 | byte as Field).as_slice());\n        }\n    } else {\n        panic(\n            f\"Cannot add to slice: unsupported type {typ} variable {name}\",\n        )\n    }\n}\n\n/// Adds a value to a hash::ArgsHasher. Structs and values inside arrays are required to implement the Serialize trait.\npub(crate) comptime fn add_to_hasher(hasher_name: Quoted, name: Quoted, typ: Type) -> Quoted {\n    if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        quote { $hasher_name.add($name as Field); }\n    } else if typ.as_data_type().is_some() {\n        quote { $hasher_name.add_multiple(dep::aztec::protocol_types::traits::Serialize::serialize($name)); }\n    } else if typ.as_array().is_some() {\n        let (element_type, _) = typ.as_array().unwrap();\n        let serialized_name = f\"{name}_serialized\".quoted_contents();\n        quote {\n           let $serialized_name = $name.map(|x: $element_type | dep::aztec::protocol_types::traits::Serialize::serialize(x));\n            for i in 0..$name.len() {\n                $hasher_name.add_multiple($serialized_name[i]);\n            }\n        }\n    } else if typ.as_str().is_some() {\n        quote {\n            $hasher_name.add_multiple($name.as_bytes().map(| byte: u8 | byte as Field));\n        }\n    } else {\n        panic(\n            f\"Cannot add to hasher: unsupported type {typ} of variable {name}\",\n        )\n    }\n}\n\ncomptime fn signature_of_type(typ: Type) -> Quoted {\n    if typ.is_field() {\n        quote {Field}\n    } else if typ.as_integer().is_some() {\n        let (is_signed, bit_size) = typ.as_integer().unwrap();\n        if is_signed {\n            f\"i{bit_size}\".quoted_contents()\n        } else {\n            f\"u{bit_size}\".quoted_contents()\n        }\n    } else if typ.is_bool() {\n        quote {bool}\n    } else if typ.as_str().is_some() {\n        let str_len_typ = typ.as_str().unwrap();\n        let str_len = str_len_typ.as_constant().unwrap();\n        f\"str<{str_len}>\".quoted_contents()\n    } else if typ.as_array().is_some() {\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let element_typ_quote = signature_of_type(element_type);\n        f\"[{element_typ_quote};{array_len}]\".quoted_contents()\n    } else if typ.as_data_type().is_some() {\n        let (s, generics) = typ.as_data_type().unwrap();\n        let field_signatures = s\n            .fields(generics)\n            .map(|(_, typ): (Quoted, Type)| signature_of_type(typ))\n            .join(quote {,});\n        f\"({field_signatures})\".quoted_contents()\n    } else if typ.as_tuple().is_some() {\n        // Note that tuples are handled the same way as structs\n        let types = typ.as_tuple().unwrap();\n        let field_signatures = types.map(|typ: Type| signature_of_type(typ)).join(quote {,});\n        f\"({field_signatures})\".quoted_contents()\n    } else {\n        panic(f\"Unsupported type {typ}\")\n    }\n}\n\npub(crate) trait AsStrQuote {\n    fn as_str_quote(self) -> (Self, u32);\n}\n\nimpl<let N: u32, Env> AsStrQuote for Quoted {\n    // Used to convert an arbitrary quoted type into a quoted string, removing whitespace between tokens\n    comptime fn as_str_quote(self) -> (Quoted, u32) {\n        let tokens = self.tokens();\n        let mut acc: [u8] = &[];\n        let mut total_len: u32 = 0;\n        for token in tokens {\n            let token_as_fmt_str = f\"{token}\";\n            let token_as_str = unquote!(quote {$token_as_fmt_str});\n            let token_len = unquote!(quote { $token_as_str.as_bytes().len() });\n            let token_as_bytes = unquote!(quote { $token_as_str.as_bytes().as_slice() });\n            total_len += token_len;\n            acc = acc.append(token_as_bytes);\n        }\n        let result = unquote!(\n            quote {\n                let signature_as_array: [u8; $total_len] = $acc.as_array();\n                signature_as_array.as_str_unchecked()\n            },\n        );\n        (quote { $result }, total_len)\n    }\n}\n\npub(crate) comptime fn compute_fn_selector(f: FunctionDefinition) -> Field {\n    // The function selector is computed from the function signature, which is made up of the function name and types of\n    // parameters, but not including the return type. For example, given:\n    //\n    // fn foo(a: Field, b: AztecAddress) -> Field\n    //\n    // The signature will be \"foo(Field,AztecAddress)\".\n    let fn_name = f.name();\n    let args_signatures =\n        f.parameters().map(|(_, typ): (Quoted, Type)| signature_of_type(typ)).join(quote {,});\n    let signature_quote = quote { $fn_name($args_signatures) };\n    let (signature_str_quote, _) = signature_quote.as_str_quote();\n\n    let computation_quote = quote {\n        protocol_types::traits::ToField::to_field(protocol_types::abis::function_selector::FunctionSelector::from_signature($signature_str_quote))\n    };\n    unquote!(computation_quote)\n}\n\npub(crate) comptime fn compute_event_selector(s: TypeDefinition) -> Field {\n    // The event selector is computed from the type signature of the struct in the event, similar to how one might type\n    // the constructor function. For example, given:\n    //\n    // struct Foo {\n    //   a: Field,\n    //   b: AztecAddress,\n    // }\n    //\n    // The signature will be \"Foo(Field,AztecAddress)\".\n    let event_name = s.name();\n    let args_signatures = s\n        .fields_as_written()\n        .map(|(_, typ): (Quoted, Type)| {\n            // signature_of_type can handle structs, so this supports nested structs\n            // FIXME: Field generics are not handled here!\n            signature_of_type(typ)\n        })\n        .join(quote {,});\n    let signature_quote = quote { $event_name($args_signatures) };\n    let (signature_str_quote, _) = signature_quote.as_str_quote();\n\n    let computation_quote = quote {\n        protocol_types::traits::ToField::to_field(protocol_types::abis::event_selector::EventSelector::from_signature($signature_str_quote))\n    };\n    unquote!(computation_quote)\n}\n\n/// Returns how many storage slots a type needs to reserve for itself. State variables must implement the Storage trait\n/// for slots to be allocated for them.\npub(crate) comptime fn get_storage_size(typ: Type) -> u32 {\n    // We create a type variable for the storage size. We can't simply read the value used in the implementation because\n    // it may not be a constant (e.g. N + 1). We then bind it to the implementation of the Storage trait.\n    let storage_size = std::meta::typ::fresh_type_variable();\n    assert(\n        typ.implements(quote { crate::state_vars::Storage<$storage_size> }.as_trait_constraint()),\n        f\"Attempted to fetch storage size, but {typ} does not implement the Storage trait\",\n    );\n\n    storage_size.as_constant().unwrap()\n}\n\npub(crate) comptime fn module_has_storage(m: Module) -> bool {\n    m.structs().any(|s: TypeDefinition| {\n        s.has_named_attribute(\"storage\") | s.has_named_attribute(\"storage_no_init\")\n    })\n}\n\npub(crate) comptime fn module_has_initializer(m: Module) -> bool {\n    m.functions().any(|f: FunctionDefinition| is_fn_initializer(f))\n}\n\npub(crate) comptime fn is_note(typ: Type) -> bool {\n    typ.as_data_type().map_or(false, |struc: (TypeDefinition, [Type])| {\n        let (def, _) = struc;\n        def.has_named_attribute(\"note\")\n            | def.has_named_attribute(\"partial_note\")\n            | def.has_named_attribute(\"custom_note\")\n    })\n}\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `noir-protocol-circuits/crates/types/src/meta/mod.nr`. We maintain separate\n/// copies because importing it here from there would cause the `target_trait` to be interpreted in the context\n/// of the protocol circuits types crate, making it impossible to compile code for traits from this crate\n/// (e.g. NoteType).\npub(crate) comptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Type does not implement trait\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/utils.nr"},"105":{"source":"use protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr"},"106":{"source":"use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash =\n            compute_unique_note_hash(nonce, compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash));\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.nonce, note_and_data.nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == first_note_and_data.nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == second_note_and_data.nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr"},"107":{"source":"use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    pending_partial_notes.for_each(|i, pending_partial_note: DeliveredPendingPartialNote| {\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log sans the extra\n            // fields) to get the complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                // temporary node connectivity issue - is simply throwing good enough here?\n                assert(\n                    deliver_note(\n                        contract_address,\n                        pending_partial_note.storage_slot,\n                        discovered_note.nonce,\n                        complete_packed_note,\n                        discovered_note.note_hash,\n                        discovered_note.inner_nullifier,\n                        log.tx_hash,\n                        pending_partial_note.recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr"},"109":{"source":"use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{\n            ComputeNoteHashAndNullifier,\n            partial_notes::process_partial_note_private_msg,\n            pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n            private_notes::process_private_note_msg,\n        },\n        encoding::decode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        msg_type::{\n            PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n        },\n    },\n    oracle::{logs::store_private_event_log, message_discovery::sync_notes},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `syncNotes` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    sync_notes(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get the logs from the capsule array and process them one by one\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    logs.for_each(|i, log: PendingTaggedLog| {\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n        logs.remove(i);\n    });\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(log_plaintext);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            pending_tagged_log.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        // In the case of events, the msg metadata is the event selector.\n        let event_selector = EventSelector::from_field(msg_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            msg_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n            pending_tagged_log.tx_index_in_block,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_logs.nr"},"110":{"source":"use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n        // issue, and we should perhaps not have marked the tag index as taken.\n        assert(\n            oracle::message_discovery::deliver_note(\n                contract_address,\n                storage_slot,\n                discovered_note.nonce,\n                packed_note,\n                discovered_note.note_hash,\n                discovered_note.inner_nullifier,\n                tx_hash,\n                recipient,\n            ),\n            \"Failed to deliver note\",\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr"},"111":{"source":"// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\nglobal MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/encoding.nr"},"112":{"source":"use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr"},"133":{"source":"use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr"},"136":{"source":"use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"139":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr"},"140":{"source":"use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr"},"141":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(notifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"142":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"143":{"source":"/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr"},"144":{"source":"use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"149":{"source":"use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"150":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"151":{"source":"use crate::messages::encoding::MAX_MESSAGE_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        msg_content,\n        tx_hash,\n        log_index_in_tx,\n        tx_index_in_block,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr"},"152":{"source":"use crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn sync_notes(pending_tagged_log_array_base_slot: Field) {\n    sync_notes_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr"},"154":{"source":"use crate::{\n    note::{note_interface::NoteType, note_metadata::NoteMetadata, retrieved_note::RetrievedNote},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::IndexedTaggingSecret,\n    traits::{FromField, Packable},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {\n    // This wrapper exists to extract the ORACLE_RETURN_FIELD_LENGTH generic numeric param into a value and pass it to\n    // the oracle, so that it knows how big the return array must be.\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        ORACLE_RETURN_FIELD_LENGTH,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let MAX_NOTES: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    _placeholder_fields: [Field; ORACLE_RETURN_FIELD_LENGTH], // TODO: Compute this value automatically from MAX_NOTES\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let fields: [_; ORACLE_RETURN_FIELD_LENGTH] = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n\n    let mut opt_notes = [Option::none(); MAX_NOTES];\n    for i in 0..opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let maybe_nonce = fields[read_offset];\n            let maybe_note_hash_counter = fields[read_offset + 1] as u32;\n            let packed_note = array::subarray(fields, read_offset + 2);\n\n            let note = Note::unpack(packed_note);\n            let retrieved_note = RetrievedNote {\n                note,\n                contract_address,\n                metadata: NoteMetadata::from_raw_data(maybe_note_hash_counter != 0, maybe_nonce),\n            };\n\n            opt_notes[i] = Option::some(retrieved_note);\n        };\n    }\n    opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"156":{"source":"use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr"},"157":{"source":"use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"159":{"source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"168":{"source":"use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"182":{"source":"/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/append.nr"},"185":{"source":"/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr"},"186":{"source":"use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr"},"188":{"source":"use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr"},"189":{"source":"// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr"},"191":{"source":"use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/field.nr"},"193":{"source":"use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/point.nr"},"221":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr"},"223":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"266":{"source":"use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"269":{"source":"use crate::{\n    address::{aztec_address::AztecAddress, salted_initialization_hash::SaltedInitializationHash},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    pub inner: Field,\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress,\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer),\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n    ) -> Self {\n        PartialAddress::from_field(poseidon2_hash_with_separator(\n            [contract_class_id.to_field(), salted_initialization_hash.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr"},"271":{"source":"use crate::{\n    address::aztec_address::AztecAddress, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    pub inner: Field,\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(poseidon2_hash_with_separator(\n            [salt, initialization_hash, deployer.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr"},"276":{"source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress},\n    constants::CONTRACT_INSTANCE_LENGTH,\n    contract_class_id::ContractClassId,\n    public_keys::PublicKeys,\n    traits::{Deserialize, FromField, Hash, Serialize, ToField},\n};\n\npub struct ContractInstance {\n    pub salt: Field,\n    pub deployer: AztecAddress,\n    pub contract_class_id: ContractClassId,\n    pub initialization_hash: Field,\n    pub public_keys: PublicKeys,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys.eq(other.public_keys)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        let public_keys_serialized = self.public_keys.serialize();\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            public_keys_serialized[0],\n            public_keys_serialized[1],\n            public_keys_serialized[2],\n            public_keys_serialized[3],\n            public_keys_serialized[4],\n            public_keys_serialized[5],\n            public_keys_serialized[6],\n            public_keys_serialized[7],\n            public_keys_serialized[8],\n            public_keys_serialized[9],\n            public_keys_serialized[10],\n            public_keys_serialized[11],\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys: PublicKeys::deserialize([\n                serialized[4],\n                serialized[5],\n                serialized[6],\n                serialized[7],\n                serialized[8],\n                serialized[9],\n                serialized[10],\n                serialized[11],\n                serialized[12],\n                serialized[13],\n                serialized[14],\n                serialized[15],\n            ]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    pub fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer,\n            ),\n        )\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"283":{"source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr"},"284":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"298":{"source":"use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_data_type().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_data_type().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr"},"300":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"301":{"source":"use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr"},"310":{"source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize, ToField},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr"},"321":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"335":{"source":"use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"339":{"source":"use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr"},"340":{"source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"356":{"source":"pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr"},"359":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"365":{"source":"use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n","path":"/home/jean/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr"},"396":{"source":"use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER},\n        hash::poseidon2_hash_with_separator,\n        traits::{Deserialize, Hash, Packable, Serialize, ToField},\n        utils::arrays::array_concat,\n    },\n};\n\n// UintNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the amount).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n/// A private note representing a numeric value associated to an account (e.g. a token balance).\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct UintNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The number stored in the note.\n    value: u128,\n}\n\nimpl NoteHash for UintNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because UintNote has just one variant (where the value is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            UintPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note = PartialUintNote {\n            commitment: private_content.compute_partial_commitment(storage_slot),\n        };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.value)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: u128, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness }\n    }\n\n    pub fn get_value(self) -> u128 {\n        self.value\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the value, since the note will be later\n    /// completed in public. This is a powerful technique for scenarios in which the value cannot be known in private\n    /// (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// The returned `PartialUintNote` value must be sent to public execution via a secure channel, since it is not\n    /// possible to verify the integrity of its contents due to it hiding information. The recommended ways to do this\n    /// are to retrieve it from public storage, or to receive it in an internal public function call.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` from `sender` so that they can\n    /// discover the note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        sender: AztecAddress,\n    ) -> PartialUintNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = UintPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        let encrypted_log =\n            note::compute_partial_note_log(private_log_content, storage_slot, recipient, sender);\n        context.emit_private_log(encrypted_log);\n\n        PartialUintNote { commitment }\n    }\n}\n\n/// The private content of a partial UintNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct UintPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of UintNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl UintPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            array_concat(self.pack(), [storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateUintPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateUintPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        UintNote::get_id()\n    }\n}\n\n/// A partial instance of a UintNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the value field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the value to the public), resulting in a UintNote that can be used like any other one (except\n/// of course that its value is known).\n#[derive(Packable, Serialize, Deserialize)]\npub struct PartialUintNote {\n    commitment: Field,\n}\n\nimpl PartialUintNote {\n    pub fn commitment(self) -> Field {\n        self.commitment\n    }\n}\n\nimpl PartialUintNote {\n    /// Completes the partial note, creating a new note that can be used like any other UintNote.\n    pub fn complete(self, value: u128, context: &mut PublicContext) {\n        // A note with a value of zero is valid, but we cannot currently complete a partial note with such a value\n        // because this will result in the completion log having its last field set to 0. Public logs currently do not\n        // track their length, and so trailing zeros are simply trimmed. This results in the completion log missing its\n        // last field (the value), and note discovery failing.\n        // TODO(#11636): remove this\n        assert(value != 0, \"Cannot complete a PartialUintNote with a value of 0\");\n\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the value). The contract will later find it by searching\n        //  for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(value));\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    fn compute_note_completion_log(self, value: u128) -> [Field; 2] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, value.to_field()]\n    }\n\n    fn compute_complete_note_hash(self, value: u128) -> Field {\n        // Here we finalize the note hash by including the (public) value into the partial note commitment. Note that we\n        // use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator(\n            [self.commitment, value.to_field()],\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\nmod test {\n    use super::{\n        PartialUintNote, PrivateUintPartialNotePrivateLogContent, UintNote,\n        UintPartialNotePrivateContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Packable},\n            utils::arrays::array_concat,\n        },\n        utils::array::subarray,\n    };\n\n    global value: u128 = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a UintNote has the same note hash as a PartialUintNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = UintNote { value, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialUintNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(value);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular UintNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular UintNote.\n\n        let note = UintNote { value, randomness, owner };\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        let partial_note = PartialUintNote { commitment };\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(value)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in UintNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(value), 1);\n\n        assert_eq(\n            array_concat(private_log_without_public_tag, public_log_without_tag),\n            note.pack(),\n        );\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/uint-note/src/uint_note.nr"}}}