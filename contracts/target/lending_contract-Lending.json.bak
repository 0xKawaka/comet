{"noir_version":"1.0.0-beta.4+0000000000000000000000000000000000000000","name":"Lending","functions":[{"name":"borrow_public","hash":"12296407488885726513","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"1Z3dbts4EIXfxde54PyQnOmrLIogSd3AgGEHTrLAIui7r+xashNrrS2tI4g3gVVzzvki6HAsmUw/Fj+Wj+/P96vNz+3r4ttfH4v19unhbbXdNEcfv+4Wj7vVer16vj//50XY/2A+jH99edjsD1/fHnZvi28krPFusdz82L8WC43Gz9V62RyF5vXl+MDcDg/K3WjPPYPVQz4OVqfUDU6xZ7Cp2nGwadLzwd/vFizj0Lu3w4l8Onodhz5ad+5t4NxTzC09JZHr9B5Fj4O9qftKH8emJ/5Ev/dIE3jkPo/k0lokj7GriQK+JqyfJuWOxgZoYrBwHNy8tAGaSO3vaVHCVxrvp2HpaFK6TnP915WANiC0AaMNBG2gaIOINkhog4w2MLQBOsmKTrKik6zoJCs6yXp7kjlR+1mI01nPbz7WHRwi3CHBHTLcweAOjnaIAe5AcAeGOwjcAZ7pCM90hGc6wjMdb890knbuTvF06+XpIO9Q+RSw8oSVZ6y8YOUVKx+x8gkrn7Hy2NQmbGozNrUZm9p8e2rJQvsEiozsqwE2txmb24zNbcbmNmNzm7G5zdjcGja3hs2tYbutYVNr2NQaNrWGTa1hU2vY1Bo2tY5NrWNT69jUOvxG1+E3ug6/0XX4ja7Db3Qd/vDK4Q+vmu8B8RaEt2C8heAtFG8R8RYJb4HtzhQMrI/tz0QBrE9gfQbrC1hfwfoRrJ/A+uD80lB+c+B8Xb/JaErtE5XgdvoGMebfHo734DCBB93u0Yh0i6WINZ57XA6XoHQcLSF+WgR0AOK5AcncgHRuQHFuQGluQHluQDY3IJ8eyNvRwvkTUN88Sjl08yjL1xUlJKFyfqqcnyvnl8r5p29KktrPgCJn67n/gz+LdPw5XvJP38NU2jMqqnmI38Lpc5xdLEAmmb7lKdGJ34b4vVs/3byOdsGfK+e3yvm9bn4NlfNT5fxcOb9Uzq+V88fK+Svvv1p5/9XK+69W3n9j5f03Vt5/45zm/wPQnCb0A9CcZugD0PRTbuR2majEwVvO5p7gtB1YWS74rXJ+r5s/hcr5qXL+MW4ZxPTkEfic/+ChE3jECTzSBB6982mm7g8UZJrwDxRQ/5aKHIw7nLPHqL04nwbbp/NzcHC0Q//GilEd6GaHoeVC/fsrxrUQvIXiLSLeIuEtMt7C8BYOt7CAt8Cn2/DpNny6DZ9uuz3dV1ddWQLrZ7C+gfUdq+8BrE9gfQbrC1hfwfrg/Do4vw7Or4Pz6/COzCHgLQhvwXgLwVso3iLiLRLeIuMtDG+BTzfh0034dBM+3YTt1EwK1o9g/QTWz2B9A+tjP2kzB7A+gfUZrA/OL4Pzy+D8Mji/DM4vg/PL4PwKOL8Czq+A8yvg/Ao4vwLOr4DzK+D8Cji/As6vgvOr4PwqOL8Kzq+C86vD+bWhL4uTdtslUjrtltCjQ4I7ZLiD3e4w5hY+Vp8ZUAxzA6K5AfHcgGRuQDo3oDg3oDQ90Ig7Fznmyvmtcn6vmz+Fyvmnb0pj7tzlNH0PG3PnLqfpW96YOw84aeX8sXL+VDl/rpzfKuf3uvlzqJyfKufnyvkr77//Y2H4vPkr77+58v6bK++/ufL+a3Oa/w9Ac5rQD0BzmqEPQNNPuWPuXGSLlfOnyvlz5fxWN7+PcctwfTcqO03gwRN4CNxD+hdCk2pXpfHk0Tzx+F2ViqpyUZUVVXlJVf864cGq3uuNTkttKfHp2akei7ikSEqKUklR//m7+r249K/OHCrSArz+dYJDRSUnon9F31CRlRR5QZGEkqKSC1ZKLlgpuWCl5IqQWHDtSSopyiVFVlJUEkItCaFSSRGXFElJkf5p0a/m6O+H3erhcb18bWr2b75vnt5W283x8O2fl/adx91qvV4937/stk/LH++75f16+7R/bxH2P/bmovmuaZ8NzP460yB3TSf4vv8fRZpD9ngnIewP9+dRAjWH0jA0HP8C","names":["borrow_public"],"brillig_names":["borrow_public"]},{"name":"get_total_borrowed_assets","hash":"10882890731369331842","is_unconstrained":true,"custom_attributes":["utility","view"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_total_borrowed_assets"],"brillig_names":["get_total_borrowed_assets"]},{"name":"repay_public","hash":"9826994799100394905","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"1Z3dbuI6FIXfhWsuvH9sb8+rHI2q/jAVEoKKtkc6qubdj8OQQEtKNCYrim9QUrz3+ghZ3k5i04/F0+rh/fluvf21e138+Odjsdk93r+td9u89/F7uXjYrzeb9fPd+Z8XrnlhObR/fbnfNruvb/f7t8UPEla/XKy2T822mMs5fq03q7zn8vZle8fcNnfKXesUexprcvHYWBOFrnHwPY1N1Y6NTYOeN/65XLCOQ59S25woTUfvx6H31h17Gzj25GNLT0HkOn3yosfGKcd9pQ9j0xN/om804gQa1qehIqH9msWfvjkvPQLemTs2zps2cE54auHNi/t6VFM/TfcJVKJdpxnxDBXXS8OJOxrx12muf1whtACjBQQtoGgBjxYIaIGIFjC0QAILKNrJinayop2saCcr2sl6u5M5UDsW4nBW8/Ow7qAQ4AoRrmBwhYRW8A6uQHAFhisIXEHhCnBPe7inPdzTHu5pf7ung7RD7eBPl14pNOmDw6YnbHrGphdsesWm99j0AZs+YtMbNj3WtRHr2oh1bcS6NsKrb4RX3wivvhFefSO8+kZ49Y3wEbXBR9QGH1EbfERtcE8b3NMG97TBPW3YqmzYqmzYqpywVTlhq3LCVuWEHUsn7Fg6YcfSCTuWTljXJqxrE9a1+dkdOP/tviVz7RNRMrILBQZ/AgHnV3B+D84fwPkjOL+B84MdTGAHE4Hzg/1LYP8S2L8E9i+B/Utg/xLYvzToX3U0UMFcCu3ElrxtZzNbDrNhiN0EGjSBBt+ukUG72VLE6s81LpuLUzq2Fuc/zbs5AMncgHRuQH5uQGFuQHFuQDY3oDQzIHHTA6W2tXAcmP+Xr4qi6/pRFr3gp8r5uXJ+qZxfK+efvihJaMeAImcTur/hjyIdf/SX/NPXMJX2iIpqHOI3dxrH2cWUNpLpS54SnfhtiD91M/LytrcLfqucP9XNr65yfqqcnyvnl8r5tXJ+Xzl/qJy/8vqrlddfrbz++srrr6+8/vrK66+fU/9/AJpTh34AmlMPfQCavsv13D6XFz94yZmvaU7rgZXlgj/VzR9c5fxUOT9Xzq8j8IvpScPxOf9Bw0+gESbQiBNo9Pen2v0IgmoYeKw84m8C0DdrKrS7D5lv+g3hnDX2/On4NArfLKsYU4HgCnyzwsAcYPpmgcWoEoqX8HiJgJeIeAnDSyS4hDm8BOEl8O42vLsN727Du9tud/fVWVcWwfkNnD9h8ycHzk/g/AzOL+D8Cs7vwfnB/k1g/yawfxPWv+wcOD+B8zM4v4DzKzi/B+cP4PwRnN/A+cH+JbB/CexfAvuXwP4lsH8J7F8C+5fA/iWwfwnsX4ZfETMTXoLxEoKXULyEx0sEvETESxheAn6/iwXvbsG7W/DuFry7BVypBVypBVypBVypBVypBVypFTzSVvBIW8EjbQWPtBXsXx3075cHfT0Pc4N2yxlCOK1m0KNCgCtEuILdrjDmEjvWNDMg7+YGRHMD4rkBydyAdG5Afm5AYXqgEVcWso+V81vl/Klu/uAq55++KI25spbD9DVszJW1HKYveWOuDOCglfP7yvlD5fyxcn6rnD/VzR9d5fxUOT9Xzl95/R2eGz5z/srrb6y8/sbK62+svP7anPr/A9CcOvQD0Jx66APQ9F3umCsL2Xzl/KFy/lg5v9XNn8a4ZLi+WpQTTaDBE2gIXEP6p0aTahel/vSd5zsef6JCUVQsirKiqFQS1T+ReDCq93yj01QcCny6d6rHIC4JkpKgUBLUf/yuPheX/nmcQ0FagNc/hXAoqORA9E/zGwqykqBUECSuJKjkhJWSE1ZKTlgpOSPEF5x7EkqCYkmQlQSVmFBLTKhUEsQlQVISpH8b9Dvv/Xu/X98/bFavOaZ58337+LbebY+7b/+9tO887Nebzfr57mW/e1w9ve9Xd5vdY/PewjUvjbhoXObymWGa80ydLHMl+Nn8R5G8y8kvxblmtzmO4ijvSmbIHP8D","names":["repay_public"],"brillig_names":["repay_public"]},{"name":"compute_total_deposited_assets","hash":"15078958202233558575","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"deposit_accumulator","type":{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["compute_total_deposited_assets"],"brillig_names":["compute_total_deposited_assets"]},{"name":"sync_notes","hash":"11458989905199010708","is_unconstrained":true,"custom_attributes":["aztec::macros::functions::utility"],"abi":{"parameters":[],"return_type":null,"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["sync_notes"],"brillig_names":["sync_notes"]},{"name":"withdraw_public","hash":"16601576353969289929","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["withdraw_public"],"brillig_names":["withdraw_public"]},{"name":"update_accumulators","hash":"10900224325530215840","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"12348881442450494403":{"error_kind":"string","string":"Function _compute_utilization_rate can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17134621154673181869":{"error_kind":"string","string":"Function _compute_borrow_rate can only be called internally"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["update_accumulators"],"brillig_names":["update_accumulators"]},{"name":"get_accumulators","hash":"3590572983931561812","is_unconstrained":true,"custom_attributes":["utility","view"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]},{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]}]},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_accumulators"],"brillig_names":["get_accumulators"]},{"name":"_deposit","hash":"10264973027141936381","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"951653053333916160":{"error_kind":"string","string":"Deposit cap exceeded"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5235018679007078561":{"error_kind":"string","string":"Invalid asset or market id"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"16022896159229267359":{"error_kind":"string","string":"Function _deposit can only be called internally"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"","names":["_deposit"],"brillig_names":["_deposit"]},{"name":"_withdraw","hash":"4557201320735915032","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5235018679007078561":{"error_kind":"string","string":"Invalid asset or market id"},"6787403583199288031":{"error_kind":"string","string":"Insufficient balance"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"10435052277855889085":{"error_kind":"string","string":"Function _withdraw can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"15333773746166717806":{"error_kind":"string","string":"Insufficient collateral"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","names":["_withdraw"],"brillig_names":["_withdraw"]},{"name":"_repay","hash":"17925370460584879180","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5235018679007078561":{"error_kind":"string","string":"Invalid asset or market id"},"6787403583199288031":{"error_kind":"string","string":"Insufficient balance"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13135008234568508716":{"error_kind":"string","string":"Function _repay can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","names":["_repay"],"brillig_names":["_repay"]},{"name":"_liquidate","hash":"9601692889037806180","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"debt_token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"user","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"debt_to_liquidate_amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"1840251649407153602":{"error_kind":"string","string":"Insufficient borrowed amount"},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14434150440419769526":{"error_kind":"string","string":"collateral >= debt"},"15333773746166717806":{"error_kind":"string","string":"Insufficient collateral"},"16523063005220065570":{"error_kind":"string","string":"Function _liquidate can only be called internally"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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","names":["_liquidate"],"brillig_names":["_liquidate"]},{"name":"borrow_private","hash":"5990837159010202138","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["borrow_private"],"brillig_names":["discover_new_messages","decompose_hint","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper","store_in_execution_cache_oracle_wrapper","call_private_function_internal","directive_invert"]},{"name":"deposit_public","hash":"6236631132068823921","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"on_behalf_of","type":{"kind":"field"},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["deposit_public"],"brillig_names":["deposit_public"]},{"name":"get_total_deposited_assets","hash":"11477870056684752501","is_unconstrained":true,"custom_attributes":["utility","view"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_total_deposited_assets"],"brillig_names":["get_total_deposited_assets"]},{"name":"withdraw_private","hash":"18339564046988728698","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"7b3bris9cqX7LnVdFzwET/0qjYZhu70bBRTshu3ewEbD7761lmamci4xRYkzkmSQ46YwV/1JKfiNUDJGpET+37/8z3/5p//zv/7hb//6//zbf/zlv/33//uXv//bP//jf/7t3/719q//+xdNv/+///jf//ivv/75H//5j//+n3/5b8ZR+Otf/uVf/+ftT6/Nf/31L//P3/7+L3/5b1qp//rr89WG1Ha18Y+rg85cbFVyXxdb7ePri7VLerv69rd5XG4i5a73Lm6X+xD2q63Kvrr1druatPp29f/461+0A5ozNB5oztCEwdE480DjfQGN0cZvkWhyP0QTgeYMTQKaEzRGAc0ZGp1FQ1E/0NgCGtKavq4m7R5v4en3O5jL38Hm3kFbQ/st3NqoCu9xu17vl7uHCClkLk4pbblzezVNx4hyipE7SBbdnxMg6RNw+QlEtb+JPSb2rwn8GpatAZLV6WtUugm/D3I2lxl2++gQPbLImd8vH659+Xjty6efv/wuGoU/X96qa19eX/vy5ucvb7ZrKT69vP3xyzu9pb6jdHz550tD1NstOsRgSrd/+/go2kPkOuUWIk/bPcH6SMeLf02TZplmoC3k2z1H/zlNt4aafg01w8DT9GG72gRj/4w8v2DQvmwnFwuRax3dNs/b3/ERkAvZhNkXGBsOVMbzvDaBzRkbUmBzykaDzSkbAzanbCzYnLIhsDll48DmlI0Hm1M2YXQ2/XqQNHxd3JENS12c9vh1sqnAJmxZT/bgvW79qVs4jqMUTfSQKiX/OhydXNo/hsnrb63HzzuVTkufgGk/gWDUPoF46MVlJ5DcfpPVh3vsLbl/h5+vu4LfBqVoiu59/3w56x/Z/Gsez9ms98c2VjtXSH0xj20cASMHRlfESOE1Rmv3D4c9Yqy4t3qGYMLeOSNb+lx7s3ertKeY/rzThMHiiY3jCYcCMPjnO3EaKx6vWOPxh85rNh6Ttg+iVY8P+e0D/D9u//inf//b3//+t//1D9++KaZ+/Y8+eeSc1N7bVt8eFf5+IqNPHiOXRtmqUVQ1ylWN8lWjQtWoWDUq1YzKP18sjqrKDVuVG7YqN2xVbtiq3LBVuWGrcsNW5Yatyg2qyg2qyg2qyg2qyg2qyg2qyg2qyg2qyg2qyg2qyg1XlRuuKjdcVW64qtxwVbnhqnLDVeWGq8oNV5Ubrio3fFVu+Krc8FW54atyw1flhq/KDV+VG74qN3xVbviq3AhVuRGqciNU5Uaoyo1QlRuhKjdCVW6EqtwIVbkRqnIjVuVGrMqNWJUbMZsbVrmHxUrhMMrdR1HVKFc1yleNClWjYtWobG5YrbavDltj0rdRuW6U93sL4tt3wnNfVKJoHx20x7X37xDqpBjiiWrvpkYdC/E4H7arnT9+qdHfA9KjBWRGC8iOFhCNFpAbLSA/WkBhtIDiaAGlsQIyarA7tVHt79SB9qdBwdExoEzn1+1fijUu6NcXx/15YAyHRZKyP7K6Na+2F755+v1qyn0118RHSfXt0t8EDQj+kKAFwR8SJBD8IUEHgj8k6EHwhwQDCP6QYATBHxJMIPgzglqB4A8JwpP8lCA8yU8JwpP8lCCB4A8JwpP8lCA8yU8JwpP8lCA8yU8JwpP8kKCBJ/kpQXiSnxKEJ/kpQXiSnxIkEPwhQXiSnxKEJ/kpQXiSnxKEJ/kpwR6eRD8IxtdQdNy/warTcXu47EtrSvuv9N1h67mv7whZtdBc9UJzNQvN1S40V1porm6hufqF5hoWmmtcaK4L1U20UN1EC9VNtFDdRAvVTbRQ3UQL1U20UN1EC9VNtFDdRAvVTW6husktVDe5heomt1Dd5Baqm9xCdZNbqG5yC9VNbqG6yS1UN/mF6ia/UN3kF6qb/EJ1k1+obvIL1U1+obrJL1Q3+YXqJr9Q3RQWqpvCQnVTWKhuCgvVTWGhuiksVDeFheqmsFDdFBaqm8JCdVNcqG6KC9VNcaG6KS5UN8WF6qa4UN0UF6qb4kJ1U1yobooz1U0m+f1wQ3U4C/SMTKCdjD68dsxF4tV2MqM3h587xt8nU5g0U0nWEeNM1V5HjDMVkh0xzlSjdsRIwMiBcabKuiPGmYr2jhhn8gMdMc5kNTpihIthwGgVXAwLRrgYFoxwMSwYZ3Ixt9mEHWMqBaJ1MPuL66QOr67N1dgJ2Htgn8klCcI+k6sShH0mFyYI+0yuTRD2mVyeHOx6JlcoCPtMLlIQ9plcpyDscKldsBOw98AOl9oFO1xqF+wLu1Sj3BaJNrcZF7Cbm0xflxsdD1BizF0d1H51MI/v9vk79oVdak/sC7vUjtjNwi61J/aFXWpP7Au71J7YF3apPbETsPfAvrBL7Yl9YZfaEztcahfscKldsMOl9sA+1ZF+grCv7FJtjDt2olLj1/g9FuO9e1ydbC4WbbYXvz3UOF6tc1fbsEduk/129W+ZVna1gmRa2QULkokgkwSZVnbZgmRa2ZULkmllFy9IppVdvyCZVu4SyJFpqgNvJ5YJXQgRMqELIUImdCFEyESQSYJM6EKIkAldCBEyoQshQiZ0IUTIhC6EBJmmOj5+YpnQhRAhE7oQImRCF0KETASZJMiELoQImdCFECETuhAiZEIXQoRM6EJIkMmjCyFCJnQhRMiELoQImdCFECETQSYJMqELIUImdCFEyIQuhAiZ0IUQIRO6EBJkCuhCiJAJXQgRMqELIUImdCFEyESQSYJM6EKIkAldCBEyoQshQiZ0IUTIhC6EBJkiuhAiZEIXQoRM6EKIkAldCBEyEWSSIBO6ECJkQhdChEzoQoiQCV0IETKhCyFBpoQuhAiZ0IUQIRO6ECJkQhdChEwEmSTIhC6ECJnQhRAhE7oQImRCF0KETOhCCJCJFLoQImRCF0KETOhCiJAJXQgRMhFkkiATuhAiZEIXQoRM6EKIkAldCBEyoQshQSaNLoQImdCFECETuhAiZEIXQoRMBJkkyIQuhAiZ0IUQIRO6ECJkQhdChEzoQkiQyaALIUImdCFEyIQuhAiZ0IUQIRNBJgkyoQshQiZ0IUTIhC6ECJnQhRAhE7oQEmSy6EKIkAldCBEyoQshQiZ0IUTIRJDpGpkMuR1hLMlEaZfJKZWeZUIXQoRM6EKIkAldCBEyoQshQiZ0ISTIROhCiJAJXQgRMqELIUImdCFEyESQSYJM6EKIkAldCBEyoQshQiZ0IUTIhC6EBJkcuhAiZEIXQoRM6EKIkAldCBEyEWSSIBO6ECJkQhdChEzoQoiQCV0IETKhCyFBJo8uhAiZ0IUQIRO6ECJkQhdChEwEmSTIhC6ECJnQhRAhE7oQImRCF0KETOhCSJApoAshQiZ0IUTIhC6ECJnQhRAhE0EmCTKhCyFCJnQhRMiELoQImdCFECETuhASZIroQoiQCV0IETKhCyFCJnQhRMhEkEmCTOhCiJAJXQgRMqELIUImdCFEyIQuhASZEroQImRCF0KETOhCiJAJXQgRMhFkkiATuhAiZEIXQoRM6EKIkAldCBEyoQshQKbb/weZJMiELoQImdCFECETuhAiZCLIJEEmdCFEyIQuhAiZ0IUQIRO6ECJkQhdCgkwaXQgRMqELIUImdCFEyIQuhAiZCDJJkAldCBEyoQshQiZ0IUTIhC6ECJnQhZAgk0EXQoRM6EKIkAldCBEyoQshQiaCTBJkQhdChEzoQoiQCV0IETKhCyFCJnQhJMhk0YUQIRO6ECJkQhdChEzoQoiQiSCTBJnQhRAhE7oQImRCF0KETOhCiJAJXQgJMhG6ECJkQhdChEzoQoiQCV0IETIRZJIgE7oQImRCF0KETOhCiJAJXQgRMqELIUEmhy6ECJnQhRAhE7oQImRCF0KETASZJMiELoQImdCFECETuhAiZEIXQoRM6EJIkMmjCyFCppW7EF7pXaZwDDwr0+0l9Q7lKNOJqFFtogadSlcblbarjQnfrv4t08pdCEEyrdyFECQTQSYJMq3chRAk08pdCEEyrdyFECTTyl0IQTKt3IWQI1NYuQshSCZ0IUTIhC6ECJnQhRAhE0EmCTKhCzGETGTtdjXF0iMVT+brYu8fklqfm2V6PKxRhzDyF3u9X+2NU4WrddB+4337O9nSq6edt0/6kIsxc3G8PVr6ujgab44X/85btGWQtxLzFn0q5K3EvEXjDnkrMW/RyUTeCszbiNYu8lZi3qLXjbyVmLdo/iNvJeYtnoYgbyXmLSFvkbcC8xbPy5C3EvMWz8uQtxLzFs/LkLcS8xbPy5C3EvMWz8uQtwLzNuF5GfJWYt7ieRnyVmLe4nkZ8lZi3uJ5GfJWYt4S8hZ5KzBv8bwMeSsxb/G8DHkrMW/xvAx5+3hh48Ket7H00jr6Pepff9O3639nF55qIbuuyy48e0J2XZVdXuEJEbLruuzCcxxk13XZhactyK7rsgvPRJBd12UXIbuQXZdlF54vILuuyy48BUB2XZdd6NUju67LLvTqkV3XZRd69ciuy7JLo1eP7Louu9Crvyi7wv7dlNuf36/+DR5t7E7g0eHtBJ4Avg949AU7gUfLrBN4dJM6gUejpRN49CD6gDew553Aw7l2Ag/n2gk8nGsn8ATwfcAv7FytDVsPWVtypoBS34LZW706hscP83wWvDI7eGMO1/7GvrBv7Yl9YdfaE/vCnpVU2OMmTaGA3avHT3/949ro7iAX9qCsIO3CnpIX5MIekRfkwp6PF+TCHo4XJAEkD8iFPRYvyIVdEy/IhX0QL0g4GyaQcDY8IAnOhgkknA0TyJWdjae0g/TFLzUbGzaSxqZDtz6mj5tutLIP6oidgL0H9pU9VkfsKzuyjthX9m8dsa/s9jpiX9kb9sPuVnaSHbGv7Ds7YodL7YIdLrULdgL2HtjhUrtgh0t9GzvpfcsGIvUN+2+UcJ5sKOEm2VDCIXKh9HB9bCjh5NhQwp2xoYTjYkNJQMmFEs6IDSXcDhtKuB02lHA7bCjhdrhQBrgdNpRwO2wo4XbYUMLtsKEkoORCCbfDhhJuhw0l3A4bSrgdNpRwO1woI9wOG0q4HTaUcDtsKOF22FASUHKhhNthQwm3w4YSbocNJdwOG0q4HS6UCW6HDSXcDhtKuB02lHA7bCgJKLlQwu2woYTbYUMJt8OGEm6HDSXcDhPKoOB22FDC7bChhNthQwm3w4aSgJILJdwOG0q4HTaUcDtsKOF22FDC7XCh1HA7bCjhdthQwu2woYTbYUNJQMmFEm6HDSXcDhtKuB02lHA7bCjhdrhQGrgdNpRwO2wo4XbYUMLtsKEkoORCCbfDhhJuhw0l3A4bSrgdNpRwO1woLdwOG0q4HTaUcDtsKOF22FASUHKhhNthQwm3w4YSbocNJdwOG0q4HS6UBLfDhhJuhw0l3A4bSrgdNpQElFwo4XbYUMLtsKGE22FDCbfDhhJuhwulm8rtWNpR2uBLV/u4kbS3ZuMBpL6jmcq98KKZyo3wopnKXfCiIaA5QzNV9c+LZqpqnhfNVNU5L5qpqm1eNFNVz6xoPKrhUzSohk/RoBo+RYNq+BQNAc0ZGlTDp2hQDZ+iQTV8igbV8CkaVMNnaOY6i50XDarhUzSohk/RoBo+RUNAc4YG1fApGlTDp2hQDZ+iQTV8igbV8Bmauc7q5kWDavgUDarhUzSohk/RENCcoUE1fIoG1fApGlTDp2hQDZ+iQTV8hmaus5x50aAaPkWDavgUDarhUzQENGdoUA2fokE1fIoG1fApGlTDp2hQDZ+giXOd9cuLBtXwKRpUw6doUA2foiGgOUODavgUDarhUzSohk/RoBo+RYNq+AzNXGfB8qJBNXyKBtXwKRpUw6doCGjO0KAaPkWDavgUDarhUzSohk/RoBo+QzPXWaG8aFANn6JBNXyKBtXwKRoCmjM0qIZP0aAaPkWDavgUDarhUzSohs/QzHWWJC8aVMOnaFANn6JBNXyKhoDmDA2q4VM0qIZP0aAaPkWDavgUDarhMzRznTXIiwbV8CkaVMOnaFANn6IhoDlDg2r4FA2q4VM0qIZP0aAaPkWDavgMDc6iO0eDavgUDarhUzSohk/RENCcoUE1fIoG1fApGlTDp2hQDZ+iQTV8hgZn0Z2jQTV8igbV8CkaVMOnaAhoztCgGj5Fg2r4FA2q4VM0qIZP0aAaPkODs+jO0aAaPkWDavgUDarhUzQENGdoUA2fokE1fIoG1fApGlTDp2hQDZ+hwVl052hQDZ+iQTV8igbV8CkaApozNKiGT9GgGj5Fg2r4FA2q4VM0qIbP0OAsunM0qIZP0aAaPkWDavgUDQHNGRpUw6doUA2fokE1fIoG1fApGlTDJ2gSzqI7R4Nq+BQNquFTNKiGT9EQ0JyhQTV8igbV8CkaVMOnaFANn6JBNXyGBmfRnaNBNXyKBtXwKRpUw6doCGjO0KxbDZNV5utqss5/Q5OJhMKGRDt9iCTm4vYqfl3szeGVo7tDX7fO7gh93Qq+I/R1vUFH6Ou6jn7QFz5NsCP0dZ1SR+jrerCO0Nd1dx2hE6C3hw5H2gE6HGkH6HCkHaDDkXaAPpcjjdvVloz7dvWvyU52kmZhsnM5sMJk53I+hcnO5TgKk6WVJjtXhV2Y7FyVbWGyc1WUhcnOVckVJrtSBTXZ6YuFya5UQU12QmJhsitVUJOdYliY7EoV1GQnDRYmu1IFNdlpgIXJrlRBTXZiX2GyK1VQk52qV5jsShXUZCffFSa7UgU12el0hcmuVEFNdoJcYbIrVVCTnfJWmOxKFdRkJ7EVJrtSBTXZaWmFya5UQU12ollhsitVUJOdOlaY7EoV1GQngxUmu1IFNdnpXYXJrlRBTXbCVmGyK1VQk52CVZjsShXUZCdVFSa7UgU12WlShcmuVEFNduJTYbIrVVCTncpUmOxKFdRkJycVJrtSBTXX6UZkH5Mt/iZQh+13e0Y9XtlEm7k27jyiTYVr0048pe/X/gY+VRUnAPhcJzFJAD5VNSsB+FQVtQTgU1X1EoATgLcFPpW7kQB8KoclAfhULk8CcDjNxsDhNJsC12quY84o7hssRdIl4ibuWyZZS4+rtcq9ttO7mi6qb1ffSc7lIXuSnMsc9iQ5l+vrSZJAkonkXD6tJ8m5DFhPknM5q54k57JMPUnO5YU6kpzr8LquJOFxuEjC43CRhMfhIkkgyUQSHoeLJDwOF0l4HC6S8DhcJOFxmEjOdaBdV5LwOFwk4XG4SMLjcJEkkGQiCY/DRRIeh4skPA4XSXgcLpLwOEwk5zqqrStJeBwukvA4XCThcbhIEkgykYTH4SIJj8NFEh6HiyQ8DhdJeBwmknMdptiVJDwOF0l4HC6S8DhcJAkkmUjC43CRhMfhIgmPw0USHoeLJDwOE8m5jjvtShIeh4skPA4XSXgcLpIEkkwk4XG4SMLjcJGEx+EiCY/DRRIeh4nkXAcSdyUJj8NFEh6HiyQ8DhdJAkkmkvA4XCThcbhIwuNwkYTH4SIJj8NEcq4jw7uShMfhIgmPw0USHoeLJIEkE0l4HC6S8DhcJOFxuEjC43CRhMdhIhnhcbhIwuNwkYTH4SIJj8NFkkCSiSQ8DhdJeBwukvA4XCThcbhIwuMwkUzwOFwk4XG4SMLjcJGEx+EiSSDJRBIeh4skPA4XSXgcLpLwOFwk4XF4SGoFj8NFEh6HiyQ8DhdJeBwukgSSTCThcbhIwuNwkYTH4SIJj8NFEh6HiaSGx+EiCY/DRRIeh4skPA4XSQJJJpLwOFwk4XG4SMLjcJGEx+EiCY/DRNLA43CRhMfhIgmPw0USHoeLJIEkE0l4HC6S8DhcJOFxuEjC43CRhMdhImnhcbhIwuNwkYTH4SIJj8NFkkCSiSQ8DhdJeBwukvA4XCThcbhIwuMwkSR4HC6S8DhcJOFxuEjC43CRJJBkIgmPw0USHoeLJDwOF0l4HC6S8DhMJB08DhdJeBwukvA4XCThcbhIEkgykYTH4SIJj8NFEh6HiyQ8DhdJeBwmkh4eh4skPA4XSXgcLpLwOFwkCSSZSMLjcJGEx+EiCY/DRRIeh4skPA4TyQCPw0USHoeLJDwOF0l4HC6SBJJMJOFxuEjC43CRhMfhIgmPw0USHoeJZITH4SIJj8NFEh6HiyQ8DhdJAkkmkvA4XCThcbhIwuNwkYTH4SIJj8NEMsHjcJGEx+EiCY/DRRIeh4skgSQTSXgcLpLwOFwk4XG4SMLjcJGEx+EhaRQ8DhdJeBwukvA4XCThcbhIEkgykYTH4SIJj8NFEh6HiyQ8DhdJeBwmkhoeh4skPA4XSXgcLpLwOFwkCSSZSMLjcJGEx+EiCY/DRRIeh4skPA4TSQOPw0USHoeLJDwOF0l4HC6SBJJMJOFxuEjC43CRhMfhIgmPw0USHoeJpIXH4SIJj8NFEh6HiyQ8DhdJAkkmkvA4XCThcbhIwuNwkYTH4SIJj8NEkuBxuEjC43CRhMfhIgmPw0WSQJKJJDwOF0l4HC6S8DhcJOFxuEjC4zCRdPA4XCThcbhIwuNwkYTH4SJJIMlEEh6HiyQ8DhdJeBwukvA4XCThcZhIengcLpLwOFwk4XG4SMLjcJEkkHyLJJmQvq4m60zhak1hf22nD3HH3Cy9il8Xe+MP17ovjeCextcIvmx8jeD4xtcIXnJ8jeBSh9cowP+OrxGc9fgawbOPrxG6AeNrRNBoeI3QZxhfI/QZxtcIfYbxNVq4z2D3QLRXtkDdGKW+rjZkv2t0J7lwN4CXZFzYszOTXNhZM5Nc2P8yk1zYpTKTJJBkIrmw42MmubAvYya5sHtiJgmPw0USHoeJZILH4SIJj8NFEh6HiyQ8DhdJAkkmkvA4XCThcbhIwuNwkYTH4SIJj8ND0ip4HC6S8DhcJOFxuEjC43CRJJBkIgmPw0USHoeLJDwOF0l4HC6S8DhMJDU8DhdJeBwukvA4XCThcbhIEkgykYTH4SIJj8NFEh6HiyQ8DhdJeBwmkgYeh4skPA4XSXgcLpLwOFwkCSSZSMLjcJGEx+EiCY/DRRIeh4skPA4TSQuPw0USHoeLJDwOF0l4HC6SBJJMJOFxuEjC43CRhMfhIgmPw0USHoeJJMHjcJGEx+EiCY/DRRIeh4skgSQTSXgcLpLwOFwk4XG4SMLjcJGEx2Ei6eBxuEjC43CRhMfhIgmPw0WSQJKJJDwOF0l4HC6S8DhcJOFxuEjC4zCR9PA4XCThcbhIwuNwkYTH4SJJIMlEEh6HiyQ8DhdJeBwukvA4XCSn8jjR7SSTom9X/55tmMqHFGc7lVcoznaqer4426lq7uJsaanZTlW7Fmc7VX1ZnO1UNWBxtlPVacXZLlVLzXXmeXG2S9VSc50dXpztUrXUXGdwF2e7VC0111nWxdkuVUvNdSZ0cbZL1VJzna1cnO1StdRcZxQXZ7tULTXXWb/F2S5VS811Zm5xtkvVUnOdPVuc7Uq1FM11hmtxtivVUjTXWajF2a5US5GipWa7Ui1Fc53NWZztSrUUzXXGZXG2S9VSc50VWZztUrXUXGcuFme7VC0119mFxdkuVUvNdQZgcbZL1VJznaVXnO1StdRcZ9IVZ7tULTXX2W7F2S5VS811RlpxtkvVUnOdNVac7VK11FxndhVnu1QtNdfZV8XZLlVLzXWGVHG2S9VSc53FVJztUrXUXGcaFWe7VC0119lAxdkuVUvNdcZOcbZL1VJznVVTnO1StdRcZ74k7fbZ+tLVOsSvi81hBxwTbebauPOINhWuTXELOaXv196JT1XPiSA+VU0pgvhUdW0KW9ikSRWuNsGaDXlIx6tDjvmN1QbdaP/t6jvJqWrmriSnqsd7kpzrrJmuJKfyEV1JTuVRupKcyv90JUkgyURyLs/Uk+RcXqgnSXgcLpLwOFwk4XGYSM511kxXkvA4XCThcbhIwuNwkSSQZCIJj8NFEh6HiyQ8DhdJeBwukvA4TCTnOsemK0l4HC6S8DhcJOFxuEgSSDKRhMfhIgmPw0USHoeLJDwOF0l4HCaSc50v1ZUkPA4XSXgcLpLwOFwkCSSZSMLjcJGEx+EiCY/DRRIeh4skPA4TybnOfetKEh6HiyQ8DhdJeBwukgSSTCThcbhIwuNwkYTH4SIJj8NFEh6Hh6Sb6zzGriThcbhIwuNwkYTH4SJJIMlEEh6HiyQ8DhdJeBwukvA4XCThcZhIznVOaleS8DhcJOFxuEjC43CRJJBkIgmPw0USHoeLJDwOF0l4HC6S8DhMJOc6v7grSXgcLpLwOFwk4XG4SBJIMpGEx+EiCY/DRRIeh4skPA4XSXgcJpJznSvelSQ8DhdJeBwukvA4XCQJJJlIwuNwkYTH4SIJj8NFEh6HiyQ8DhNJgsfhIgmPw0USHoeLJDwOF0kCSSaS8DhcJOFxuEjC43CRhMfhIgmPw0TSweNwkYTH4SIJj8NFEh6HiySBJBNJeBwukvA4XCThcbhIwuNwkYTHYSLp4XG4SMLjcJGEx+EiCY/DRZJAkokkPA4XSXgcLpLwOFwk4XG4SMLjMJEM8DhcJOFxuEjC43CRhMfhIkkgyUQSHoeLJDwOF0l4HC6S8DhcJOFxmEhGeBwukvA4XCThcbhIwuNwkSSQZCIJj8NFEh6HiyQ8DhdJeBwukvA4TCQTPA4XSXgcLpLwOFwk4XG4SBJIMpGEx+EiCY/DRRIeh4skPA4XSXgcHpJeweNwkYTH4SIJj8NFEh6HiySBJBNJeBwukvA4XCThcbhIwuNwkYTHYSKp4XG4SMLjcJGEx+EiCY/DRZJAkokkPA4XSXgcLpLwOFwk4XG4SMLjMJE08DhcJOFxuEjC43CRhMfhIkkgyUQSHoeLJDwOF0l4HC6S8DhcJOFxmEhaeBwukvA4XCThcbhIwuNwkSSQZCIJj8NFEh6HiyQ8DhdJeBwukvA4TCQJHoeLJDwOF0l4HC6S8DhcJAkkmUjC43CRhMfhIgmPw0USHoeLJDwOE0kHj8NFEh6HiyQ8DhdJeBwukgSSTCThcbhIwuNwkYTH4SIJj8NFEh6HiaSHx+EiCY/DRRIeh4skPA4XSQJJJpLwOFwk4XG4SMLjcJGEx+EiCY/DRDLA43CRhMfhIgmPw0USHoeLJIEkE0l4HC6S8DhcJOFxuEjC43CRhMdhIhnhcbhIwuNwkYTH4SIJj8NFkkCSiSQ8DhdJeBwukvA4XCThcbhIwuMwkUzwOFwk4XG4SMLjcJGEx+EiSSDJRBIeh4skPA4XSXgcLpLwOFwk4XF4SAYFj8NFEh6HiyQ8DhdJeBwukgSSTCThcbhIwuNwkYTH4SIJj8NFEh6HiaSGx+EiCY/DRRIeh4skPA4XSQJJJpLwOFwk4XG4SMLjcJGEx+EiCY/DRNLA43CRhMfhIgmPw0USHoeLJIEkE0l4HC6S8DhcJOFxuEjC43CRhMdhImnhcbhIwuNwkYTH4SIJj8NFkkCSiSQ8DhdJeBwukvA4XCThcbhIwuMwkaSZPA7p/WrSyX+7+j7bmXxIebYzeYXybGeq58uzpaVmO1NdXJ7tTLVrebYz1Zfl2c5UA5ZnO1OdVpztVOepl2e7VC011bnk5dkuVUtNdb53ebZL1VJTnZNdnu1StdRU502XZ7tULTXVuc3l2S5VS011/nF5tkvVUlOdI1ye7VK11FTn8ZZnu1QtNdW5tuXZLlVLTXU+bHm2S9VSU52zWp7tUrXUVOeVlme7VC011bmf5dkuVUtNdX5mebZL1VJTnUNZnu1StdRU5zmWZ7tULTXVuYjl2S5VS011vmB5tkvVUlOd01ee7VK11FTn3ZVnu1QtNdW5ceXZLlVLTXX+Wnm2S9VSU51jVp7tUrXUVOeBlWe7Ui0VpzpXqzzbqWop0nabbdAqM9upaqnibKeqpYqzpaVmO1UtVZztVLVUcbZT1VLF2U5VSxVnO1UtVZrtVOf3lGe7VC011Tk45dkuVUtNdZ5MebZL1VJTnctSnu1StdRU55uUZ7tULTXVOSHl2S5VS0113kZ5tkvVUlOdW1Ge7VK11FTnP5Rnu1QtNdU5CuXZLlVLTXUeQXm2S9VSU+3rX57tUrXUVPvjl2e7VC011T7z5dkuVUtNtV97ebZL1VJz7XtenO1StdRc+54XZ7tULTXXvufF2S5VS82173lxtkvVUnPte16c7VK11Fz7nhdnu1QtNde+54XZpg4dVh+2q52P9jjbe0Qdsk09+Cv/HBFlIzJ2E8LaEAsRWZ/UdnVUxx94hK83cS3exLd4k9DiTWKLN0kN3uTElzO/iW7xJqbFm9gWb9LiE08tPvHU4hNPLT7x1OITTy0+8a7FJ961+MS7Fp941+IT71p84l2LT7xr8Yl3LT7xrsUn3rX4xPsWn3jf4hPvW3zifYtPvG/xifctPvG+xSfet/jE+xafeN/iEx9afOJDi098aPGJDy0+8aHFJz60+MSHFp/40OITH1p84kOLT3xs8YmPLT7xscUnPrb4xMcWn/jY4hMfW3ziI8cnPob96qR05k1iizdJDd4kqRZvolu8iWnxJrbFm1CLN3HMb6JN5k04PvFxf/xjk1Hf3uT56rg/Yon28YTF/HpG83Tt7Yb0dW1K36+9Bx8kBx8lB5/EBm+UUpKD15KDN5KDt5KDJ8nBO8nBy11hb8HLXWFvwctdYW/BS15h9dgrrN+u1bcVKRP92EtsKfqx19hS9GMvsqXox15lS9GPvcyWoudYZ5MJe/QuFKJ//R3DW0RhuIjicBGl0SIyariI9HARmeEissNFRMNF5IaLaLh7thnuDmna3yFfflPdKGuHi6j9Zy2YR0QmPEfkhovIDxdRGC6iOFxEHT795PeIHB0jer7Y0B6IIaKn8EnJDl/LDt/IDt/KDp9kh+9kh+9lhx8GD9/ER/jPBRlF2eGPvuq+Dt8Nvuo6t9U8xnn7+mJ/e1z/dbG/9Vef5zr4Ev3JXF0K6eVcB1/P3d77NS7o1xdHtb1wpMMPrUl9TXXwtZ9zqrTOVAevKTinOnj9wTnVwWsVxqn60VfWT6bqtr5jDP7bVDMvrO0Ws9Hu8cJkchfHbcmz6tuld4SjL9gCEM5UB3RCOFN90QkhAeFPEc5UD3VCOFOd1QnhTPVbJ4SD97skIBy85yYAYYA7+TFCuJMfI4Q7+TFCuJOfIoyrZqFKZkd4+KpUFmGMWxDffhycfWF9e+/tlW9/h8NXsFP8Yr5q2vZkTmDenPmqtr0n81V9fk/mqzYGejJftZPQk/mqrYeOzNOqvYqezFdtbvRkDh/anjl8aHvmBObNmcOHtmcOH9qeOXxoe+bwoe2Zw4e2Zq4VfGh75vCh7ZnDh7ZnDh/anjmBeXPm8KHtmcOHtmcOH9qeOXxoe+bwoc2Za/jQ9szhQ9szhw9tzxw+tD1zAvPmzOFD2zOHD23PHD60PXP40PbM4UObMzfwoe2Zw4e2Zw4f2p45fGh75gTmzZnDh7ZnDh/anjl8aHvm8KHtmcOHNmdu4UPbM4cPbc8cPrQ9c/jQ9swJzJszhw9tzxw+tD1z+ND2zOFD2zOHD23OfPQTTKdkDh/anjl8aHvm8KHNmYs6QzG+vjj47doQvlG8z1RSdv1sprTMTHs4+scB9a4Q/KuXvsfvhccfhMcfhcefZMff5fxIzvj10PGTstsByqRSKry0pb1YsBQPYbuvu22Xcxb7zdYuNVtaarZj1w3csx27yuCe7dg1Cfdsx65guGc7dr3DPNswdnXEPdulaqkgt5a6xy+3OrrHT8Ljl1vB3OOXW5Pc45dbZdzjH7xu0HtDkaymwktHRVuz3T7maqLNXJvi9sIpfb/2zmXwCqMXlzh4LdKNy+BVSzcug9c33bgMXjd140LgkuUyeJ3Xjcvg9WM3LoPXpd24oN7Nc0G9m+WSUO/muaDezXOhwbnorR9J2mT6AWn0OqMU/+j1QCn+0dftUvyjr6+l+EdfB1/Hb9To61Up/tHXlVL8o/c7SvGP3pcoxS97/TVK9vprlOz11yjZ669Rstdfo4Svv1r4+quFr79a+Pqrha+/Xfb354xf+Pqrha+/Wvj6q4Wvv1r4+muEr79G+PprhK+/Rvj622VfY874ha+/Rvj6a4Svv132geWMX/j6a4Wvv1b4+muFr79W+PrbZT9HzviFr79W+Pprha+/Vvj6a4WvvyR8/SXh6y8JX39J+PpLwtdfEr7+kvD1l4SvvyR8/SXh668Tvv464euvE77+OuHrb5c9BznjF77+Dr6TYDl+4evv4DsJluMXvv4OvpNgOX7h6+/oewMW4xe+/o6+f18xfuHr7+h77BXjF77+jr4PXjF+4evv6HvVFeMXvv6Ovp9cMX7h6+/o+8kV4xe+/o6+n1wxfuHr7/D7yZXiF77+Dr8/Wyl+4evv8PudleIXvv4Ov39YKX7h6+/w+3GV4he+/g6/v1UpfuHr7/D7RZXiF77+JuHrbxK+/grf/8oI3//KCN//ygjf/8oI3//KCN//ygrf/8oK3//KCt//ygrf/8oq2euvHX7/q8v2FfXbtVop8+3iO5hlN7ougVl2p+sSmGW3ui6BWXav6wKY4Tcv6wZG7ikm9/jlnjZyj5+Exy+3qrnHL7f4uMcvt0a4xy93Kb/HL3fF/R3/8LuKleKXe1rDPX7h6+/wu4qV4he+/g6/q1gpfuHr7/C7ipXiF77+Dr+rWCH+4XcVK8UvfP0dflexUvzC19/hdxUrxS98/R1+V7FS/MLX3+F3FSvFL3z9HX5XsVL8wtff4XcVK8UvfP0dflexUvzC19/hdxUrxS98/R1+V7FS/MLX3+F3FSvFL3z9HX5XsVL8wtff4XcVK8UvfP0dflexUvzC19/hdxUrxS98/R1+V7FS/MLX3+F3FSvFL3z9HX5XsVL8wtff4XcVK8UvfP0dflexUvzC19/hdxUrxS98/R1+V7FS/MLX3+F3FSvFL3z9HX5XsVL8wtff4XcVK8UvfP0dflexUvzC19/hdxUrxS98/R1+V7FS/MLX3+F3FSvFL3z9HX5XsVL8wtff4XcVK8UvfP0dflexUvzC19/hdxUrxS98/R1+V7FS/MLX3+F3FSvFL3v9peF3FSvFL3v9peF3FSvFL3v9JSV7/SXBu4rd45e9/pLgPbru8ctef0nwjle/4xe8MdU9fuHrr/D9r0j4/lckfP8rGn3/K2/TFn9UtvDSH20sF7cZpvT92juXwdf1blwGrxe6cRm8DrmOy+sNGmn0Dca6gRl957J+YAYvyfqBGbzW6wdm8CKyHxgaG0zcX5oilcAEb78uDsHv15L5murghSznVAevTTmnOni5+WKq9/gHLwuL8Q9evZXiH3x7OqfJbRdrn7Hng29PV45/7JKlHP/YlUU5fhIe/9irejn+sZfqcvxjr7/l+Mdef8vxj73+HuM32jzHP/j2dOX45ay/+fjlrL/5+OWsv/n45ay/+fgHX3+DDvvFMWXiH3z9LcY/+PpbjH/w9bcY/+Drbyn+wbenK8c/+PpbjH/w9bcY/+DrbzH+wdffYvzC19/Bt6crxy98/R18ezoXrdouTj4WXprSPtnjV5miyVxrgtqOMzbBPCpb/8Vl8HW9F5fBt9Prx2XwOoSJy32ug9csrHMdvL5hnSstNNfB6ybWuQ5eY7HOdfB67KO53lpu28UUM3OdqXYrzXWmeqww18G3TOSd60x1U2muM9VNpbnOVDeV5koLzXWmuqk015nqJuf2uilm6qbBt5nknetUdVNhrlPVTa/nOvhWl7xznapuKsx1qrqpMNep6qbCXGmhuU5VNxXmulDdNPj2oK/meo9fbi10j19uffM7/sG3By3HL7cOuccvt7a4xz92veCV2gLx1utM/CQ8/rHX9XL8Y6/V5fjHXn/L8Y+9/pbjH3v9LcXvBt8etBz/2OtvOf6x199y/LLXX6dkr79u8O1By/HLXn/d4NuDluOXvf66wbcHLcY/+Pag5fiFr7+Dbw9ajl/4+jv49qDl+IWvv4Nv41mOX/j6O/i2mOX4ha+/g28yWY5f+Po7+JaN5fiFr7+Db4BYjl/4+jv4VoXl+IWvv4PvP1iOX/j6O/j+g+X4ha+/g+8/WI5f+Po7+P6D5fiFr7+D7z9Yjl/4+jv4/oPl+IWvv4PvP1iOX/j6O/j+g+X4ha+/g+8/WI5f+Po7+P6D5fiFr7+D7z9Yjl/4+jv4/oPl+IWvv4PvP1iOX/j6O/j+g+X4ha+/g+8/WI5f+Po7+P6D5fiFr7+D7+dXjl/4+jv4Xnrl+IWvv4PveVeOX/j6O/jedOX4ha+/g+8hV45f+Po7+F5v5fiFr7+D78lWjl/4+jv43mnl+IWvv4PvcVaOX/j6O/heZOX4ha+/g+8ZVo5f+Po7+N5e5fiFr7+D78FVjl/4+jv4Xlnl+IWvv4Pvf1WOX/j6O/j+V+X4ha+/g+9/VY5f+PorfP8rJ3z/Kyd8/ysnfP8rJ3z/Kyd8/ysvfP8rL3z/Ky98/ysvfP8rr2Svv174/lde+P5XXvj+V174/lde+P5XXvj+V174/lde+P5XXvj+V370/a8obhd7p00m/sHXXxt2/reBhZeOir4ujvZxVriJNnNtitsLp/T92juXwdf1blwGrxe6cRm8DunGZfD6pheX0fct68Zl8HqsG5fB67xuXAavH7txIXDJckG9m+eCejfPBfVungvq3TwX1LtZLqPvE9iNy7L1rt+u1UqZDJhlC94SmGUr3hIYApg8mGVr3hKYZYveEpjBqxgX0wbm9gSm8NLaJWW36bqk7X69v8929D38Xsz2Hv/gK0Ix/rFv3CGE7eIQDjVc/qVN8O7rahOCPb70fbJj34yZJzv2DZZ5smO3CpgnO7b/Z57s2Msh72QH39GQebJj22/myY5d53w62WS2ycZDVbFPduyiiHmytNJkZ6qgrFFbcWyNCc+TnamCKk52pgqqONmZKqjiZGeqoG6TVa8mO/ieiB9OlvR2tSWjnic70zpbnOxM62xxslOts6XJTrXO2hT3yWr1+qVdCtut26WUuZtNtSh/Qsar/T7vVaYQHXzvyTY5kycz1XJPdq9tyOmffZoG3y+zDZlszgy+E+enZPZHd5ZSfJ7sXCViYbJzlYiFydJKk52rRHxM1h2eiu+TnapELE12qqqvNNmpCrnSZKeqzewjEKfD65fWPm71vA50+DEsqTuawTcj/RBN2H/6a0OyPytbB9/m9EIyJRM4+AaqbXImT4amIrO/tP3joVTmRqPS/oUzbVXmRjNV3RQN7WhS4aVJbUGT+X4HzmB8tCT0rX23X213jFNVZP0wTlXr9cM4VRXZD+NU9Wk3jINvTCwG41SWoB/GqfzDRxjtZh/oOMMdzFT2gRPM4D9a4v0JyujbODPPdvAf1TPPdvCfyjPPdqWfjoXRt59mnu3gP1Znnq3cnwXWzFbujwhrZktzzdbSY7bOHGabv9ocrvZPbCarvFjZTFansbKZrKr7gA3p3f+SOTyG3MhMVgEykpmsWuQjM/rG6h3JTFaFMpKZrGJlJDNZdctIhkDmhMy6dXCJzLpVcIkMauAzMqiBz8jMVgOfucTMa8f9G5nBHn50dPLaKW6TvGE8HMZy4/+b5Oib6gsiOVuNzUPyzma2KpuTzWx19suO18mm6XrfidEakwqz1VFtm/boqI9sUna26jFb5Y+zvUcU2kdkHhE9b4YQTjYK7xlRGi2ik82xe0akh4vItI+I/OPOUvjKt6H9FmeI6Dl8Kzt8kh2+kx2+lx1+kB1+lB1+Eh0+qcHDN/ER/nNBRlp2+KOvuoXwB191ndtqHuP8z36IGGjwJfqTuRZ+Whho8PXcabvPNRT2RYn7CcORDjF/fQ860OBrP+dUB68TOKc6eE3BOdXB6w/GqbrBaxXOqY6+sn4yVbeFEYP/NtXMC2v76Jwftrz6tZ3E88WPX9Orb5feEY6+YAtAOFMd0AnhTPVFJ4Qz1S2dEM5UD/VBGGYqPj5BqB7HBejDI7Eswhi3IJIu/qj59t77478YwuGctBS/mA/e3ZmS+eAtqSmZr1rt92ROYN6c+ap+oifzVQ1IT+arOpaezFe1OD2Zz9R7FsI8woe2Zw4f2p45fGh75vCh7ZkTmDdnDh/anjl8aHvm8KHtmcOHtmcOH9qceYIPbc8cPrQ9c/jQ9szhQ9szJzBvzhw+tD1z+ND2zOFD2zOHD23PHD60NfOo4EPbM4cPbc8cPrQ9c/jQ9swJzJszhw9tzxw+tD1z+ND2zOFD2zOHD23OXMOHtmcOH9qeOXxoe+bwoe2ZE5g3Zw4f2p45fGh75vCh7ZnDh7ZnDh/anLmBD23PHD60PXP40PbM4UPbMycwb84cPrQ9c/jQ9szhQ9szhw9tzxw+tDlzCx/anjl8aHvm8KHtmcOHtmdOYN6cOXxoe+bwoe2Zw4e2Zw4f2p45fGhz5qMfcDslc/jQ9szhQ9szhw9tz5zAvDlz+ND2zOFD2zOHD23PHD60PXP40ObMpzq8XApz+ND2zOFD2zOHD23PnMC8OXP40PbM4UPbM4cPbc8cPrQ9c/jQ5sw9fGh75vCh7ZnDh7ZnDh/anjmBeXPm8KHtmcOHtmcOH9qeOXxoe+bwoc2ZB/jQ9szhQ9szhw9tzxw+tD1zAvPmzOFD2zOHD23PHD60PXP40PbM4UObM4/woe2Zw4e2Zw4f2p45fGh75gTmzZnDh7ZnDh/anjl8aHvm8KHtmcOHNmee4EPbM4cPbc8cPrQ9c/jQ9swJzJszhw9tzxw+tD1z+ND2zOFD2zOHD23NPCn40PbM4UPbM4cPbc8cPrQ9cwLz5szhQ9szhw9tzxw+tD1z+ND2zOFDmzPX8KHtmcOHtmcOH9qeOXxoe+YE5s2Zw4e2Zw4f2p45fGh75vCh7ZnDhzZnbuBD2zOHD23PHD60PXP40PbMCcybM4cPbc8cPrQ9c/jQ9szhQ9szhw9tztzCh7ZnDh/anjl8aHvm8KHtmROYN2cOH9qeOXxoe+bwoe2Zw4e2Zw4f2pw5wYe2Zw4f2p45fGh75vCh7ZkTmDdnDh/anjl8aHvm8KHtmcOHtmcOH9qcuYMPbc8cPrQ9c/jQ9szhQ9szJzBvzhw+tD1z+ND2zOFD2zOHD23PHD60OXMPH9qeOXxoe+bwoe2Zw4e2Z05g3pw5fGh75vCh7ZnDh7ZnDh/anjl8aHPmAT60PXP40PbM4UPbM4cPbc+cwLw5c/jQ9szhQ9szhw9tzxw+tD1z+NDmzCN8aHvm8KHtmcOHtmcOH9qeOYF5c+bwoe2Zw4e2Zw4f2p45fGh75vChzZkn+ND2zOFD2zOHD23PHD60PXMC8+bM4UPbM4cPbc8cPrQ9c/jQ9szhQxszt0rBh7ZnDh/anjl8aHvm8KHtmROYN2cOH9qeOXxoe+bwoe2Zw4e2Zw4f2py5hg9tzxw+tD1z+ND2zOFD2zMnMG/OHD60PXP40PbM4UPbM4cPbc8cPrQ5cwMf2p45fGh75vCh7ZnDh7ZnTmDenDl8aHvm8KHtmcOHtmcOH9qeOXxoc+YWPrQ9c/jQ9szhQ9szhw9tz5zAvDlz+ND2zOFD2zOHD23PHD60PXP40ObMCT60PXP40PbM4UPbM4cPbc+cwLw5c/jQ9szhQ9szhw9tzxw+tD1z+NDmzB18aHvm8KHtmcOHtmcOH9qeOYF5c+bwoe2Zw4e2Zw4f2p45fGh75vChzZl7+ND2zOFD2zOHD23PHD60PXMC8+bM4UPbM4cPbc8cPrQ9c/jQ9szhQ5szD/Ch7ZnDh7ZnDh/anjl8aHvmBObNmcOHtmcOH9qeOXxoe+bwoe2Zw4c2Zx7hQ9szhw9tzxw+tD1z+ND2zAnMmzOHD23PHD60PXP40PbM4UPbM4cPbc48wYe2Zw4f2p45fGh75vCh7ZkTmDdnDh/anjl8aHvm8KHtmcOHtmcOH9qauVbwoe2Zw4e2Zw4f2p45fGh75gTmzZnDh7ZnDh/anjl8aHvm8KHtmcOHNmeu4UPbM4cPbc8cPrQ9c/jQ9swJzJszhw9tzxw+tD1z+ND2zOFD2zOHD23O3MCHtmcOH9qeOXxoe+bwoe2ZE5g3Zw4f2p45fGh75vChzZlbSZ4ovr44+O3aEL5R/D1TkuREfjZTSfX/z2bao+rWj5kWgn/10vf4rfD4SXj8Tnj8Xnj8QXj8cfD43XZb1snYwktrSmm72h1qhdtL3yebFppsl/Omu01WTzRZE8NeXsSUClfbWyW8TfKW4vvVG5nRC4x+ZEYvXfqRoXXJWJ92MjEcyDxfS3qnSEaHJ4qjl2YyKI5eIH5GUYWNYtKqcHXc5xjtY4om2sy1KW5hpPT92jvF0ctUGRRnKpb7UZypCu9G0c9U3vejOJdv6EVxLo/Ri+JcfqQXRQJFBopzeZdeFOFdOCjCu3BQhHfhoAjvwkAxwLu8RdFv12qlTAYjzAsLRrgXFoywLywYCRg5MMLAsGCcysGkx1MpVcSoKexsnD68dsxF4tX2EMubw7dlo/viOJWH6chxKhfTkeNUPqYfxziVk+nIcSor05EjgeN7HGm72Dud4Yj1+k2O+89zvI8Zjguv107vYTtL3zje2Sy8BpfYpIXX1SKbhdfKIpupenkf3rf3QG5sXOG+fXv7SI9Q0tP3LtNU7byuJAkkmUhO1dTrSnLlvh4vyZmcglU27CRTKZDCN/fTTLU/L5mZKn9OMkbNVPd/RkZr77bLb38ftufQOreNxuvfcBk1k0voS3ImT9GX5Eye4mKSbL+gM4pAvQP1mbzKp9SD2V/81sqzBeomhP3rDeGwnc5Gciav0pfkul6Fm+S63uZTkpzPN41a1zl15a5X9mU9ua/s4npyX9nz9eS+skPsyR019kXcX37PyGjUMxdxf/m9JGNQz7zNvfCdC2NQo/CxRN3BxxK1BB9LAsu31ynO7xcYgz5yL/KoiXuRR5+6F3n0tXuRX9gJ3h6W7ihvrWYqkL89bX2cNhMPUGLMPslR+9XBmD+524WdYFfuC7vGrtwXdpiM3O8sF3aY7CwJLNlYLuwZ2Vku7ALZWS7s69hZLuzUPmVp9oeftwa7yrCE92JjSfBTfCxRX/KxxDr+NktHamPpXI4l1nE+lljH8yzvdLAyv6Az1RGP/HRW7jAavZ+XeXuErAp3qcLv9qY6Q7IvyZUrOl6SBJLvkuT7VeNUZ1rKob6yd/lG3evMOr+yGynTWdlflOms7C9sjDsdouIvYr3ZOyzeHq5O973izVQnUrZkGTIsV/YuP2BJJsNyZffyKcs9FuO9+8YyF4tXeyz+gDDp7DzDbthjtIWro9mmGUl/u/au6co+alZNCZpOp+nKfnFWTVd2o7NqurKHnlXTlZ3/rJqiXzGdplOdhruMpm77emZ0IaMp+jcCNaX9c3oA+NAUfSTRmnqb0RT+dARNjbMblNsjZpPRCZ5zDJ0eu6J67TI6wUfK0AneUIZO8HsidJrqHOCZdYIvk6ETvJYMnVCXD+GJ0+OLbinXY5zqPOuZdUJdLkMn1OUidJrqHPGZdUJdLkMn1OUydEIdcZFOhtyOMLqCTtZHu13tY8rohDpCgk525XOJRemEOkKGTqgjRtCJ7H5MDtloMzrhdzZD6JT2PiylGDM6EXQaSyenVO6+h+8bydAJzzVk6ITnGjJ0Qj9Chk7oR4jQaeXzuEXphH6EDJ3Qj5ChE/oRMnQi6CRCJ/QjZOiEfoQMndCPkKET+hEydEI/QoROBv0IGTqhHyFDJ/QjZOiEfoQMnQg6idAJ/QgZOqEfIUMn9CNE6GRRl1+kk95PB7g1u4vfW7a7TtbmvmdpUZcPp1PKfG/Zoi6XoRNBJxE6oS6XoRPqchk6oS6XoROeE8rQCc8JRehEeE4oQyf0I2TohH6EDJ3Qj5ChE0EnETqhHyFDJ/QjZOiEfoQMndCPkKET+hEidHLoR8jQCf0IGTqhHyFDJ/QjZOhE0EmETuhHyNAJdXmVTsEUdAp+2/A1BL9fS+aO3aPM7oIdVXMX7CiC38Yewna5icoWsCcbN4SJ1OHY9ZhdC2J6rAWHi0MujhT1PktlXl+stQq7OPoblPiVASivOTLgzpLA8l2W0aSdpVMZlmjzv8/S087S+2eWYeW7vLN73MYFXWCZwrbLvFb6cHO9BX5HufLt0iu9owzHwLMoby+5L1Tm6J5Oqpq4nSp0e+1Uulrr/VasKRSujmmDknTmVhNWvm3PqunKXY5ZNV35GxpSNU3J7guqit9Efb7Yp32WPumCa4q30ujr4mi8eXI2YeUKEunycbqs/H0VpMvH6bJyex7p8mm6xJUfKyBdPk6XlR+HIF0+TpeVG3xIl4/TBU1MpMsH6UJIl5nS5S4qGqQTiooO6YSioo8pT1StjNpVJVVYrnXy+wP/lKb5blFC00Ng5t7swRa4Teb5fpTQm5hRVbQQpKuaMqrC6c+oKkHVCVWFI59RVVjyGaslePIZVcVXgGZUFd/UmU9VUugtzagqekszqore0oyqorc0o6roQsyoKroQQ6hq1P6rd2O+q3rXCX0FGTqhUyBDJ3h/ETppuHkZOsGfy9AJjnsMnfajt28yqYxO8NAydCLoJEIn+CcROhnUe2PotH/f29g/IrnrhHpvCJ2s2z9P3zaL3nVCvSdDJ9R7MnQi6CRCJzytkqETnj/J0An+SYZOeP4kQyc8fxpCJ7Lb9yMMRVu42tO2B7j3j9669blZRrchiTF9u/a3/hZ9jrX1R/9kbf3Rl5lb//Q4qUPpVLjYabs9tnU6UuFq763a47A6k1xoJiG5LksuQnIhua5KLrTtkFyXJRd6jUiuy5ILDVIk12XJha4ukuuy5EIrGsl1VXIR+txIrsuSC010JNdlyYUOPZLrsuRChx7JdVlyEZILyXVVcqFDj+S6LLnQoUdyXZZc6NAjuS5LLnTokVyXJRc69EiuyuQKds+ScCPynFwOHXok12XJhQ49kuuy5CIkF5KrNrmi25PrgPuRXGhFILlqk4vMfue6xZ9JLhT0SK6rksvjwTWSqza5otuAhOhzyYUH10iuhza0bzfrSKtMuhDSBenyfrrg4TLS5YN0gUdDuhy02S29iyrzGMXjATDS5YN0wSNdpMtBG6/2dDElH6WtMrs6Vv3hpHLAH9Lf/va6dL1zO0PtvMosjgFODenbLn33Wf5K31I0mqLbg6cYMv33iC4W0rc6fbXZX9xql7k7RtwdkV4XphchvZBe16UX+mRIrwvTC301pNeJNiGTLuirIV0+SBf01ZAuH6QLviuFdHk/XRJ+zoB0+SBd8AMFpMsH6YKuNNLlg3RBnwbp8tAm7WeCuBRdJl3Qd0G6fJAu6LsgXT5IF/RdkC6PF1b719+81rnaBX0XpMvb6eIU+i5Ilw/SBX0XpMsH6YK+C9Llg3TBt/uQLh+kCyFdkC7vpwu6ukiX99NFo3ZBujxeWFPY0yWzw4bTqF2QLh+kCyFdkC7vpwtqF6TLB+mCJ9JIlw/SBU+kkS4fpAueSCNdDumyX+3NHz9Le746GtqyJBpvHkHHr9zC42vk1kW5ZfCsG7l1VW7hwThy66rcQicauXVVbqFtjdy6KrcIuYXcqsst7d2+Af7t70N27W0Ig5440uvC9EIPHel1YXqh5470ujC90KNHetWnV9CP9IqZ9LJodyG9qtPLR9rTK6jMdy8tOl5Ir+r0CuaxOAbymfRC0wvpdWF6EdIL6XVdeqHvhfS6ML3Q90J6XZhe6HshvS5ML/S9kF4Xphe+nor0qk+v6B/pdQC+pxfhG6pIrwvTC117pNeF6YWuPdKrOr2i2k/G9VHrTHqha4/0ujC9COmF9LouvdC1R3rV116HL+REbUrXVxxLvzc+nEspk754KoD0FZy+eOqA9BWcvniqgfQVnL54aoL0lZu+Dk9lkL6C0xdPfZC+gtMXT5WQvoLTF0+tkL4Dp+/+2MJ5pTLpS0hfpG+z9N1n+St9S9Foig+B6M/Xv6cvOg9I33HT18VH+obMN6o8Og9IX8Hpi84D0ldw+qLzgPQVnL74xhnStz593eHb/j6XXvhGGNLrwvTCN7aQXhemF75RhfS6ML3Qd0R6XZdeAX1BpNeF6YW+HdLrwvRCXw3pdWF64Rs3SK/q9Io779vfLrM3dSCkF9LruvRC1x7pdWF6oWuP9LowvdC1R3pdmF5oqyK9qtMrPb4c75On5/SKaKsivS5MLzQmkF716eUfi2MKKZNeeKSN9KpNr2D0fibb7W/3nF4JD4WQXvXp5ewjvWLmh4YJD4WQXo8XNi7s6RXDD66+JxcqLyTXZclFSC4kV11y6egfP/u4/Z1xjQkPhJBeF6YXHgghvS5MLzwQQnpdmF7oeSG9LkwvPG9Eel2WXl7heSPS68L0Qsce6XVheqFjj/S6ML3Qs0d6VadX0A/hg9OZ9CKkF9LruvRC1x7pdWF6oWuP9LowvdC1R3pdmF7o2iO9LkwvdO2RXtell0bXHul1YXqha4/0ujC9COmF9KpNr6j2485i1CqTXnCOSK/q9EqHu1eyubsXnONF6RWI9vSi71ffycNUdSJv4Dd6kUcp3os8vlvSizy+dtGLPIH8ReTDo3QOOkMeD+t7kcdz7F7kYdR7kYeH7UUeHrYTeYt6/iry6VFVJp8hj9rmIvKRtk6oic5myKO26UUetU2e/J0O6o9XdFAjvKBD6EW/ooN+8Ss6qAFf0Vm575rM/rUCk1IorP9ePbaePFS80X2RJJBkIrmyd+AlubIX4CW5cm3PS3JlH8BK0q1c931Icn8I6g/fTn2QxNr9Nkn/+NJezJBceO22NmxstCVnCiT1LZh9Mwodw+NrrT7bcVVm77gac7j2zn3hlb4r94Xrgq7cF64iGLnfWS7ce+Rm6RfuVLKzXLi+ZWe5cBeUneXCPVN2lgSW77Pcf4uldVL6Zf2UdNgiT/rwG6iNO3xaH+7waX24o8btwj2g7riIu9n9cTImPnFHjdKHO4F7F+6oZ/Lc73RQdbyigx7uKzrotL6ig7ryBZ2IbugrOiv3N51+0HGHvtCDzsrOoUxn5fq+TIdA5wWdlWvlMp2Va+UynZVr5TKdlWvlMp2Va+UinbRyrVymg1r5FR3Uyq/orFwr3+4rO52gv9PJvLpJ21fOrdWP49G+uqyJQJKJ5Mo1OC/Jlev1D0nert9JfntW+3wt6Z06Gf30XDet7AP6UV/ZX3yjbnLr/Mr+4uauDnSed+QJK5/6bYPVDzpO/2jFCSsfcM1McmXfwktyZY/zIUm29TgoAvUO1Ff2Tt+oe51Z55f2Q49jQm50TIbOwr6FVNjjJk0/230grHyaJjPJhX0LL8mVz0hkJrmwx2EmubDHYSa5cN33KcmX+92Elc8z+5Tky/1uwsrnk5G1e0eW7B+7gD9fb0LYXv3255+/4AgrnzfGTHLltZuX5Mpr92ckdfB2n2fw9Mxy4Q4lO0sCSzaWK1eV3CwX7j2ys0Rl+T7L8Nhl5vZ3+pPlyucAfc4yxAfL6J9YrryO04MNOUPfWN7prLwyl+msvNaW6ay8epbprPzkrkxn5Y5emc7KtVSRzsqnK71BZ+VuWpnOypW1p/07t+SjLVXWL6+/01y5tuanSaDJSHPl2v0zmjcQW+DGqsMTxpi+WK5c6XOzXNkXcLNc2UVws1zZc/yApTbPLN3KDoWb5cp+hpsl3M/bLO1uJY1N7hvLzNUvT/+5Pe0B9y7cCdy7cIf34uB+ZwnvxccS3ouPJbwXH0t4LzaWK59ox84S3uttlo62aRp3/J3zzhLei48l/BQfSwJLNpaoL9lYBqzj77K89fPN/urHq3eWWMf5WE61jlvaWd5uX4Wrk9/mqJV6NH3MDdMdzVTLMi+aqVZZXjRTNQs/QnPYBfHXl80Ptyb9xWaq5h8zm6mKLWY2UzXnmNlM1WzjZTPXAWjMbKYqopnZrFsUl9msWxWX2RDYnLJBXXzOBnXxORvUxedsUBefs0FdfMpmrsPOmNmgLj5ng7r4nA3q4nM2BDanbFAXn7NBXXzOBnXxOZt162JSetuLizRRhs26dXGJTZzrkC5mNuvWxaRD2tkk9Y1N5rVfHhUV5zp0qyPHdettXo4Eju9xZDtCK851hJYQ5ut6CTJ2X9vNYZv1PHOKaXttSsYUrnZhe2mXDvjiF/R1TUpH6Au7n37QF7ZV3aDPdeCYFOgLG8HPoCf3gO7Ts6We62yyriQXNoMfkkz7Z1uZTJtHE0i+S9LsJClmSC5s8j4luYetnM+QhHXjIgk/xkVyYZNl992SyP7B5rOr7yQXdk68JOc6w7EryYU9zkckNYX955BOH39fnIv79QnDca7zHsVQX9g7daROoN6B+sKerCP1hf1bR+qoqy+hTtvF3uln6nOddTkOdb+9tPcxQx01zJvUnd4n6Sx9o34nSSDJRBK1BhdJ1A9cJBfu/364Ou1h30i6wup0CzbSI/D09OWzuc4HFcQdNXAX7nOdaSqIO/rWfbjP5fridrUl475dfZ/tVJVt3L9bZJOizGxnWrtJ71eTTv55tlOdT3b7kO/P/INWmdnO9Lktz3amLkl5tjTTbMPj2ytRqcLVcZ/jrQLer/21Re3ztWm/2af0/do7xZnu9f0oztTB6Edxpu5FP4pT1TPdKM7UWehGcarTrfpRnKpm70ZxKi/QjeJUHqMbRQJFBorwLhwU4V04KMK7cFCEd3mL4usziqKHeeHAONWZfh0xwr6wYIR/YcEIA8OCcarau/TUdKqD7cqznaqWLc52qprTqH0nFUMxM9upSsPSbKc6IK4826kKreJsp6qHirOdqmwpzpZmmq11W9hEh1oqf7X3+6/+4qOgM+Zr54KpjlnjJTNVjcZKZqp67sX3wjI2Zt8XUet0eGm3oZmq+GNFM9chYqVvAc91LFhxtlN9n70426l+PZz23wDa5EtX67CtDEbZQsuH8TnOXAeCiSA+1W82RBCf6lfLYxAvNJ3nOhNNBvKpftksA/lUP2qWgDzNdTCcDORTGS4ZyKdyfWnfX4o0lZodJtjt1+MmHI+lUiEL3W2NlKgCfbv6TnIuR9mTJIEkE8m5HOCFJPW+xV802mdIzuXsepKcy7D1JDmXD+tJci571ZHkXMezdSU5lxnqSRIeh4skPA4XSQJJJpLwOFwk4XG4SMLjcJGEx+EiCY/DRHKuM9e6koTH4SIJj8NFEh6HiySBJBNJeBwukvA4XCThcd4k6fdJxhBNhiQ8DhdJeBwmkhYe502SyW+RxBR1hiQ8DhdJeBwukvA4XCQJJJlIwuNwkYTH4SIJj8NFEh6HiyQ8DhPJuU4s7EoSHoeLJDzOeySTMurr6qSOpznuJOFxuEgSSDKRhMfhIgmPw0USHoeLJDwOF0l4HCaSDh6HiyQ8zrskQ9pI/n69J5LwOFwk4XG4SBJIMpGEx+EiCY/DRRIeh4skPA4XSXgcJpJTnSjdl+S6Hsc+zgSyJvoCSR0ekQRPx7DvINe1OMwg13U4zCAJIHlArutvmEGua2+YQa7rbphBrmtumEGu620+BJnSdrVRqhC2V2p7ROGVfqY+1dnUw1B3aTdNeerwTO9S38/kMcqa12HT4TTAw8/TfoWUuRsl/bgdJfMI26T4JRL8mACR4PUEiEQQaXyR4FEFiAT/K0AkeGsBIsG3CxAJPYHxRYpoIQgQCR0HASKh4yBAJHQcBIhEEGl8kdBxECASOg4CRELHQYBI6DgIEAkdh/FFSug4CBAJHQcBIqHjIEAkdBwEiEQQaXyR0HEQIBI6DgJEQsdBgEjoOAgQCR2H0UUipdBxECASOg4CRELHQYBI6DgIEIkg0vgioeMgQCR0HASIhI6DAJHQcRAgEjoO44uk0XEQIBI6DgJEQsdBgEjoOAgQiSDS+CKh4yBAJHQcBIiEjoMAkdBxECASOg7ji2TQcRAgEjoOAkRCx0GASOg4CBCJINL4IqHjIEAkdBwEiISOgwCR0HEQIBI6DuOLZNFxECASOg5XiGS3Y1koxG8i3aGjg9ABOjoC70E3ep+k0YdI7sfb3EASQPKAhLNmAgn3ywQSDvVdkNbuIFNiLNlsitsUSev9arsvY/Cnw0sEdzq6RARvOrxEcKbDSwQfO7xEcL3DS0SQaHSJ4NSvkOh1w47g6jtAn8pe2rhjJOO+XX2f7VROrTRbN5XpKc52Kv9A9jHb4AtX67AtZ7enJvu1JtrMtXHnEW0qXJt25Cl9v/ZOfCo7IIL4VNW9COIE4tzE/XatVspkkE9VfMtAPlXpLQP5VI/eZCCfyuvIQD6V4RKB3E/l+l4gv892Fdd3n+0qjus+27ncTtwa1DaSLt08TNw/5dbS42qtsq9t3E6S/Ler7yQJJJlIzmVOepKcy3NcSNLtX+q3LqoMybmsRE+SczmEniTnKvw7kgxz1fM9Sc7lFXqSnMuH9CQJj8NFkkCSiSQ8DhdJeBwukvA4XCThcbhIwuMwkYzwOFwk4XG4SMLjcJGEx+EiSSDJRBIeh4skPA4XSXgcLpLwOG+STHb/2ZxKMUMSHoeJZILH4SIJj/MeSTIPksaZDEl4HC6S8DhcJAkkmUjC43CRhMfhIgmPw0USHoeLJDwOD0mt4HHeJRnSRtL+QfKzq+/c4Yj6cId/6sMdbusK7pr2TYu004e4Y26WXm0/cPTm8PuO6L40Img0vEZwiONrBO85vkZwteNrBL88vEYaPmYAjWi72Dud0YigUX+NvNk08jGjEeq6SzRyekfijq8d/Rd31Gp9uKP+6sMdNVUf7nhicc0avE/yxt0V1uDb1B6hJJPCfv2XSgZPQySoBM8hQSU8aZGgEp7LSFCJ1lXJPkj6w7acJ9xfXH0nubDPZia5sHNmJrmwF/6IpDFqOxrHkM18y8As7G6ZSS7sV3lJ2oU9JTPJhX0fM8mFvRkzyYX9EzNJAkkmkvA4XCThcbhIwuNwkYTH4SIJj8NEkuBxuEjC43CRhMfhIgmPw0WSQJKJJDwOF0l4nDdJOrNdbVzuN44Ej/MmSbJpJ+lV4Wq+s6E1wTuNrhA82eAKOXi90RWChxxdIXjT0RWC5x1dIYJCgysEjz66QvD+oyuEnsLoCqGnMLpC6CkMrpBHT2F0hdBT6K6Q338jppTJSISmwvASoaswvEQEiUaXCH2F4SVCY2F4ieCK3pTI+bBLlMo7ASVltxd36bAv3Ndv+YPcGuAev9wF8h7/4KtHsnv6JKLCS5vgt0BMCPb40vfJDn4f5p3s4L1S3skO3nbknezgaxXrZOPgzTDeyQ7eV+Kd7OAdGt7JDl7nfDjZtG3fa6Km58nSSpOdq4IqTHamCsoalR5hh+fJzlRBFSc7UwVVnOxMFVRpsqMf3P3pZNXLyc60zt4aM9tLWzLqebIzrbPFyc60zhYnO9U6W5rsVOusTXGfrFavX9qlfRtVl1LmbjbVovwJGa/2+7xXmUJ09DNvm+RMjowZ/QzbD28d+wMhS4fTfGo+TWb0U2abkMnnzEytGEvB72RSfJ7sXCViYbK00mTnKhELk52rRHxM1h2ez++TnapELE12qqqvNNmpCrnCZPVUtZk1+7dMnA6Fl/Zxq+d1oMPXRkh9oZmqBAlxd7wh2Z+VrXqqeuUTMgUTaEY/yrNJzuTJTFUJPV7a/vFQKvPSKu0vra3K3Gimqpui2cOOqfDSpLb7NZnvd+BMGI+WhL617/ar7Y5xqoqsH8apar1+GKeqIrthHP3ERykYp2o09sM4lSXoh3Eq//ARRrvZBwrxuRIc/RzBfmDwe6Vfr936xzAGR9914o5NS/pwx4/uLuJu6cH9sDmzP7naHK72f6qEI/tEqIQtSSSohF1J+qv063t1u73S4UkjbEsyvkYEjYbXCBuTjK8RnP74GqErML5G6CCMrxG6DcNrhKMzBWiETsP4GqHPML5G6DOMrxFBo4s0OuuTZl472v1b9dr70munfZY3QQ+zvGXCXVP0JebTFH2MsTW9q4ROhgSV0MtordJv7isfVGniXrJZSwWSZPYfv5B1Re4UHuXg4TsoOmZ/ckTbxf7wo/rb3L80WthXjaNR2Pj5my7PGi3sq8RoRNBoeI0W9kliNFrY9wykkd418hmNFnY9YjRa2POI0Wjh57fjaOQ3D+t9fNZo5aMrxWiEPsP4GqHPML5G6DOMrxFBo+E1Qp9hfI3QZxhfo6n8kaVdIxt84WqyyjyoH59p6p9Tf/1EKEzleMah/rrvGabyMGKoT+VKxFCfymeIoU6gfgn1lz3e0Y8jnpT6VNW9GOpTPRcch/prlzT6SdGTUoc37UB99LOzJ6UOb9qDOrxpD+rwpj2oE6h3oD5Vva7sTl2lUiCaPG2PNW5/x+MvY0zmeuPi9qva258HKLe/7yynqsI7s5yqtu7LcvSz0kWxnKoO7sxyquq2M8upatZrWYZ9K43bAxGVYUlgycZyqmcfnVlO9USjM0v4Hi6WVqG+fJulT1vgtz9thiXW8bdZxrhdfrM4LsMS6/i7LG8NqMerm5RhiXWcjyXWcT6WWMffZxnM/urx+9rz2dV38uh29iKP3ug15H10+9fi42FHvvteVjfA4N6FO3qufbijP3sR97RD8cmEJ+7wgH24E7h34Q5v2Yc7fGgf7vCsfbjDsfbhDr96FffHz7iTe+Ju4Ff7cIdf7cMdfrUPd/jVPtwJ3Ltwh1/l4H5niZr8XZbF744Y1NlsLC1qZz6WqIffZvntu3aUYYkal48l6lY+lgSWbCxRX77P0jxY2lJdf6uQtl/R3BYl+rOut3ge0oc7nof04Q7vdRF369POPR77B59ce9cInm54jQhecXyN4EH7a/T6XHpL8LbjawTPPL5GBI0YNLqzhBd/n+Xj5PAQYoYl/PX7LOPeUw8pZVjCM1flZZYlfDAfS/hVNpYO9fDbLKPbpnn7M8cSdSsfSwJLNpaoL/lYor58nyWZ1yyxjr/PsrAPzVznR3dmiT4uH0vUl3wsCSzZWK7c27BW7Sxt8gWWOgRnt+tvfz+wfPWC/cq9DW6WK9dEzCznOmH2apYhPlgeTl3bWK5cE3GzXLkm4ma5cs+NmyWBJRvLlXtu3CxX7rlxs4Tv4WMJ38PGcq6zHz9kqfYT1TVpCgWW/vHDcacPnQ33RXLl6vJDki9PsrdzndHYlSSBJBPJletKXpIrV5WfktQ7SZ8huXJNyUty5YqSl+TKffQPSb48vdcufbInL0l4HC6S8DhcJOFxuEgSSDKRhMfhIgmPw0USHoeHJK18kqe1+1aV2pIzBZJax7h32XVSx9Nznq9OOmyRJ/20OwGphavPrtwXrlWv5W70BiUZ88x94cq2K3cC9y7cF66au3JfuMa+mLvVO3ebnrgvXJF35b7wM4qu3Bd+otGT+8on8nblDr/ahzv86lXclXnUkfGJO/xqH+4E7l24w6/24Q6/2oc7/Gof7vCrfbjDr3bhvvKJvF25w6/24U7rcjfJ7LvimJR+9ssxWvnM0U9JvvxtCZmFa2xmkgtXzcwkF66DmUkuXNl+TPLVr3Ro5RNwmUkuXH0yk1z4+cenJF9/03fls2+ZSRJIMpGEx+EiCY/DRRIeh4skPA4XSXgcJpIrnzhpvNI7yXAMPEvy9pJ6h+Jd4WoT0uNcvT92ILuTX7n+vJR8NFv73kQbM+QJ5DuRX7m+7Ut+5Xr4WvJqP8Mu6pAhv3L93Jf8yvV2X/Ir1+ddybuVn1n0Jb/yM46+5OFhe5GHh+1FnkC+E3l42F7k4WGvIh8eZ+GGTPfAwcP2Ig8P24s8PGwn8iufFn0x+T3yG/mUIQ8P24s8PGwv8vCwV5GnuJN3NkOeQL4TeXjYXuThYXuRh4ftRR4ethd5eNhO5AM8bC/yqOcvIu/3bRFur51KV5O129UUbeFqT49vKT86/9bnZpniflavOoSRv9gbtwH0JpZe+tfOD/uXq2PU6tv19/QipBfSqzq96CH88e71SC84M6TXhekF+4n0ujC94LGRXjzp5U0mvdBIQHr9IL3okV7BlV497bx9On4bKWYujmZ/7WgOmXu7+J646MMgcSUmbkQbC4krMnHxTRYkrsjExReBkLgiExfPXZC4IhOXkLhIXImJi2dFSFyRiYunUEjc6sRNZgd4+9t/u/6eXui2Ir3q74vp8Q2gpDLfAEpw6Eiv+ruXfgifrM6kF6o6pNeFdy/UXkgvntrL5tIL3wBCel2YXvgGENLrwvSCc0R6XZZeTuHbNEiv+vSyj4ZtIsqkF77zgvS6ML3Q90J6XZhe+P4I0uvC9CKkF9LruvRC1x7pdWF6oWuP9KpPr8IzR6fQtUd6XZhe6NojvS5ML3TtkV7XpZdG1x7pdWF6oWuP9LowvdC1R3pdmF7o2iO9LkwvQnohva5LL/S9kF6PF9b71bdMU6X0CsbuLx5uU8ikF/peSK8L0wt9L6RXfXp5+0ivkJ7Ty6DvhfS6ML3Q90J6XZhe6HshvS5ML/S9kF7V6WXVrk64JUomvQjphfS6Lr3wbVWk14XphW+rIr3q04sO6eVcJr3QtUd6XZhe6NojvS5ML3TtkV7XpZdF1x7pdWF6oWuP9LowvdC1R3pdmF7o2iO96tPLHtPLZ9KLkF5Ir+vSC117pNeF6YWuPdKrPr32Of76O2XSC117pNeF6YWuPdLrwvRC1x7pdV16Ebr2SK8L0wtde6TXhemFrj3S68L0Qtce6VWfXuGQXilzKgcR0gvpdV16oWuP9LowvdC1R3pVpxfpfePxQCazxwSha4/0ujC90LVHel2YXujaI72uSy+Hrj3S68L0Qtce6XVheqFrj/S6ML3QtUd61aeXOqZX5kQ0R0gvpNd16YWuPdLrwvRC1x7pVZ1eJj52JyTrSteT1fv1lN2wyaHLj3Rsl47WPdLR6eL10e3BUwwxk754ioD0bZe+jh7p63POF08dkI597qa5dPR4SoF0HCgd8VQD6ThQOuIpCNJxoHTEUxOkY7t0DP6Rjsn83Il7QvoifZulb3rcTW8t90w64ikO0rHL3TSfjnjqg3QcKB3x1AfpOFA64ikO0nGgdMRTHKRjs3QkHR7paO3PnXjAUx+kb7v0tYe7KWV2Xg946oN07HM3zaYjnvogHQdKRzz1QToOlI6EdEQ6jpOOeIqDdLwkHe/phacySK8L0wtPWZBeF6YXnpogverTyz3Sy8TM9pIBT0GQXtelV8RTCqTXhemFpw5IrwvTC08RkF4XpheeCiC9LkwvQnohva5LL3TtkV4Xphe69kivC9MLfS+kV216+eT3R9o+hfScXgl9L6RX9d1LPYS//e0z6YW+F9LrwvRC3wvpdWF6oe+F9KqvvZI6pJfJpBchvZBe16UX+l5IrwvTC30vpNeF6YVvqyK9LkwvfFsV6XVheqFrj/S6LL28Qtce6XVheqFrj/S6ML0I6YX02rXRNm3a6EiFqwP57bVvf6ZMcqHrheS6LLnQ80JyXZZc6HghuWqTy+tN9+BNyCQX+l1IrsuSC90uJNdVyaXR60JyXZZc6HQhuS5LLkJyIbkqk8vFLUuCS5kmqoZbRHLVJldIW9AhWp1JLrhFJNdlyQW3iOS6KrkM3CKS67LkgltEcl2WXPgtI5KrNrmi03tyZU5z9wa/ZERyXZZchORCcl2VXPg+F5LrsuTC97mQXJclFzr0SK7LkgsdeiTXZcmFDj2S66rksujQI7kuSy70uZBctcl1/D5XrkNvCcmF5LoqudDnQnJdllzocyG5Lksu9LmQXNXJ5fdvRfgQn5OL8K0IJFdtcoWdXwiaMskFt4jkuiy5CMmF5LoqueAWkVzVNVcKj+RymeSCW0RyXZZccItIrquSy+HZIpKruubaj2K8/ZmpuRx+/YPkqk6uw69/tC1crSm6PRSKub6YQ18MyVibjFH7PRlzHX2HvhiSi+NOl00uQnIhua5KLvTFkFyXJRf6Ykiuy5ILfTEk12XJhV8LIbmuSi6PvtgQyWVoQ2hMUN+uvuuEltEQOlmzvbaxZDM6ofsiQyeCTiJ0Qk9gjPUpPnT6I5K7TrDXMnSCU5WhE0yfDJ2w24IInQK+XCRDJ/QjZOiEfoQMndCPkKHTyv5JuYdOtxkXWaq490rNoVca4xfLlT0ON8uVfQg3y5W9wqcsaX/YZpz9xjITi0kbeWsPv7jzd+5x5dq/J/eVa/lLud8e3+7cYzhw/+Tau0Yr1/FSNFq5hpeiEUGj7hqR3tcjMvpZo5WfJUrRCD54fI3gr9/WyD6+12WDKmjkwiaoSweAX/Yxwop3wQ7X3gN7gmnvgh2evQt22PC3sdPjUQodXz2L/XYf2a6+5XY4gn++OBraeEfjzbNKMOISVCKoJEAlmHEJKsGOS1AJhlyCSvDvElSC3R9fpaDgl95WyZm9TeyM+6bSnSUqsfdZ0v6lP+dUhiXu8e+z3C83zscMS9yJ2VhqdFP5WKJFynG/rLi7aqz6vcij83kNeR/dhvD2XP2xQYv/4k7g3oU7auI+3NFvvIh72qHcHjaGJ+7oIPbhDr/Yhzu8ZRfuBj60D3d41j7c4Vj7cIdfvYr7/mDGJ/fMncC9C3f41T7c4Vf7cIdf7cMdfrUPd/hVDu6/WdqFa3J9W7G2F9dJlXax1xQ2KNrp408Mc5H7Rwo7fbjWfXFfuCa/lnvYrVB0Ge4E7l24L1yTd+W+cE3elfvCNfnF3Pcvzv7670/cF67Ju3JfuCbvyZ0WfoZ0LXf/OLMqZrgv/AypK3f41T7c4Vf7cCdw78IdfrUPd/jVPtzhV7twdzPV7yY9ttVTWpW4c/bT3Uz1+KUcX/et3Ez1dU+OM9XLPTkSOLJwnKmevZbjy36bm6k+7clxpnqzJ8eZnndcyrFQh8/0/KIjRw8/w8MRfoaHI/wMD0f4GR6OBI4sHOFnWDiGLEcd9sP7Du1QE23mDeKOPNpUuDbFjUpK36+9B+NHCiaMFEwcKZg0UDD58wx7BaNHCsaMFIwdKRgaKZiR7sBxpDtwbHsH9vuqqpTJRBOHiiaNFE1SQ0Wjh4rGDBVN/m5DKe0lpTOva9uotk9tpEOJTerrHfzl7xAuf4d4+Tuki98hKnX5O+ifv4PbHFgM/ts7ZFySSpuVMVo9rqbclzRi3PZ5TtqUXtimbZ6G1OPhmd0nalaZqF1lorTKRMv3+/BtovdRvmpUqBml9dX3KW0ufwd7+TvQ5e/gLn8Hf/k7hEU+1jquMtG0yESNWmWiumaVMKZqlK0ZdbI3g9nPgbZWPzbe2AZRzSBXMyj/FaQPjrQ+v/b+BuHqN4hXv0H66Ru8PvU7nvzskvEN9NVvkNXA3B57bJ/e20OHp0GpYlD+K+6lQSd3iU8efd2u+LrYHZ8Ffj36is5c/xb2+reg69/Csb4Fqcxb+OvfIlz/FvH6t0g/fwuvthuDN89fKYxeXf8W+vq3MNe/hb3+Lej6t3DXv4W//i3C9W8Rr3+L6z/d4fpPd7j+0x2u/3SH6z/d4fpPd7j+0x04Phcvf90XI0dGvfwiVDz5toTT+1fEnKVvb3EfZuuGUd0wVzfs5P67f6HtNswV8Olk4k47mfRkKE6e1jO/SWzxJqnBm5w8Mmd+E3v5RzNx3MNe/nYtJnf9W/jr3yJc/xbx+rdIV79FUur6t+BYT17+MCspc/1b2Ovfgq5eeJNy17+Fv/4twvVvEa9/i3T5W2h1/Vvo69/CXP8W2aR1buuaunis9MzXoFAzKNYMyqeKCvusfv2d/qhI0sljLhXSXsKq24Pip2G6bpipG2brhuVvlur2QOkx7LAJ+zbM1Q3zdcNC1TB7olt6bEevktdPw05IprhtS6+1Uk8kLdUNc3XDQt3cYt2wkw9OSvYQpPtzGKm6YbpumKkbZuuGUd0wVzcs/8G5XZoew8wxS/76eU7l99PifpPY4k3Sz9/k9bPIlH9CyPsW+vq3MJ++xX2YrRtGdcPqbpEnz+eKw0LdsFg3LFUN86pumK4bZuqG1S2kvm4hPXnUEdx+Yw3h+DPV3KfFBLV/wygY8/QW6fK3OHnUwfoW+vq3MNe/hb3+Lej6t3DXv4W//i3C9W9x/ac7XP/pjtd/uuP1n+54/ac7Xv/pjtd/uuP1n+54/ac7Xv/pjh9/uu/DUtWwpOqG6bphpm6YrRtGdcNc3TBfNyzUDavLklSTJU4pVTdM1w0zdcNs3TCqG+bqhvm6YaFuWKwbVpclui5LdF2W6Los0XVZouuyRNdlia7LEl2XJbouS3Rdlpi6LDF1WWLqssTUZYmpyxJTlyWmLktMXZaYuiwxdVli67LE1mWJrcsSW5clti5LbF2W2LossXVZYuuyxNZlCdVlCdVlCdVlCdVlCdVlCdVlCdVlCdVlCdVlCdVliavLEleXJa4uS1xdlri6LHF1WeLqssTVZYmryxJXlyW+Lkt8XZb4uizxdVni67LE12WJr8sSX5clvi5LfF2WhLosCXVZEuqyJNRlSajLklCXJaEuS0JdloS6LAl1WRLrsiTWZUmsy5JYlyWxLktiXZbEuiyJdVkS67Ik1mVJqsuSVJclqS5LUl2WpLosSXVZkuqyJNVlSarLkrreq67rveq63quu673qut6rruu96rreq67rveq63quu673qut6rruu96rreq67rveq63quu673qut6rruu96rreq67rveq63quu673qut6rruu96rreq67rveq63quu673qut6rruu96rreq67rveq63quu673qut6rruu96rreq67rveq63quu673qut6rruu96rreq67rveq63quu673qut6rruu96rreq67rveq63quu673qut6rruu96rreq67rveq63quu673qut6rruu96rreq67rveq63quu673qut6rruu96rreq67rveq63quu673qut6rruu96rreq67rveq63quu673qk95r2r9hqBPpzLCTLNm39NMpmW/Dclv5Mh0UcgsnjBVOHCucNFQ4Z73tXuHoscIxY4VjxwqHxgrHjRXOWHflONZdOY51V45j3ZXTWHflNNZdOY11V05j3ZVT67vyyzOubvG4weLxg8UTBosnDhZPGioek3+Ca26l69cwY7QrxHNz6GoP34c/dy+4vYlu8SamxZtYljex/vEm3h7eJPOLvGi3jYGsOu77pPLbqap9zzVlH7+9T+Yrfho8frfz987a5/id8Pi98PiD8Pij8PiT7Pi1Eh6/Fh6/ER7/6OtvKX7h668Wvv5q4euvFr7+auHrrxa+/hrh668Rvv4a4euvEb7+GuHrrxG+/hrh668Rvv4a4euvEb7+WuHrrxW+/lrh668Vvv5a4euvFb7+WuHrrxW+/lrh668Vvv6S8PWXhK+/JHz9JeHrLwlff0n4+kvC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","names":["withdraw_private"],"brillig_names":["discover_new_messages","decompose_hint","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper","store_in_execution_cache_oracle_wrapper","call_private_function_internal","directive_invert"]},{"name":"deposit_private","hash":"5685006292149290530","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"on_behalf_of","type":{"kind":"field"},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"fromPublicBalance","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"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","names":["deposit_private"],"brillig_names":["discover_new_messages","decompose_hint","store_in_execution_cache_oracle_wrapper","call_private_function_internal","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper","directive_invert","directive_integer_quotient"]},{"name":"_compute_collateral_debt_value","hash":"6926501876322722265","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8945853978429536226":{"error_kind":"string","string":"Function _compute_collateral_debt_value can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"","names":["_compute_collateral_debt_value"],"brillig_names":["_compute_collateral_debt_value"]},{"name":"repay_private","hash":"441099522481573682","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"on_behalf_of","type":{"kind":"field"},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"fromPublicBalance","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["repay_private"],"brillig_names":["discover_new_messages","decompose_hint","store_in_execution_cache_oracle_wrapper","call_private_function_internal","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper","directive_invert","directive_integer_quotient"]},{"name":"emit_position_update","hash":"14252606296936532450","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"user","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6828137438660822608":{"error_kind":"string","string":"Function emit_position_update can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["emit_position_update"],"brillig_names":["emit_position_update"]},{"name":"constructor","hash":"10431881581836879204","is_unconstrained":false,"custom_attributes":["private","initializer"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["constructor"],"brillig_names":["get_contract_instance_internal","decompose_hint","lte_hint","discover_new_messages","notify_created_nullifier_oracle_wrapper","directive_invert"]},{"name":"add_asset","hash":"7391825123906140728","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"oracle","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"loan_to_value","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"is_borrowable","type":{"kind":"boolean"},"visibility":"private"},{"name":"optimal_utilization_rate","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"under_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"over_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"deposit_cap","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"","names":["add_asset"],"brillig_names":["add_asset"]},{"name":"_compute_utilization_rate","hash":"10162810886186855195","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"precision","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"deposit_accumulator","type":{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]},"visibility":"private"},{"name":"borrow_accumulator","type":{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"12348881442450494403":{"error_kind":"string","string":"Function _compute_utilization_rate can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["_compute_utilization_rate"],"brillig_names":["_compute_utilization_rate"]},{"name":"_compute_total_collateral_value","hash":"998039105144149582","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"4270187767586857285":{"error_kind":"string","string":"Function _compute_total_collateral_value can only be called internally"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"","names":["_compute_total_collateral_value"],"brillig_names":["_compute_total_collateral_value"]},{"name":"_compute_borrow_rate","hash":"1484209913714173427","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"asset","type":{"kind":"struct","path":"asset::Asset","fields":[{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"loan_to_value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"oracle","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_borrowable","type":{"kind":"boolean"}},{"name":"optimal_utilization_rate","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"under_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"over_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"deposit_cap","type":{"kind":"integer","sign":"unsigned","width":128}}]},"visibility":"private"},{"name":"utilization_rate","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"precision","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17134621154673181869":{"error_kind":"string","string":"Function _compute_borrow_rate can only be called internally"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VYy27TQBT1M42TVq1gwwp2bNjYseO4G1RQQ5q+EAKxAQlN/BAV5aEWEMt8Oh2YKx9uZ1pVsSM8UjVj3+Nzz33M2I1t/R2Dqz9brT24xwdh9tQcrjaiBrnCNnXaHdHpdESn2xGdXkd0+h3R2euIzo2O6Ox3RGfQoE4bdA6uLZR4eRDKQ0ZuYLk5ZOPJosqEBZpAB5p7n9RMeAfsDR5gUcD8NsmfhUmF8bagPw4U57AdfkH8m+3whxuKZ39Z82Ms5NdV83RZ53IKz/iAmQFmBhjkOQDMgYFnDpi5AXMImEMD5ggwRwbMMWCODZgTwJwwzJZa4wbdVxiyOWCbMpsLthfM5oFtxmw+2A6YrQe2ObNtgO2Q2fpgO2I23E/HzIbnCOVHcj206vUjq35GjlOFw9xRz7dx5lydCWVg/Zvzps+0+wb9cgxVHt6qa7m/dtRa/Pz88lv+tSifFcVFeXmJvcT35U3jLpybd+B8wDlPf5yfn1Vn5cX019nl92vcWxpuWjuWPjauC3E4dOeuHHtqDlcbfz4qMYbHapa1ew852eY5eV1+KcqL/6l0FgvFt8zHPA/7iZpl2B/UesvSl0w3y+Fq7lFZda+3Jr/nd26I1dbETvEHTA/mhvBzNctjdsQ4bfa8iZOwDnD5GkzANBA+VbOsz8LA6cBzqIteAVQDj+nbU9fhioP8Uh94oMfT6PEZ/imLi3LhavKBPITva/wGDIN++8yvvC4ZXlffAbuHeIrFVN+BIfbnoGFh4DTlwTZoRj89wLgMr+vJnoaf+56B5o9qrduHNvC/MWjF3sWakQ7dq7yN3qXYsIdcjR6ei1csLupNrJmt4aH7nsYv9jc/FzzmV9e7zi0aqC91NcOeoJptazjomSFo9Ja1vanPrUlW/0/sLutc4Oe0xfz7DP9OXeP+pXmV38CqiYiqWFRiLIoiycU9xm9BPoct+F+UURlXVRWXIqnSau3+yyIX6WSUxeM4TBJRrNv/KMvS3dEiTCZFXhVJvG7/aZJGWSayPM2r3SRfrNt/MhaTXEyiaDeJyiQa3+b/N2+7b5UQGQAA","debug_symbols":"vZfdbqNADIXfhWsuxmN7xu6rrFYVSUiFhEhEkpVWUd99h4qflIWmtaLcRJ7ofPjgMQO+Zrtyc3l7rZr94ZS9/Lpm9WFbnKtDk1bX9zzbtFVdV2+vt39nrvtB/6E/HYumW57ORXvOXgA9cZ6Vza6LUVy6xr6qy7RyKf5f77wf5I78qNa4ICZ1sReTQhjFgRfEQiS9WCjQrfh3niE+xr3qIAfQ57mnx7hnGWsvd2oPHAf3EBC/dq+M1Is1cXP3/Gj34D+573KEJ+SIT8ghizlAFQfIO4A7OdiJ6+UplDutxzD4F0Y33zxdNJRMxMkQxjuGHvgskPtGhVA/GeowsGHehi0eN56UhjKkmKc6MH5QZKLYRAUTFVeoMJyLnh3IjOLFLfOMgUaKAOcUmChvotBE0RqFE0Uwp9hEBRMVTZSYKLVQwZkoMFErvUHjAZ5iiXMKTRSZKDZR3+kNmT+VYa03kL+ixESphYrORIGJWtllGN9zKQ7zjopkothEBRMVTZSYKLVQ4kwUrFFhopTnlDdR9POOek+rP0VbFZu67Ger/aXZ3oxa57/HcjZ1HdvDttxd2rKbv6bRC7oKScgVkhnoblwlT18aKUlK9A8=","names":["_compute_borrow_rate"],"brillig_names":["_compute_borrow_rate"]},{"name":"get_position","hash":"9561173294592718536","is_unconstrained":true,"custom_attributes":["utility","view"],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"position::Position","fields":[{"name":"collateral","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"scaled_debt","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"debt","type":{"kind":"integer","sign":"unsigned","width":128}}]},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_position"],"brillig_names":["get_position"]},{"name":"_borrow","hash":"12003578371243816436","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"1602191554767750373":{"error_kind":"string","string":"Function _borrow can only be called internally"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14687457983715723088":{"error_kind":"string","string":"Asset is not borrowable"},"15333773746166717806":{"error_kind":"string","string":"Insufficient collateral"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","names":["_borrow"],"brillig_names":["_borrow"]},{"name":"public_dispatch","hash":"15504464052971452156","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"951653053333916160":{"error_kind":"string","string":"Deposit cap exceeded"},"1602191554767750373":{"error_kind":"string","string":"Function _borrow can only be called internally"},"1840251649407153602":{"error_kind":"string","string":"Insufficient borrowed amount"},"2830029349304997821":{"error_kind":"fmtstring","length":27,"item_types":[{"kind":"field"}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"4270187767586857285":{"error_kind":"string","string":"Function _compute_total_collateral_value can only be called internally"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5235018679007078561":{"error_kind":"string","string":"Invalid asset or market id"},"6787403583199288031":{"error_kind":"string","string":"Insufficient balance"},"6828137438660822608":{"error_kind":"string","string":"Function emit_position_update can only be called internally"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8945853978429536226":{"error_kind":"string","string":"Function _compute_collateral_debt_value can only be called internally"},"10435052277855889085":{"error_kind":"string","string":"Function _withdraw can only be called internally"},"12348881442450494403":{"error_kind":"string","string":"Function _compute_utilization_rate can only be called internally"},"13135008234568508716":{"error_kind":"string","string":"Function _repay can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14434150440419769526":{"error_kind":"string","string":"collateral >= debt"},"14687457983715723088":{"error_kind":"string","string":"Asset is not borrowable"},"15333773746166717806":{"error_kind":"string","string":"Insufficient collateral"},"16022896159229267359":{"error_kind":"string","string":"Function _deposit can only be called internally"},"16523063005220065570":{"error_kind":"string","string":"Function _liquidate can only be called internally"},"17134621154673181869":{"error_kind":"string","string":"Function _compute_borrow_rate can only be called internally"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","names":["public_dispatch"],"brillig_names":["public_dispatch"]},{"name":"liquidate_public","hash":"3135072406066435789","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"debt_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"user","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"debt_to_cover","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"}],"return_type":null,"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+1aS28jRRDuecUeP+JkQbAHJG6Io8djx/ZtUbK8VoIVK3FDaGzPSJECu8pjBZzmF3HdA1xA4gcgcUH8Ce4IiTSZsj+Xa9p2PONsdtNSNDOp6q8eXV1VM21LXQ338s+Cez08tTiI50F2bW82ggKx2mXqad0SPe1boqdzS/R0S9JzbnNppfXCaae4Kn+QcaPsxs+ebaAX6NjAZ3KLxB+0u2NfsK9A/UM/w9wpB79H+JVy8NuE+1E6w0dbiO5k10fpzJePYI6OtWZ2b81YprhEs4H2MaM5QPuE0TBmP2U0jHPSqXr5t69m929l9z7TsYx4QzuLXq83BP1tsE2Pw3TmD5Ibtg+63bjfiYMwiNqd4WjQa3d7o4NBMAh6g96kMwjDeNAd9IejYb89DLphHCS9YZhkcgn7KC3HLsJ/CPhKFZ9nPixH/6CuruLs5wyvcfm3l91Hz7/5/Nn46ST+YDI5jc/OcH/w/WYa62BW1sC8zzE/uzg5OU6O49OH3x2fnS9gVwVsureVbBvXC/lweEzGO9lVP/8KOhftW18t2lZ0ndOYtXLwQ8oJWO8cwSaST7mzwvwlXQmL00hWTZVaowKTbag/xdQe4+c+yMPy18TyBVoZa1o12I3ymwZdJTtoLVtqsaZUGJ8l6GAZ/FUR5Lyue0zKk9fdY2X0Le0le8y0zq/yHpPWYd09Zm/Hjoj0qqnFQbQ6/I/6IKI1QK8Km9c0zNuFeVJM03DYM/pC++83kMn5uB3YW9cZDWOQbJLyG4/VdfMbn6/UbI3LqoM3md/Qptc1v/Gatkl+I6xt5beKwe5l+a1isMPZjh1r5TfMEVJ+qzLay5bfcJ/w/IYxaMpvZfZvZX4LvKlajzbxvbBJfiNZ28pvpj5GKXMdQx/kYVXXxCq555+uqW2wW9rzkq6SHe527BjyvIuD5z7MEVLu4/1bA7B4fmvCvHXzG/lik/6N9xIu0MgmKb+5TO918xufL83TV36Ggr7HObYgi3zhpIt60zq7QCsyH+g1+Rv04LZ46TwN+4OdjGaqBdKaeIxv3TXxBDm+MO+B2sxHST9IDsKoZ8odjqCntJ4e6KmHC7Si1/N9a6YHxpIem66npRZjxBHkkC9aat5P3BdcToG+6JjiC2OI5DfUbO2m34sPo5MTxQb/NQIepPBnLYB/3LbBSVKxl2RIg/httZiMtTFvZvdTY55cjMeXH78Pnz773mI4qIMS7jn22xz7i/j84vTbSXQePTn+IeYwdg68I8BLccvjT3pPMcWfdFZZcq3umPYKxjzJX+JWvWr82MQBc3lY7wCNz5Eihh+1HKXz82wDHt5vq5WTQgCXmR8/8TTAaYRHLbhbjv7GFlwKYandRDvzsFZtwQlLeq3kchyQYSqBnprPKi+yq8b7MbvfVrt23ZKFKYuXrJJ+xrFyySL5jUxfPSBlPI9PzxUby1IHusu01aXUodV5AXyI5yo5VI7SqysPlZ+ya9m/kLgHuNzuuiq3U+sP2m2S64AfpGroAh35f8me8W2Prpv8VCzpR0ESRknUiyaT7jjiflLMT0XLH8VBHCZJEsZRNzlIlsrHX1NQCuMNl3T935cG7D0lp0CUYxUoR4pDKRXxFCe9ldgGOa4gR3rzO0qvrtr+33NkekpOT9jEIv+faob5h8HGHUZzmHzU2TLYYws61QW9/squOpa+zgBvso3BNeInSMtO+T3mO1vAagnzuM+lkyuiFXmai/P9FbCkX3JIb9x4MqyHC7Syv6Dg6YOXztPwdJW/cUsnE1Ie8hkN9wDm47z8gPucf+nzBB0wB1C7UUkBN53N0aOONMaj1Hx+06MKtPoKWHUDlm/Aqq2IZZKNuroMv5E97+Tg+4y/mT27wF8R9PEY/j9qJqdhzfMQ5r/AY2U8tE88kMHXbhdpAj/GJecnW7XMOuRRPVogp+g8mqc3xgLJl3ywbu0mWTWGVXRuKXJNTFi7K2KRP3F99f397ax1h9tgK3mfkfxpnixHn2nstVKzT0l+EbFHsrYVe5JtpthDfh57ElZrRSzypxRvzXJ8EPK8rnJ8gPLxGfM61j+ay3P2e9Y8juQvrGFUiyiu9oBWY7R9oDWYvvfSRX0Rq8X0vcf0pdorxfyeIH+XyUdZknxel/cF/n2BX8fKu8ynO8JcXF/yqe7F7nqd2f9chr+tXieEOnOU0+v0gGd4A73O4V2v80r3OocQX4/veh1l8uldr5OPdZ1e5/Et6XWQHzFcxr/L9NcD6wyvS5IfUeYqvUTNwE/P+P1d6qM8xv8V632w/+C9D9qwn6OvpVbrfVoCvxRXOna+ZLUQex9aozK+4Y97B6Nxtxe140A/dpZ9w/8PcwrEr/tBAAA=","debug_symbols":"1VzbbttIDP0XP/theBkOp7+yWBRO4hQGDCdwkgUWQf99R17LcmM1aqcmrXkJrID04ZHm6NASpffFw/ru7dvXze7x6WXx5a/3xfbpfvW6edqVrffvy8XdfrPdbr59Pf/3InR/kA7xL8+rXbf58rravy6+ACHH5WK9e+g+k4byHY+b7bpshfL5Mj4g9uGB8RSd00gw55COwZxBTsESR4KVWY/BysLnwX8vF8jXqT7nPhwg+1Ufr1N91NO+14l9DzH11YMQfV59jsTH4FzyPlYv164e8IfqO4zkgKFjGBhT6DHKZ4ynrEjGqyKP1yOZhnoof16PUI8gcTjKWToACtYAYA2A1gBkDcDWANEaQKwBkjWAWgNYK5mtlczWSmZrJbO1ktlayWytZL6GklGg76FQznqF0g4eMJIDhjpgZHuMGBwwwAEDHTDIAYMdMKIDhoPOo4POo4POo4POxdq9xdq9xdq9xdq9xdq9xdq9xboPF+s+XKz7cLHuw5O1kpO1kpO1kpO1kpODSycHl04OLp0cXDo5uHRycGl16MbVoRtXh25cHbpxddC5OuhcHXSuDjpXa/dWa/fO1u6drd07W7t3tnbvbN2HZ+s+PFv34dm6D8/WSs7WSi63/8wRwBzBwaghkAcIe4BEDxDxAEkeIOoB4tCXAwQPEPAA8VA8eCgePBQPHooHazsHSOYIao5g7uho7uho7uiI5ghkjsDmCNEcwVzTaK5pNNe0+fwZXGUADTT0w4mgoBcY5qo2H0ID8yk0MB9DA/M5NDAfRAPzSTT4lVE0DTKhCGHpFSEyDMXyESPbY/zKQNofY8A1MIrtnwahi7mdjfeOjU1TYDhGU4g/jPceSsL5lUTzK4nnV1KcX0kyv5LS/ErS+ZWUb1FS7qMJ08RjB+XaZQr9dwekjw8eQAzNM4DmGWDzDKh5BrcwKpK+PyQ6e4rrJwwS0YlBipcMbuFrTP1eJeY0xaDAnxgohQsGt7BBBhgY6BSDDKeH0EKOesEgNc9Am2eQW2cgoXkG0DwDbJ4BNc+Am2cQm2fQvCdL854szXuyNO/JqXlPTs17cpqXHxxKmtcJ/lDSvM7Yh5JucQqO2N8rpDj507TcKRleF8JIFwy0eQa5dQYammcAzTO4zo8KUh5QAp4zOKCwC0p0QREPlPE57nL77ZTFcTj2KP/fVh0fzp7IwvGB68ksqMrCqiyqyhpddTAMDZaLAsNVVz4mxZokqUnKFUnjY6af323H8bHRqaRUU57WJNXsiPGZwqkkqEnCmiSqSapZsFizYLFmwWLNikCtWHuYK5Io1CRBTVKNCKlGhMQ1SbEmSWqS0u8mfS9b/6z2m9Xddn18r+Xj2+7+7DWXr/8+rz+88fJ5/3S/fnjbr7t3Xw6vvez2DXJYYo6lmI40ZllSDJ0VdosBVJeQqdvsDjNkLptSaih1/Ac=","names":["liquidate_public"],"brillig_names":["liquidate_public"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"Lending::_compute_utilization_rate_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_compute_utilization_rate_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"precision","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"deposit_accumulator","type":{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]}},{"name":"borrow_accumulator","type":{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]}}]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":128}}]},{"kind":"struct","path":"Lending::_deposit_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_deposit_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::emit_position_update_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::emit_position_update_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"user","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::repay_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::repay_private_parameters","fields":[{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"nonce","type":{"kind":"field"}},{"name":"secret","type":{"kind":"field"}},{"name":"on_behalf_of","type":{"kind":"field"}},{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fromPublicBalance","type":{"kind":"boolean"}}]}}]},{"kind":"struct","path":"Lending::deposit_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::deposit_private_parameters","fields":[{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"nonce","type":{"kind":"field"}},{"name":"secret","type":{"kind":"field"}},{"name":"on_behalf_of","type":{"kind":"field"}},{"name":"market_id","type":{"kind":"field"}},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fromPublicBalance","type":{"kind":"boolean"}}]}}]},{"kind":"struct","path":"Lending::_borrow_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_borrow_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::_liquidate_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_liquidate_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"collateral_token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"debt_token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"user","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"debt_to_liquidate_amount","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]},{"kind":"struct","path":"Lending::_compute_collateral_debt_value_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_compute_collateral_debt_value_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":128}}]},{"kind":"struct","path":"Lending::liquidate_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::liquidate_public_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"debt_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"user","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"debt_to_cover","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]},{"kind":"struct","path":"Lending::borrow_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::borrow_public_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::_withdraw_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_withdraw_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::repay_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::repay_public_parameters","fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"nonce","type":{"kind":"field"}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::_compute_total_collateral_value_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_compute_total_collateral_value_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":128}}]},{"kind":"struct","path":"Lending::update_accumulators_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::update_accumulators_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::compute_total_deposited_assets_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::compute_total_deposited_assets_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"deposit_accumulator","type":{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]}}]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":128}}]},{"kind":"struct","path":"Lending::add_asset_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::add_asset_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"oracle","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"loan_to_value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"is_borrowable","type":{"kind":"boolean"}},{"name":"optimal_utilization_rate","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"under_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"over_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"deposit_cap","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]},{"kind":"struct","path":"Lending::_compute_borrow_rate_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_compute_borrow_rate_parameters","fields":[{"name":"asset","type":{"kind":"struct","path":"asset::Asset","fields":[{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"loan_to_value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"oracle","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_borrowable","type":{"kind":"boolean"}},{"name":"optimal_utilization_rate","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"under_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"over_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"deposit_cap","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"utilization_rate","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"precision","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":128}}]},{"kind":"struct","path":"Lending::borrow_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::borrow_private_parameters","fields":[{"name":"secret","type":{"kind":"field"}},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::constructor_parameters","fields":[]}}]},{"kind":"struct","path":"Lending::withdraw_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::withdraw_private_parameters","fields":[{"name":"secret","type":{"kind":"field"}},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::withdraw_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::withdraw_public_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::_repay_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_repay_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::deposit_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::deposit_public_parameters","fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"nonce","type":{"kind":"field"}},{"name":"on_behalf_of","type":{"kind":"field"}},{"name":"market_id","type":{"kind":"field"}},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}],"events":[{"kind":"struct","path":"Lending::PositionUpdate","fields":[{"name":"user","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"scaled_deposited","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"scaled_borrowed","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"deposit_accumulator","type":{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]}},{"name":"borrow_accumulator","type":{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]}}]}]},"globals":{"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"kind":"string","value":"UintNote"},{"kind":"struct","fields":[{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"kind":"string","value":"UintNote"},{"kind":"struct","fields":[{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]}],"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"PriceFeed"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"assets","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}}]}}]},{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"Token"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"admin","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"minters","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"total_supply","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"public_balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"symbol","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"name","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}]}},{"name":"decimals","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000a"}}]}}]}}]},{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"Lending"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"market_assets","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"market_assets_list","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"market_assets_list_len","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"scaled_deposited_assets","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"scaled_borrowed_assets","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"scaled_total_deposited_assets","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"scaled_total_borrowed_assets","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}]}},{"name":"deposit_accumulators","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}]}},{"name":"borrow_accumulators","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}]}}]}}]}]}},"file_map":{"6":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"16":{"source":"use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: x_coordinates_match,\n        };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n","path":"std/embedded_curve_ops.nr"},"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"19":{"source":"// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"25":{"source":"//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n","path":"std/meta/expr.nr"},"42":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"43":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"46":{"source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n","path":"std/slice.nr"},"52":{"source":"use dep::aztec::hash::pedersen_hash;\nuse std::ops::{Add, Sub};\n\n// Utility used to easily get a \"id\" for a private user that sits in the same\n// \"space\" as the public users.\n// It help us to have a single mapping for collateral that have both public and private users.\npub fn compute_identifier(secret: Field, on_behalf_of: Field, self: Field) -> Field {\n    // EITHER secret OR on_behalf_of MUST be set. But not both\n    assert(!((secret == 0) as bool & (on_behalf_of == 0) as bool));\n    if (secret != 0) {\n        pedersen_hash([self, secret], 0)\n    } else {\n        on_behalf_of\n    }\n}\n\npub fn covered_by_collateral(\n    collateral_price: u128,\n    borrow_price: u128,\n    loan_to_value: u128,\n    collateral: u128,\n    increase: u128,\n    decrease: u128,\n) -> u128 {\n    let price_precision = 1000000000 as u128;\n    let ltv_precision = 10000 as u128;\n\n    let collateral = (collateral + increase) - decrease;\n\n    let collateral_value = (collateral * collateral_price) / price_precision;\n    let debt_covered = (collateral_value * loan_to_value * price_precision) / (borrow_price * ltv_precision);\n\n    debt_covered\n}\n\npub struct DebtReturn {\n    debt_value: u128,\n    static_debt: u128,\n}\n\nfn div_up(a: u128, b: u128) -> u128 {\n    let div = a / b;\n    if div * b < a {\n        div + (1 as u128)\n    } else {\n        div\n    }\n}\n\npub fn debt_updates(\n    interest_accumulator: u128,\n    static_debt: u128,\n    increase: u128,\n    decrease: u128,\n) -> DebtReturn {\n    assert(interest_accumulator > (0 as u128));\n    let accumulator_precision = 1000000000 as u128;\n\n    let current_debt_value = (static_debt * interest_accumulator) / accumulator_precision;\n    let new_debt_value = current_debt_value.add(increase).sub(decrease);\n\n    // static_debt_increase = amount / accumulator\n    // rounding up new debt.\n    let static_debt_increase = div_up(increase * accumulator_precision, interest_accumulator);\n    // rounding down repayment.\n    let static_debt_decrease = (decrease * accumulator_precision) / interest_accumulator;\n\n    // We need to allow repaying of the entire debt as well etc. This is very prone to failing\n    // if you try to repay exact due to time diff between sim and execution.\n    let new_static_debt = static_debt.add(static_debt_increase).sub(static_debt_decrease);\n\n    DebtReturn { debt_value: new_debt_value, static_debt: new_static_debt }\n}\n\npub fn debt_value(static_debt: u128, interest_accumulator: u128) -> u128 {\n    let accumulator_precision = 1000000000 as u128;\n    div_up(static_debt * interest_accumulator, accumulator_precision)\n}\n","path":"/home/jean/work/noir/comet/contracts/src/helpers.nr"},"53":{"source":"mod asset;\nmod position;\nmod helpers;\nmod accumulator;\n\nuse dep::aztec::macros::aztec;\n\n#[aztec]\npub contract Lending {\n    use crate::asset::Asset;\n    use crate::helpers::{compute_identifier};\n    use crate::position::Position;\n    use crate::accumulator::Accumulator;\n\n    use dep::aztec::prelude::{AztecAddress, Map, PublicMutable};\n    use dep::price_feed::PriceFeed;\n    use dep::token::Token;\n    use dep::aztec::macros::{\n        functions::{initializer, internal, private, public, view, utility},\n        storage::storage,\n    };\n    use dep::aztec::protocol_types::traits::{FromField, ToField};\n    use dep::aztec::{\n        event::event_interface::EventInterface,\n        macros::events::event,\n        messages::logs::{\n            event::encode_and_encrypt_event_unconstrained,\n            note::{encode_and_encrypt_note, encode_and_encrypt_note_unconstrained},\n        },\n        unencrypted_logs::unencrypted_event_emission::encode_event,\n        protocol_types::traits::Serialize,\n    };\n\n    #[derive(Serialize)]\n    #[event]\n    struct PositionUpdate {\n        user: AztecAddress,\n        market_id: Field,\n        asset_address: AztecAddress,\n        scaled_deposited: u128,\n        scaled_borrowed: u128,\n        deposit_accumulator: Accumulator,\n        borrow_accumulator: Accumulator,\n    }\n\n    #[storage]\n    struct Storage<Context> {\n        market_assets: Map<Field, Map<AztecAddress, PublicMutable<Asset, Context>, Context>, Context>,\n        market_assets_list: Map<Field, Map<u64, PublicMutable<AztecAddress, Context>, Context>, Context>,\n        market_assets_list_len: Map<Field, PublicMutable<u64, Context>, Context>,\n        scaled_deposited_assets: Map<Field, Map<AztecAddress, Map<AztecAddress, PublicMutable<u128, Context>, Context>, Context>, Context>,\n        scaled_borrowed_assets: Map<Field, Map<AztecAddress, Map<AztecAddress, PublicMutable<u128, Context>, Context>, Context>, Context>, // static debt\n        scaled_total_deposited_assets: Map<Field, Map<AztecAddress, PublicMutable<u128, Context>, Context>, Context>,\n        scaled_total_borrowed_assets: Map<Field, Map<AztecAddress, PublicMutable<u128, Context>, Context>, Context>, // static debt\n        deposit_accumulators: Map<Field, Map<AztecAddress, PublicMutable<Accumulator, Context>, Context>, Context>,\n        borrow_accumulators: Map<Field, Map<AztecAddress, PublicMutable<Accumulator, Context>, Context>, Context>,\n    }\n\n    #[public]\n    #[internal]\n    fn emit_position_update(market_id: Field, asset_address: AztecAddress, user: AztecAddress) {\n        let scaled_deposited = storage.scaled_deposited_assets.at(market_id).at(asset_address).at(user).read();\n        let scaled_borrowed = storage.scaled_borrowed_assets.at(market_id).at(asset_address).at(user).read();\n        let deposit_accumulator = storage.deposit_accumulators.at(market_id).at(asset_address).read();\n        let borrow_accumulator = storage.borrow_accumulators.at(market_id).at(asset_address).read();\n        let event = PositionUpdate { user, market_id, asset_address, scaled_deposited, scaled_borrowed, deposit_accumulator, borrow_accumulator };\n        event.emit(encode_event(&mut context));\n    }\n\n    #[private]\n    #[initializer]\n    fn constructor() {}\n\n    #[private]\n    fn repay_private(\n        from: AztecAddress,\n        amount: u128,\n        nonce: Field,\n        secret: Field,\n        on_behalf_of: Field,\n        market_id: Field,\n        asset_address: AztecAddress,\n        fromPublicBalance: bool,\n    ) {\n        let on_behalf_of =\n            compute_identifier(secret, on_behalf_of, context.msg_sender().to_field());\n        if(!fromPublicBalance) {\n            let _ = Token::at(asset_address).transfer_to_public(from, context.this_address(), amount, nonce).call(&mut context);\n        }\n        else {\n            let _ = Token::at(asset_address).transfer_in_public(from, context.this_address(), amount, nonce).enqueue(&mut context);\n        }\n        let _ = Lending::at(context.this_address())\n            ._repay(AztecAddress::from_field(on_behalf_of), amount, market_id, asset_address)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    fn repay_public(amount: u128, nonce: Field, owner: AztecAddress, market_id: Field, asset_address: AztecAddress) {\n        let _ = Token::at(asset_address).transfer_in_public(context.msg_sender(), context.this_address(), amount, nonce).call(&mut context);\n        let _ = Lending::at(context.this_address())._repay(owner, amount, market_id, asset_address).call(\n            &mut context,\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _repay(owner: AztecAddress, amount: u128, market_id: Field, asset_address: AztecAddress) {\n        let asset_loc = storage.market_assets.at(market_id).at(asset_address);\n        let asset: Asset = asset_loc.read();\n        assert(asset.asset_address == asset_address, \"Invalid asset or market id\");\n\n        Lending::at(context.this_address()).update_accumulators(market_id, asset_address).call(&mut context);\n\n        let scaled_user_borrowed_amount_loc = storage.scaled_borrowed_assets.at(market_id).at(asset_address).at(owner);\n        let scaled_user_borrowed_amount: u128 = scaled_user_borrowed_amount_loc.read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n        let scaled_amount = (amount * 1000000000 as u128) / borrow_accumulator.value;\n\n        assert(scaled_user_borrowed_amount >= scaled_amount, \"Insufficient balance\");\n        scaled_user_borrowed_amount_loc.write(scaled_user_borrowed_amount - scaled_amount);\n\n        let scaled_total_borrowed_asset_loc = storage.scaled_total_borrowed_assets.at(market_id).at(asset_address);\n        let scaled_total_borrowed_asset: u128 = scaled_total_borrowed_asset_loc.read();\n        scaled_total_borrowed_asset_loc.write(scaled_total_borrowed_asset - scaled_amount);\n\n        Lending::at(context.this_address()).emit_position_update(market_id, asset_address, owner).call(&mut context);\n    }\n\n     #[private]\n    fn borrow_private(secret: Field, to: AztecAddress, amount: u128, market_id: Field, asset_address: AztecAddress) {\n        let on_behalf_of = compute_identifier(secret, context.msg_sender().to_field(), context.msg_sender().to_field());\n        let _ = Lending::at(context.this_address())\n            ._borrow(AztecAddress::from_field(on_behalf_of), amount, market_id, asset_address)\n            .enqueue(&mut context);\n        // let _ = Token::at(asset_address)\n        // .transfer_in_public(context.this_address(), to, amount, 0)\n        // .enqueue(&mut context);\n        let _ = Token::at(asset_address)\n        .transfer_to_private(to, amount)\n        .call(&mut context);\n    }\n\n    #[public]\n    fn borrow_public(to: AztecAddress, amount: u128, market_id: Field, asset_address: AztecAddress) {\n        let _ = Lending::at(context.this_address())._borrow(context.msg_sender(), amount, market_id, asset_address).call(\n            &mut context,\n        );\n        let _ = Token::at(asset_address)\n        .transfer_in_public(context.this_address(), to, amount, 0)\n        .call(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _borrow(owner: AztecAddress, amount: u128, market_id: Field, asset_address: AztecAddress) {\n        let asset_loc = storage.market_assets.at(market_id).at(asset_address);\n        let asset: Asset = asset_loc.read();\n\n        assert(asset.is_borrowable, \"Asset is not borrowable\");\n\n        let total_collateral_value: u128 = Lending::at(context.this_address())._compute_total_collateral_value(market_id, owner).call(&mut context);\n        let collateral_debt_value = Lending::at(context.this_address())._compute_collateral_debt_value(market_id, owner).call(&mut context);\n\n        let borrow_price = PriceFeed::at(asset.oracle).get_price(0).view(&mut context).price;\n        let min_collateral_for_borrow = (amount * borrow_price * 10000 as u128) / (asset.loan_to_value * 1000000000 as u128);\n\n        assert(collateral_debt_value + min_collateral_for_borrow <= total_collateral_value, \"Insufficient collateral\");\n        \n        let scaled_user_borrowed_amount_loc = storage.scaled_borrowed_assets.at(market_id).at(asset_address).at(owner);\n        let scaled_user_borrowed_amount: u128 = scaled_user_borrowed_amount_loc.read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n        let scaled_amount = (amount * 1000000000 as u128) / borrow_accumulator.value;\n        scaled_user_borrowed_amount_loc.write(scaled_user_borrowed_amount + scaled_amount);\n\n        let scaled_total_borrowed_asset_loc = storage.scaled_total_borrowed_assets.at(market_id).at(asset_address);\n        let scaled_total_borrowed_asset: u128 = scaled_total_borrowed_asset_loc.read();\n        scaled_total_borrowed_asset_loc.write(scaled_total_borrowed_asset + scaled_amount);\n\n        Lending::at(context.this_address()).emit_position_update(market_id, asset_address, owner).call(&mut context);\n    }\n\n    #[private]\n    fn withdraw_private(secret: Field, to: AztecAddress, amount: u128, market_id: Field, collateral_asset: AztecAddress) {\n        let on_behalf_of = compute_identifier(secret, context.msg_sender().to_field(), context.msg_sender().to_field());\n        Lending::at(context.this_address())\n            ._withdraw(AztecAddress::from_field(on_behalf_of), to, amount, market_id, collateral_asset)\n            .enqueue(&mut context);\n        // let _ = Token::at(collateral_asset)\n        // .transfer_in_public(context.this_address(), to, amount, 0)\n        // .enqueue(&mut context);\n        let _ = Token::at(collateral_asset)\n        .transfer_to_private(to, amount)\n        .call(&mut context);\n    }\n\n    #[public]\n    fn withdraw_public(to: AztecAddress, amount: u128, market_id: Field, collateral_asset: AztecAddress) {\n        let _ = Lending::at(context.this_address())\n            ._withdraw(context.msg_sender(), to, amount, market_id, collateral_asset)\n            .call(&mut context);\n        let _ = Token::at(collateral_asset)\n        .transfer_in_public(context.this_address(), to, amount, 0)\n        .call(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _withdraw(owner: AztecAddress, to: AztecAddress, amount: u128, market_id: Field, collateral_asset: AztecAddress) {\n        let asset_loc = storage.market_assets.at(market_id).at(collateral_asset);\n        let asset: Asset = asset_loc.read();\n        assert(asset.asset_address == collateral_asset, \"Invalid asset or market id\");\n        \n        Lending::at(context.this_address()).update_accumulators(market_id, collateral_asset).call(&mut context);\n\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(collateral_asset);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n\n        let scaled_user_deposited_amount_loc = storage.scaled_deposited_assets.at(market_id).at(collateral_asset).at(owner);\n        let scaled_user_deposited_amount: u128 = scaled_user_deposited_amount_loc.read();\n        let user_deposited_amount = (scaled_user_deposited_amount * deposit_accumulator.value) / 1000000000 as u128 ;\n        assert(user_deposited_amount >= amount, \"Insufficient balance\");\n\n        let total_collateral_value: u128 = Lending::at(context.this_address())._compute_total_collateral_value(market_id, owner).call(&mut context);\n\n        let collateral_debt_value = Lending::at(context.this_address())._compute_collateral_debt_value(market_id, owner).call(&mut context);\n\n        let collateral_price = PriceFeed::at(asset.oracle).get_price(0).view(&mut context).price;\n        let withdraw_amount_value = (amount * collateral_price) / 1000000000 as u128;\n\n        let total_collateral_value_after_withdraw = total_collateral_value - withdraw_amount_value;\n\n        assert(collateral_debt_value <= total_collateral_value_after_withdraw, \"Insufficient collateral\");\n\n        let scaled_withdraw_amount = (amount * 1000000000 as u128) / deposit_accumulator.value;\n        scaled_user_deposited_amount_loc.write(scaled_user_deposited_amount - scaled_withdraw_amount);\n\n        let scaled_total_deposited_asset_loc = storage.scaled_total_deposited_assets.at(market_id).at(collateral_asset);\n        let scaled_total_deposited_asset: u128 = scaled_total_deposited_asset_loc.read();\n        scaled_total_deposited_asset_loc.write(scaled_total_deposited_asset - scaled_withdraw_amount);\n\n        Lending::at(context.this_address()).emit_position_update(market_id, collateral_asset, owner).call(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _compute_total_collateral_value(market_id: Field, owner: AztecAddress) -> u128 {\n        let mut total_collateral_value: u128 = 0 as u128;\n\n        let market_assets_list_len_loc = storage.market_assets_list_len.at(market_id);\n        let market_assets_list_len: u64 = market_assets_list_len_loc.read();\n        let market_assets_list_loc = storage.market_assets_list.at(market_id);\n\n        for i in 0..market_assets_list_len {\n            let market_asset_loc = market_assets_list_loc.at(i);\n            let market_asset: AztecAddress = market_asset_loc.read();\n            Lending::at(context.this_address()).update_accumulators(market_id, market_asset).call(&mut context);\n            let collateral_asset_loc = storage.market_assets.at(market_id).at(market_asset);\n            let collateral_asset: Asset = collateral_asset_loc.read();\n            let collateral_price = PriceFeed::at(collateral_asset.oracle).get_price(0).view(&mut context).price;\n            let scaled_collateral_amount_loc = storage.scaled_deposited_assets.at(market_id).at(market_asset).at(owner);\n            let scaled_collateral_amount: u128 = scaled_collateral_amount_loc.read();\n            let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(market_asset);\n            let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n            let collateral_amount = (scaled_collateral_amount * deposit_accumulator.value) / 1000000000 as u128;\n            total_collateral_value += (collateral_amount * collateral_price);\n        }\n        total_collateral_value / 1000000000 as u128\n    }\n\n    #[public]\n    #[internal]\n    fn _compute_collateral_debt_value(market_id: Field, owner: AztecAddress) -> u128 {\n        let mut min_collateral_value: u128 = 0 as u128;\n\n        let market_assets_list_len_loc = storage.market_assets_list_len.at(market_id);\n        let market_assets_list_len: u64 = market_assets_list_len_loc.read();\n        let market_assets_list_loc = storage.market_assets_list.at(market_id);\n\n        for i in 0..market_assets_list_len {\n            let market_asset_loc = market_assets_list_loc.at(i);\n            let market_asset: AztecAddress = market_asset_loc.read();\n            Lending::at(context.this_address()).update_accumulators(market_id, market_asset).call(&mut context);\n            let debt_asset_loc = storage.market_assets.at(market_id).at(market_asset);\n            let debt_asset: Asset = debt_asset_loc.read();\n            if(debt_asset.is_borrowable) {\n                let scaled_user_borrowed_amount_loc = storage.scaled_borrowed_assets.at(market_id).at(market_asset).at(owner);\n                let scaled_user_borrowed_amount: u128 = scaled_user_borrowed_amount_loc.read();\n                let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(market_asset);\n                let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n                let user_borrowed_amount = (scaled_user_borrowed_amount * borrow_accumulator.value) / 1000000000 as u128;\n                \n                let borrow_price= PriceFeed::at(debt_asset.oracle).get_price(0).view(&mut context).price;\n\n                min_collateral_value += (user_borrowed_amount * borrow_price * 10000 as u128) / debt_asset.loan_to_value;\n            }\n        }\n        min_collateral_value / 1000000000 as u128\n    }\n\n    #[private]\n    fn deposit_private(\n        from: AztecAddress,\n        amount: u128,\n        nonce: Field,\n        secret: Field,\n        on_behalf_of: Field,\n        market_id: Field,\n        collateral_asset: AztecAddress,\n        fromPublicBalance: bool,\n    ) {\n        let on_behalf_of =\n            compute_identifier(secret, on_behalf_of, context.msg_sender().to_field());\n        if(!fromPublicBalance) {\n            let _ = Token::at(collateral_asset).transfer_to_public(from, context.this_address(), amount, nonce).call(&mut context);\n        }\n        else {\n            let _ = Token::at(collateral_asset).transfer_in_public(from, context.this_address(), amount, nonce).enqueue(&mut context);\n        }\n        Lending::at(context.this_address())\n            ._deposit(AztecAddress::from_field(on_behalf_of), amount, market_id,collateral_asset)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    fn deposit_public(\n        amount: u128,\n        nonce: Field,\n        on_behalf_of: Field,\n        market_id: Field,\n        collateral_asset: AztecAddress,\n    ) {\n        // docs:start:public_to_public_call\n        let _ = Token::at(collateral_asset)\n            .transfer_in_public(context.msg_sender(), context.this_address(), amount, nonce)\n            .call(&mut context);\n        // docs:end:public_to_public_call\n        let _ = Lending::at(context.this_address())\n            ._deposit(AztecAddress::from_field(on_behalf_of), amount, market_id, collateral_asset)\n            .call(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _deposit(owner: AztecAddress, amount: u128, market_id: Field, collateral_asset: AztecAddress) {\n        let asset_loc = storage.market_assets.at(market_id).at(collateral_asset);\n        let asset: Asset = asset_loc.read();\n        assert(asset.asset_address == collateral_asset, \"Invalid asset or market id\");\n        \n        Lending::at(context.this_address()).update_accumulators(market_id, collateral_asset).call(&mut context);\n\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(collateral_asset);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n\n        let total_deposited_assets = Lending::at(context.this_address()).compute_total_deposited_assets(market_id, collateral_asset, deposit_accumulator).call(&mut context);\n        assert((total_deposited_assets + amount) < asset.deposit_cap, \"Deposit cap exceeded\");\n\n        let scaled_user_deposited_asset_loc = storage.scaled_deposited_assets.at(market_id).at(collateral_asset).at(owner);\n        let scaled_user_deposited_asset: u128 = scaled_user_deposited_asset_loc.read();\n        let scaled_amount = (amount * 1000000000 as u128) / deposit_accumulator.value;\n        scaled_user_deposited_asset_loc.write(scaled_user_deposited_asset + scaled_amount);\n\n        let scaled_total_deposited_asset_loc = storage.scaled_total_deposited_assets.at(market_id).at(collateral_asset);\n        let scaled_total_deposited_asset: u128 = scaled_total_deposited_asset_loc.read();\n        scaled_total_deposited_asset_loc.write(scaled_total_deposited_asset + scaled_amount);\n\n        Lending::at(context.this_address()).emit_position_update(market_id, collateral_asset, owner).call(&mut context);\n    }\n\n    #[public]\n    fn compute_total_deposited_assets(market_id: Field, asset_address: AztecAddress, deposit_accumulator: Accumulator) -> u128 {\n        let scaled_total_deposited_asset_static = storage.scaled_total_deposited_assets.at(market_id).at(asset_address).read();\n        let total_deposited_asset = scaled_total_deposited_asset_static * deposit_accumulator.value / 1000000000 as u128;\n        total_deposited_asset\n    }\n\n    #[public]\n    fn add_asset(market_id: Field, asset_address: AztecAddress, oracle: AztecAddress, loan_to_value: u128, is_borrowable: bool, optimal_utilization_rate: u128, under_optimal_slope: u128, over_optimal_slope: u128, deposit_cap: u128) {\n        let asset_loc = storage.market_assets.at(market_id).at(asset_address);\n        let asset: Asset = asset_loc.read();\n\n        assert(loan_to_value <= (10000 as u128));\n\n        asset_loc.write(Asset {\n            asset_address,\n            oracle,\n            loan_to_value,\n            is_borrowable,\n            optimal_utilization_rate,\n            under_optimal_slope,\n            over_optimal_slope,\n            deposit_cap,\n        });\n\n        let market_assets_list_len_loc = storage.market_assets_list_len.at(market_id);\n        let market_assets_list_len: u64 = market_assets_list_len_loc.read();\n        let market_assets_list_loc = storage.market_assets_list.at(market_id).at(market_assets_list_len);\n        market_assets_list_loc.write(asset_address);\n        market_assets_list_len_loc.write(market_assets_list_len + 1);\n\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(asset_address);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n\n        assert(deposit_accumulator.last_updated_ts == 0);\n        assert(deposit_accumulator.value == 0 as u128);\n\n        deposit_accumulator_loc.write(Accumulator {\n            // 10**9\n            value: 1000000000 as u128,\n            last_updated_ts: context.timestamp(),\n        });\n\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n\n        assert(borrow_accumulator.last_updated_ts == 0);\n        assert(borrow_accumulator.value == 0 as u128);\n\n        borrow_accumulator_loc.write(Accumulator {\n            // 10**9\n            value: 1000000000 as u128,\n            last_updated_ts: context.timestamp(),\n        });\n    }\n\n\n    // Create a position.\n    #[public]\n    fn update_accumulators(market_id: Field, asset_address: AztecAddress) {\n        let asset_loc = storage.market_assets.at(market_id).at(asset_address);\n        let asset: Asset = asset_loc.read();\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(asset_address);\n        let mut deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let mut borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n\n        let timestamp = context.timestamp();\n        let time_delta = timestamp - deposit_accumulator.last_updated_ts;\n\n        // Only update if time has passed.\n        if !(time_delta == 0) {\n            let precision = 1000000000 as u128; // 10**9\n            let utilization_rate = _compute_utilization_rate(market_id, asset_address, precision, deposit_accumulator, borrow_accumulator);\n            let borrow_rate_per_year = _compute_borrow_rate(asset, utilization_rate, precision);\n            // TODO: let supply_rate_per_year = borrow_rate_per_year * utilization_rate * (1 - reserve_factor);\n            let supply_rate_per_year = (borrow_rate_per_year * utilization_rate) / precision;\n\n            let new_borrow_accumulator = ((borrow_accumulator.value * borrow_rate_per_year * time_delta as u128) / 31536000 as u128) / precision;\n            let new_deposit_accumulator = ((deposit_accumulator.value * supply_rate_per_year * time_delta as u128) / 31536000 as u128) / precision;\n\n            borrow_accumulator.value += new_borrow_accumulator;\n            borrow_accumulator.last_updated_ts = timestamp;\n            borrow_accumulator_loc.write(borrow_accumulator);\n            deposit_accumulator.value += new_deposit_accumulator;\n            deposit_accumulator.last_updated_ts = timestamp;\n            deposit_accumulator_loc.write(deposit_accumulator);\n        }\n    }\n\n    #[public]\n    #[internal]\n    fn _compute_utilization_rate(market_id: Field, asset_address: AztecAddress, precision: u128, deposit_accumulator: Accumulator, borrow_accumulator: Accumulator) -> u128 {\n        \n        let scaled_total_deposited_asset = storage.scaled_total_deposited_assets.at(market_id).at(asset_address).read();\n        let scaled_total_borrowed_asset = storage.scaled_total_borrowed_assets.at(market_id).at(asset_address).read();\n\n        let total_deposited_assets = (scaled_total_deposited_asset * deposit_accumulator.value) / precision;\n        let total_borrowed_assets = (scaled_total_borrowed_asset * borrow_accumulator.value) / precision;\n        let mut utilization_rate = 0 as u128;\n        if (total_borrowed_assets != 0) {\n            utilization_rate = (total_borrowed_assets * precision) / total_deposited_assets;\n        } else {\n            utilization_rate = 0;\n        }\n\n        utilization_rate\n    }\n\n    #[public]\n    #[internal]\n    fn _compute_borrow_rate(asset: Asset, utilization_rate: u128, precision: u128) -> u128 {\n        let mut rate = 0 as u128;\n        if utilization_rate < asset.optimal_utilization_rate {\n            // rate = base + utilization * slope1 / optimal No base for now\n            rate = (utilization_rate * asset.under_optimal_slope) / asset.optimal_utilization_rate;\n        } else {\n            // rate = base +slope1 + (utilization - optimal) * slope2 / (1 - optimal) No base for now\n            rate = asset.under_optimal_slope + (utilization_rate - asset.optimal_utilization_rate) * asset.over_optimal_slope / (precision - asset.optimal_utilization_rate);\n        }\n        rate\n    }\n\n    #[public]\n    fn liquidate_public(market_id: Field, collateral_asset: AztecAddress, debt_asset: AztecAddress, user: AztecAddress, debt_to_cover: u128) {\n        let _ = Lending::at(context.this_address())._liquidate(market_id, collateral_asset, debt_asset, user, debt_to_cover).call(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _liquidate(market_id: Field, collateral_token: AztecAddress, debt_token: AztecAddress, user: AztecAddress, debt_to_liquidate_amount: u128) {\n        Lending::at(context.this_address()).update_accumulators(market_id, collateral_token).call(&mut context);\n        Lending::at(context.this_address()).update_accumulators(market_id, debt_token).call(&mut context);\n\n        let scaled_borrowed_amount_loc = storage.scaled_borrowed_assets.at(market_id).at(debt_token).at(user);\n        let scaled_borrowed_amount: u128 = scaled_borrowed_amount_loc.read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(debt_token);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n        let borrowed_amount = (scaled_borrowed_amount * borrow_accumulator.value) / 1000000000 as u128;\n\n        assert(borrowed_amount >= debt_to_liquidate_amount, \"Insufficient borrowed amount\");\n\n        let total_collateral_value: u128 = Lending::at(context.this_address())._compute_total_collateral_value(market_id, user).call(&mut context);\n        let collateral_debt_value = Lending::at(context.this_address())._compute_collateral_debt_value(market_id, user).call(&mut context);\n\n        assert(collateral_debt_value > total_collateral_value, \"collateral >= debt\");\n\n        let debt_asset_loc = storage.market_assets.at(market_id).at(debt_token);\n        let debt_asset: Asset = debt_asset_loc.read();\n        let debt_asset_price = PriceFeed::at(debt_asset.oracle).get_price(0).view(&mut context).price;\n        let debt_to_liquidate_price = (debt_to_liquidate_amount * debt_asset_price) / 1000000000 as u128;\n\n        let collateral_asset_loc = storage.market_assets.at(market_id).at(collateral_token);\n        let collateral_asset: Asset = collateral_asset_loc.read();\n        let collateral_asset_price = PriceFeed::at(collateral_asset.oracle).get_price(0).view(&mut context).price;\n        let collateral_amount_to_liquidate = (debt_to_liquidate_price * 1000000000 as u128) / collateral_asset_price;\n\n        let collateral_deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(collateral_token);\n        let collateral_deposit_accumulator: Accumulator = collateral_deposit_accumulator_loc.read();\n        let scaled_collateral_deposit_amount_loc = storage.scaled_deposited_assets.at(market_id).at(collateral_token).at(user);\n        let scaled_collateral_deposit_amount: u128 = scaled_collateral_deposit_amount_loc.read();\n        let collateral_deposit_amount = (scaled_collateral_deposit_amount * collateral_deposit_accumulator.value) / 1000000000 as u128;\n\n        assert(collateral_deposit_amount >= collateral_amount_to_liquidate, \"Insufficient collateral\");\n\n        let scaled_collateral_amount_to_liquidate = (collateral_amount_to_liquidate * 1000000000 as u128) / collateral_deposit_accumulator.value;\n\n        let debt_borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(debt_token);\n        let debt_borrow_accumulator: Accumulator = debt_borrow_accumulator_loc.read();\n        let scaled_debt_amount_to_liquidate = (debt_to_liquidate_amount * 1000000000 as u128) / debt_borrow_accumulator.value;\n\n        let scaled_user_deposited_amount_loc = storage.scaled_deposited_assets.at(market_id).at(collateral_token).at(user);\n        let scaled_user_deposited_amount: u128 = scaled_user_deposited_amount_loc.read();\n        scaled_user_deposited_amount_loc.write(scaled_user_deposited_amount - scaled_collateral_amount_to_liquidate);\n\n        let scaled_total_deposited_asset_loc = storage.scaled_total_deposited_assets.at(market_id).at(collateral_token);\n        let scaled_total_deposited_asset: u128 = scaled_total_deposited_asset_loc.read();\n        scaled_total_deposited_asset_loc.write(scaled_total_deposited_asset - scaled_collateral_amount_to_liquidate);\n\n        let scaled_user_borrowed_amount_loc = storage.scaled_borrowed_assets.at(market_id).at(debt_token).at(user);\n        let scaled_user_borrowed_amount: u128 = scaled_user_borrowed_amount_loc.read();\n        scaled_user_borrowed_amount_loc.write(scaled_user_borrowed_amount - scaled_debt_amount_to_liquidate);\n\n        let scaled_total_borrowed_asset_loc = storage.scaled_total_borrowed_assets.at(market_id).at(debt_token);\n        let scaled_total_borrowed_asset: u128 = scaled_total_borrowed_asset_loc.read();\n        scaled_total_borrowed_asset_loc.write(scaled_total_borrowed_asset - scaled_debt_amount_to_liquidate);\n    }\n\n    #[utility]\n    #[view]\n    unconstrained fn get_position(owner: AztecAddress, market_id: Field, asset_address: AztecAddress) -> pub Position {\n        let scaled_user_deposited_asset_loc = storage.scaled_deposited_assets.at(market_id).at(asset_address).at(owner);\n        let scaled_user_deposited_asset: u128 = scaled_user_deposited_asset_loc.read();\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(asset_address);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n        let collateral = (scaled_user_deposited_asset * deposit_accumulator.value) / 1000000000 as u128;\n        let scaled_user_borrowed_amount_loc = storage.scaled_borrowed_assets.at(market_id).at(asset_address).at(owner);\n        let scaled_user_borrowed_amount: u128 = scaled_user_borrowed_amount_loc.read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n        let debt = (scaled_user_borrowed_amount * borrow_accumulator.value) / 1000000000 as u128;\n        Position { collateral, scaled_debt:scaled_user_borrowed_amount, debt }\n    }\n\n    #[utility]\n    #[view]\n    unconstrained fn get_total_deposited_assets(market_id: Field, asset_address: AztecAddress) -> u128 {\n        let scaled_total_deposited_asset = storage.scaled_total_deposited_assets.at(market_id).at(asset_address).read();\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(asset_address);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n        let total_deposited_assets = (scaled_total_deposited_asset * deposit_accumulator.value) / 1000000000 as u128;\n        total_deposited_assets\n    }\n\n    #[utility]\n    #[view]\n    unconstrained fn get_total_borrowed_assets(market_id: Field, asset_address: AztecAddress) -> u128 {\n        let scaled_total_borrowed_asset = storage.scaled_total_borrowed_assets.at(market_id).at(asset_address).read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n        let total_borrowed_assets = (scaled_total_borrowed_asset * borrow_accumulator.value) / 1000000000 as u128;\n        total_borrowed_assets\n    }\n\n\n    #[utility]\n    #[view]\n    unconstrained fn get_accumulators(market_id: Field, asset_address: AztecAddress) -> (Accumulator, Accumulator) {\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(asset_address);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n        (deposit_accumulator, borrow_accumulator)\n    }\n}\n","path":"/home/jean/work/noir/comet/contracts/src/main.nr"},"56":{"source":"use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/capsules/mod.nr"},"57":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static: true }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr"},"64":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"65":{"source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(\n            gas_opts.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_FIELD_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(\n            gas_opts.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_FIELD_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\nunconstrained fn call_static(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_static_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"66":{"source":"use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr"},"67":{"source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/context/utility_context.nr"},"71":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/hash.nr"},"88":{"source":"use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"92":{"source":"use crate::{\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_notes` utility function PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    // TODO(https://github.com/noir-lang/noir/issues/7912): Doing the following unfortunately doesn't work. Once\n    // the issue is fixed uncomment the following and remove the workaround from TS (look for the issue link in the\n    // codebase).\n    // let utility: fn(FunctionDefinition) -> () = crate::macros::functions::utility;\n    // quote {\n    //     #[$utility]\n    //     unconstrained fn sync_notes() {\n    //     }\n    // }\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[aztec::macros::functions::utility]\n        unconstrained fn sync_notes() { }\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/aztec.nr"},"93":{"source":"use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr"},"94":{"source":"use super::utils::{compute_event_selector, get_trait_impl_method};\nuse protocol_types::meta::generate_serialize_to_fields;\n\ncomptime fn generate_event_interface(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n    let typ = s.as_type();\n    let (serialization_fields, _) = generate_serialize_to_fields(quote { self }, typ, false);\n    let content_len = serialization_fields.len();\n\n    let event_type_id = compute_event_selector(s);\n\n    let from_field = get_trait_impl_method(\n        quote { crate::protocol_types::abis::event_selector::EventSelector }.as_type(),\n        quote { crate::protocol_types::traits::FromField },\n        quote { from_field },\n    );\n\n    quote {\n        impl aztec::event::event_interface::EventInterface<$content_len> for $name {\n            fn get_event_type_id() -> aztec::protocol_types::abis::event_selector::EventSelector {\n                $from_field($event_type_id)\n            }\n\n            fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n                _emit(self);\n            }\n        }\n    }\n}\n\npub comptime fn event(s: TypeDefinition) -> Quoted {\n    let event_interface = generate_event_interface(s);\n    s.add_attribute(\"abi(events)\");\n    quote {\n        $event_interface\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/events.nr"},"96":{"source":"use crate::macros::utils::{\n    add_to_field_slice, AsStrQuote, compute_fn_selector, is_fn_private, is_fn_view,\n};\nuse std::meta::{type_of, unquote};\n\ncomptime global FROM_FIELD: TypedExpr = {\n    let from_field_trait = quote { protocol_types::traits::FromField }.as_trait_constraint();\n    let function_selector_typ =\n        quote { protocol_types::abis::function_selector::FunctionSelector }.as_type();\n    function_selector_typ.get_trait_impl(from_field_trait).unwrap().methods().filter(|m| {\n        m.name() == quote { from_field }\n    })[0]\n        .as_typed_expr()\n};\n\ncomptime global SERIALIZED_ARGS_SLICE_NAME: Quoted = quote { serialized_args };\n\npub comptime fn stub_fn(f: FunctionDefinition) -> Quoted {\n    let is_static_call = is_fn_view(f);\n    let is_void = f.return_type() == type_of(());\n\n    if is_fn_private(f) {\n        if is_static_call {\n            if is_void {\n                create_private_static_void_stub(f)\n            } else {\n                create_private_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_private_void_stub(f)\n            } else {\n                create_private_stub(f)\n            }\n        }\n    } else {\n        if is_static_call {\n            if is_void {\n                create_public_static_void_stub(f)\n            } else {\n                create_public_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_public_void_stub(f)\n            } else {\n                create_public_stub(f)\n            }\n        }\n    }\n}\n\n/// Utility function creating stubs used by all the stub functions in this file.\ncomptime fn create_stub_base(\n    f: FunctionDefinition,\n) -> (Quoted, Quoted, Quoted, Quoted, u32, Field) {\n    let fn_name = f.name();\n    let fn_parameters = f.parameters();\n    let fn_parameters_list =\n        fn_parameters.map(|(name, typ): (Quoted, Type)| quote { $name: $typ }).join(quote {,});\n\n    // Example of what the fold(...) below will generate for `target_address` and `fee_juice_limit_per_tx` function\n    // parameters:\n    // ```\n    // let mut serialized_args =  &[];\n    // serialized_args = serialized_args.append(aztec::protocol_types::traits::Serialize::serialize(target_address));\n    // serialized_args = serialized_args.push_back(fee_juice_limit_per_tx as Field);\n    // ```\n    let serialized_args_slice_construction = fn_parameters.fold(\n        quote {\n            let mut $SERIALIZED_ARGS_SLICE_NAME = &[];\n        },\n        |args, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let arg_to_append = add_to_field_slice(SERIALIZED_ARGS_SLICE_NAME, name, typ);\n            quote {\n                $args\n                $arg_to_append\n            }\n        },\n    );\n\n    let (fn_name_str, _) = fn_name.as_str_quote();\n    let fn_name_len: u32 = unquote!(quote { $fn_name_str.as_bytes().len()});\n    let fn_selector: Field = compute_fn_selector(f);\n\n    (\n        fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len,\n        fn_selector,\n    )\n}\n\ncomptime fn create_private_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_private_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_public_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_public_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/functions/call_interface_stubs.nr"},"97":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr"},"100":{"source":"use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr"},"102":{"source":"use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/notes.nr"},"103":{"source":"use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/storage.nr"},"104":{"source":"use std::meta::unquote;\n\npub(crate) comptime fn get_fn_visibility(f: FunctionDefinition) -> Quoted {\n    if f.has_named_attribute(\"private\") {\n        quote { private }\n    } else if f.has_named_attribute(\"public\") {\n        quote { public }\n    } else {\n        panic(f\"Function is neither private nor public\")\n    }\n}\n\npub(crate) comptime fn is_fn_private(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"private\")\n}\n\npub(crate) comptime fn is_fn_public(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"public\")\n}\n\npub(crate) comptime fn is_fn_utility(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"utility\")\n}\n\npub(crate) comptime fn is_fn_contract_library_method(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"contract_library_method\")\n}\n\npub(crate) comptime fn is_fn_test(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"test\")\n}\n\npub(crate) comptime fn is_fn_view(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"view\")\n}\n\npub(crate) comptime fn is_fn_internal(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"internal\")\n}\n\npub(crate) comptime fn is_fn_initializer(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"initializer\")\n}\n\npub(crate) comptime fn fn_has_noinitcheck(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"noinitcheck\")\n}\n\n/// Takes a function body as a collection of expressions, and alters it by prepending and appending quoted values.\npub(crate) comptime fn modify_fn_body(body: [Expr], prepend: Quoted, append: Quoted) -> Expr {\n    // We need to quote the body before we can alter its contents, so we fold it by quoting each expression.\n    let mut body_quote = body.fold(quote {}, |full_quote: Quoted, expr: Expr| {\n        let expr_quote = expr.quoted();\n        quote {\n                $full_quote\n                $expr_quote\n            }\n    });\n    body_quote = quote {\n        {\n            $prepend\n            $body_quote\n            $append\n        }\n    };\n    let body_expr = body_quote.as_expr();\n    body_expr.expect(f\"Body is not an expression: {body_quote}\")\n}\n\npub(crate) comptime fn add_to_field_slice(slice_name: Quoted, name: Quoted, typ: Type) -> Quoted {\n    if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        quote { $slice_name = $slice_name.push_back($name as Field); }\n    } else if typ.as_data_type().is_some() {\n        // We invoke serialize as a static trait function rather than calling $name.serialize() directly in the quote\n        // to avoid \"trait not in scope\" compiler warnings.\n        quote { $slice_name = $slice_name.append(aztec::protocol_types::traits::Serialize::serialize($name)); }\n    } else if typ.as_array().is_some() {\n        let (element_type, _) = typ.as_array().unwrap();\n        let serialized_name = f\"{name}_serialized\".quoted_contents();\n        // We invoke serialize as a static trait function rather than calling x.serialize() directly in the quote\n        // to avoid \"trait not in scope\" compiler warnings.\n        quote {\n            let $serialized_name = $name.map(|x: $element_type | aztec::protocol_types::traits::Serialize::serialize(x));\n            for i in 0..$name.len() {\n                $slice_name = $slice_name.append($serialized_name[i].as_slice());\n            }\n        }\n    } else if typ.as_str().is_some() {\n        quote {\n            $slice_name = $slice_name.append($name.as_bytes().map(| byte: u8 | byte as Field).as_slice());\n        }\n    } else {\n        panic(\n            f\"Cannot add to slice: unsupported type {typ} variable {name}\",\n        )\n    }\n}\n\n/// Adds a value to a hash::ArgsHasher. Structs and values inside arrays are required to implement the Serialize trait.\npub(crate) comptime fn add_to_hasher(hasher_name: Quoted, name: Quoted, typ: Type) -> Quoted {\n    if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        quote { $hasher_name.add($name as Field); }\n    } else if typ.as_data_type().is_some() {\n        quote { $hasher_name.add_multiple(dep::aztec::protocol_types::traits::Serialize::serialize($name)); }\n    } else if typ.as_array().is_some() {\n        let (element_type, _) = typ.as_array().unwrap();\n        let serialized_name = f\"{name}_serialized\".quoted_contents();\n        quote {\n           let $serialized_name = $name.map(|x: $element_type | dep::aztec::protocol_types::traits::Serialize::serialize(x));\n            for i in 0..$name.len() {\n                $hasher_name.add_multiple($serialized_name[i]);\n            }\n        }\n    } else if typ.as_str().is_some() {\n        quote {\n            $hasher_name.add_multiple($name.as_bytes().map(| byte: u8 | byte as Field));\n        }\n    } else {\n        panic(\n            f\"Cannot add to hasher: unsupported type {typ} of variable {name}\",\n        )\n    }\n}\n\ncomptime fn signature_of_type(typ: Type) -> Quoted {\n    if typ.is_field() {\n        quote {Field}\n    } else if typ.as_integer().is_some() {\n        let (is_signed, bit_size) = typ.as_integer().unwrap();\n        if is_signed {\n            f\"i{bit_size}\".quoted_contents()\n        } else {\n            f\"u{bit_size}\".quoted_contents()\n        }\n    } else if typ.is_bool() {\n        quote {bool}\n    } else if typ.as_str().is_some() {\n        let str_len_typ = typ.as_str().unwrap();\n        let str_len = str_len_typ.as_constant().unwrap();\n        f\"str<{str_len}>\".quoted_contents()\n    } else if typ.as_array().is_some() {\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let element_typ_quote = signature_of_type(element_type);\n        f\"[{element_typ_quote};{array_len}]\".quoted_contents()\n    } else if typ.as_data_type().is_some() {\n        let (s, generics) = typ.as_data_type().unwrap();\n        let field_signatures = s\n            .fields(generics)\n            .map(|(_, typ): (Quoted, Type)| signature_of_type(typ))\n            .join(quote {,});\n        f\"({field_signatures})\".quoted_contents()\n    } else if typ.as_tuple().is_some() {\n        // Note that tuples are handled the same way as structs\n        let types = typ.as_tuple().unwrap();\n        let field_signatures = types.map(|typ: Type| signature_of_type(typ)).join(quote {,});\n        f\"({field_signatures})\".quoted_contents()\n    } else {\n        panic(f\"Unsupported type {typ}\")\n    }\n}\n\npub(crate) trait AsStrQuote {\n    fn as_str_quote(self) -> (Self, u32);\n}\n\nimpl<let N: u32, Env> AsStrQuote for Quoted {\n    // Used to convert an arbitrary quoted type into a quoted string, removing whitespace between tokens\n    comptime fn as_str_quote(self) -> (Quoted, u32) {\n        let tokens = self.tokens();\n        let mut acc: [u8] = &[];\n        let mut total_len: u32 = 0;\n        for token in tokens {\n            let token_as_fmt_str = f\"{token}\";\n            let token_as_str = unquote!(quote {$token_as_fmt_str});\n            let token_len = unquote!(quote { $token_as_str.as_bytes().len() });\n            let token_as_bytes = unquote!(quote { $token_as_str.as_bytes().as_slice() });\n            total_len += token_len;\n            acc = acc.append(token_as_bytes);\n        }\n        let result = unquote!(\n            quote {\n                let signature_as_array: [u8; $total_len] = $acc.as_array();\n                signature_as_array.as_str_unchecked()\n            },\n        );\n        (quote { $result }, total_len)\n    }\n}\n\npub(crate) comptime fn compute_fn_selector(f: FunctionDefinition) -> Field {\n    // The function selector is computed from the function signature, which is made up of the function name and types of\n    // parameters, but not including the return type. For example, given:\n    //\n    // fn foo(a: Field, b: AztecAddress) -> Field\n    //\n    // The signature will be \"foo(Field,AztecAddress)\".\n    let fn_name = f.name();\n    let args_signatures =\n        f.parameters().map(|(_, typ): (Quoted, Type)| signature_of_type(typ)).join(quote {,});\n    let signature_quote = quote { $fn_name($args_signatures) };\n    let (signature_str_quote, _) = signature_quote.as_str_quote();\n\n    let computation_quote = quote {\n        protocol_types::traits::ToField::to_field(protocol_types::abis::function_selector::FunctionSelector::from_signature($signature_str_quote))\n    };\n    unquote!(computation_quote)\n}\n\npub(crate) comptime fn compute_event_selector(s: TypeDefinition) -> Field {\n    // The event selector is computed from the type signature of the struct in the event, similar to how one might type\n    // the constructor function. For example, given:\n    //\n    // struct Foo {\n    //   a: Field,\n    //   b: AztecAddress,\n    // }\n    //\n    // The signature will be \"Foo(Field,AztecAddress)\".\n    let event_name = s.name();\n    let args_signatures = s\n        .fields_as_written()\n        .map(|(_, typ): (Quoted, Type)| {\n            // signature_of_type can handle structs, so this supports nested structs\n            // FIXME: Field generics are not handled here!\n            signature_of_type(typ)\n        })\n        .join(quote {,});\n    let signature_quote = quote { $event_name($args_signatures) };\n    let (signature_str_quote, _) = signature_quote.as_str_quote();\n\n    let computation_quote = quote {\n        protocol_types::traits::ToField::to_field(protocol_types::abis::event_selector::EventSelector::from_signature($signature_str_quote))\n    };\n    unquote!(computation_quote)\n}\n\n/// Returns how many storage slots a type needs to reserve for itself. State variables must implement the Storage trait\n/// for slots to be allocated for them.\npub(crate) comptime fn get_storage_size(typ: Type) -> u32 {\n    // We create a type variable for the storage size. We can't simply read the value used in the implementation because\n    // it may not be a constant (e.g. N + 1). We then bind it to the implementation of the Storage trait.\n    let storage_size = std::meta::typ::fresh_type_variable();\n    assert(\n        typ.implements(quote { crate::state_vars::Storage<$storage_size> }.as_trait_constraint()),\n        f\"Attempted to fetch storage size, but {typ} does not implement the Storage trait\",\n    );\n\n    storage_size.as_constant().unwrap()\n}\n\npub(crate) comptime fn module_has_storage(m: Module) -> bool {\n    m.structs().any(|s: TypeDefinition| {\n        s.has_named_attribute(\"storage\") | s.has_named_attribute(\"storage_no_init\")\n    })\n}\n\npub(crate) comptime fn module_has_initializer(m: Module) -> bool {\n    m.functions().any(|f: FunctionDefinition| is_fn_initializer(f))\n}\n\npub(crate) comptime fn is_note(typ: Type) -> bool {\n    typ.as_data_type().map_or(false, |struc: (TypeDefinition, [Type])| {\n        let (def, _) = struc;\n        def.has_named_attribute(\"note\")\n            | def.has_named_attribute(\"partial_note\")\n            | def.has_named_attribute(\"custom_note\")\n    })\n}\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `noir-protocol-circuits/crates/types/src/meta/mod.nr`. We maintain separate\n/// copies because importing it here from there would cause the `target_trait` to be interpreted in the context\n/// of the protocol circuits types crate, making it impossible to compile code for traits from this crate\n/// (e.g. NoteType).\npub(crate) comptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Type does not implement trait\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/utils.nr"},"105":{"source":"use protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr"},"106":{"source":"use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash =\n            compute_unique_note_hash(nonce, compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash));\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.nonce, note_and_data.nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == first_note_and_data.nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == second_note_and_data.nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr"},"107":{"source":"use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    pending_partial_notes.for_each(|i, pending_partial_note: DeliveredPendingPartialNote| {\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log sans the extra\n            // fields) to get the complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                // temporary node connectivity issue - is simply throwing good enough here?\n                assert(\n                    deliver_note(\n                        contract_address,\n                        pending_partial_note.storage_slot,\n                        discovered_note.nonce,\n                        complete_packed_note,\n                        discovered_note.note_hash,\n                        discovered_note.inner_nullifier,\n                        log.tx_hash,\n                        pending_partial_note.recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr"},"109":{"source":"use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{\n            ComputeNoteHashAndNullifier,\n            partial_notes::process_partial_note_private_msg,\n            pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n            private_notes::process_private_note_msg,\n        },\n        encoding::decode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        msg_type::{\n            PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n        },\n    },\n    oracle::{logs::store_private_event_log, message_discovery::sync_notes},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `syncNotes` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    sync_notes(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get the logs from the capsule array and process them one by one\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    logs.for_each(|i, log: PendingTaggedLog| {\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n        logs.remove(i);\n    });\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(log_plaintext);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            pending_tagged_log.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        // In the case of events, the msg metadata is the event selector.\n        let event_selector = EventSelector::from_field(msg_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            msg_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n            pending_tagged_log.tx_index_in_block,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_logs.nr"},"110":{"source":"use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n        // issue, and we should perhaps not have marked the tag index as taken.\n        assert(\n            oracle::message_discovery::deliver_note(\n                contract_address,\n                storage_slot,\n                discovered_note.nonce,\n                packed_note,\n                discovered_note.note_hash,\n                discovered_note.inner_nullifier,\n                tx_hash,\n                recipient,\n            ),\n            \"Failed to deliver note\",\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr"},"111":{"source":"// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\nglobal MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/encoding.nr"},"112":{"source":"use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr"},"133":{"source":"use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr"},"136":{"source":"use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"139":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr"},"140":{"source":"use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr"},"141":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(notifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"142":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"143":{"source":"/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr"},"144":{"source":"use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"149":{"source":"use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"150":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"151":{"source":"use crate::messages::encoding::MAX_MESSAGE_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        msg_content,\n        tx_hash,\n        log_index_in_tx,\n        tx_index_in_block,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr"},"152":{"source":"use crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn sync_notes(pending_tagged_log_array_base_slot: Field) {\n    sync_notes_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr"},"154":{"source":"use crate::{\n    note::{note_interface::NoteType, note_metadata::NoteMetadata, retrieved_note::RetrievedNote},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::IndexedTaggingSecret,\n    traits::{FromField, Packable},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {\n    // This wrapper exists to extract the ORACLE_RETURN_FIELD_LENGTH generic numeric param into a value and pass it to\n    // the oracle, so that it knows how big the return array must be.\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        ORACLE_RETURN_FIELD_LENGTH,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let MAX_NOTES: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    _placeholder_fields: [Field; ORACLE_RETURN_FIELD_LENGTH], // TODO: Compute this value automatically from MAX_NOTES\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let fields: [_; ORACLE_RETURN_FIELD_LENGTH] = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n\n    let mut opt_notes = [Option::none(); MAX_NOTES];\n    for i in 0..opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let maybe_nonce = fields[read_offset];\n            let maybe_note_hash_counter = fields[read_offset + 1] as u32;\n            let packed_note = array::subarray(fields, read_offset + 2);\n\n            let note = Note::unpack(packed_note);\n            let retrieved_note = RetrievedNote {\n                note,\n                contract_address,\n                metadata: NoteMetadata::from_raw_data(maybe_note_hash_counter != 0, maybe_nonce),\n            };\n\n            opt_notes[i] = Option::some(retrieved_note);\n        };\n    }\n    opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"156":{"source":"use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr"},"157":{"source":"use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"159":{"source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"168":{"source":"use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"181":{"source":"use crate::{context::PublicContext, event::event_interface::EventInterface};\nuse protocol_types::traits::ToField;\n\nfn emit<Event, let N: u32>(context: &mut PublicContext, event: Event)\nwhere\n    Event: EventInterface<N>,\n{\n    let selector = Event::get_event_type_id();\n\n    let serialized_event = event.serialize();\n    let mut emitted_log = [0; N + 1];\n\n    // We put the selector in the \"last\" place, to avoid reading or assigning to an expression in an index\n    for i in 0..serialized_event.len() {\n        emitted_log[i] = serialized_event[i];\n    }\n\n    emitted_log[serialized_event.len()] = selector.to_field();\n\n    context.emit_public_log(emitted_log);\n}\n\npub fn encode_event<Event, let N: u32>(\n    context: &mut PublicContext,\n) -> fn[(&mut PublicContext,)](Event) -> ()\nwhere\n    Event: EventInterface<N>,\n{\n    |e: Event| { emit(context, e); }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/unencrypted_logs/unencrypted_event_emission.nr"},"182":{"source":"/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/array/append.nr"},"185":{"source":"/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr"},"186":{"source":"use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr"},"188":{"source":"use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr"},"189":{"source":"// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr"},"191":{"source":"use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/field.nr"},"193":{"source":"use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/point.nr"},"204":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/home/jean/nargo/github.com/noir-lang/poseidon/v0.1.0/src/poseidon2.nr"},"221":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr"},"223":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"266":{"source":"use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"269":{"source":"use crate::{\n    address::{aztec_address::AztecAddress, salted_initialization_hash::SaltedInitializationHash},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    pub inner: Field,\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress,\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer),\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n    ) -> Self {\n        PartialAddress::from_field(poseidon2_hash_with_separator(\n            [contract_class_id.to_field(), salted_initialization_hash.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr"},"271":{"source":"use crate::{\n    address::aztec_address::AztecAddress, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    pub inner: Field,\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(poseidon2_hash_with_separator(\n            [salt, initialization_hash, deployer.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr"},"276":{"source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress},\n    constants::CONTRACT_INSTANCE_LENGTH,\n    contract_class_id::ContractClassId,\n    public_keys::PublicKeys,\n    traits::{Deserialize, FromField, Hash, Serialize, ToField},\n};\n\npub struct ContractInstance {\n    pub salt: Field,\n    pub deployer: AztecAddress,\n    pub contract_class_id: ContractClassId,\n    pub initialization_hash: Field,\n    pub public_keys: PublicKeys,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys.eq(other.public_keys)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        let public_keys_serialized = self.public_keys.serialize();\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            public_keys_serialized[0],\n            public_keys_serialized[1],\n            public_keys_serialized[2],\n            public_keys_serialized[3],\n            public_keys_serialized[4],\n            public_keys_serialized[5],\n            public_keys_serialized[6],\n            public_keys_serialized[7],\n            public_keys_serialized[8],\n            public_keys_serialized[9],\n            public_keys_serialized[10],\n            public_keys_serialized[11],\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys: PublicKeys::deserialize([\n                serialized[4],\n                serialized[5],\n                serialized[6],\n                serialized[7],\n                serialized[8],\n                serialized[9],\n                serialized[10],\n                serialized[11],\n                serialized[12],\n                serialized[13],\n                serialized[14],\n                serialized[15],\n            ]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    pub fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer,\n            ),\n        )\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"283":{"source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr"},"284":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    poseidon::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as poseidon::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = poseidon::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = poseidon::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"298":{"source":"use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint =\n        quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_pack & typ.implements(packable_constraint)) {\n        // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n        let name_at_one_token = collapse_to_one_token(name);\n        let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n        // We add the individual fields to the fields array\n        let pack_method = get_trait_impl_method(\n            typ,\n            quote { crate::traits::Packable<$packed_len> },\n            quote { pack },\n        );\n        let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n        for i in 0..packed_len {\n            fields = fields.push_back(quote { $packed_struct_name[$i] });\n        }\n\n        // We add the new auxiliary variable to the aux_vars array\n        aux_vars = aux_vars.push_back(packed_struct);\n    } else if typ.is_field() {\n        // For field we just add the value to fields\n        fields = fields.push_back(name);\n    } else if typ.as_integer().is_some() | typ.is_bool() {\n        // For integer and bool we just cast to Field and add the value to fields\n        fields = fields.push_back(quote { $name as Field });\n    } else if typ.as_data_type().is_some() {\n        // For struct we pref\n        let nested_struct = typ.as_data_type().unwrap();\n        let params = nested_struct.0.fields(nested_struct.1);\n        let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n            let maybe_prefixed_name = if name == quote {} {\n                // Triggered when the param name is of a value available in the current scope (e.g. a function\n                // argument) --> then we don't prefix the name with anything.\n                param_name\n            } else {\n                // Triggered when we want to prefix the param name with the `name` from function input. This\n                // can typically be `self` when implementing a method on a struct.\n                quote { $name.$param_name }\n            };\n            generate_serialize_to_fields(quote {$maybe_prefixed_name}, param_type, should_pack)\n        });\n        let struct_flattened_fields = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n        );\n        let struct_flattened_aux_vars = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n        );\n        fields = fields.append(struct_flattened_fields);\n        aux_vars = aux_vars.append(struct_flattened_aux_vars);\n    } else if typ.as_array().is_some() {\n        // For array we recursively call `generate_serialize_to_fields(...)` for each element\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        for i in 0..array_len {\n            let (element_fields, element_aux_vars) =\n                generate_serialize_to_fields(quote { $name[$i] }, element_type, should_pack);\n            fields = fields.append(element_fields);\n            aux_vars = aux_vars.append(element_aux_vars);\n        }\n    } else if typ.as_str().is_some() {\n        // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n        // then we add each byte to fields as a Field\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let as_member = name.as_expr().unwrap().as_member_access();\n        let var_name = if as_member.is_some() {\n            as_member.unwrap().1\n        } else {\n            name\n        };\n        let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n        let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n        for i in 0..str_len {\n            fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n        }\n        aux_vars = aux_vars.push_back(as_bytes);\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr"},"300":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"301":{"source":"use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr"},"310":{"source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr"},"321":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"335":{"source":"use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"339":{"source":"use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr"},"340":{"source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"356":{"source":"pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr"},"359":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"369":{"source":"use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n","path":"/home/jean/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr"},"400":{"source":"use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER},\n        hash::poseidon2_hash_with_separator,\n        traits::{Deserialize, Hash, Packable, Serialize, ToField},\n        utils::arrays::array_concat,\n    },\n};\n\n// UintNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the amount).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n/// A private note representing a numeric value associated to an account (e.g. a token balance).\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct UintNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The number stored in the note.\n    value: u128,\n}\n\nimpl NoteHash for UintNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because UintNote has just one variant (where the value is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            UintPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note = PartialUintNote {\n            commitment: private_content.compute_partial_commitment(storage_slot),\n        };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.value)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: u128, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness }\n    }\n\n    pub fn get_value(self) -> u128 {\n        self.value\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the value, since the note will be later\n    /// completed in public. This is a powerful technique for scenarios in which the value cannot be known in private\n    /// (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// The returned `PartialUintNote` value must be sent to public execution via a secure channel, since it is not\n    /// possible to verify the integrity of its contents due to it hiding information. The recommended ways to do this\n    /// are to retrieve it from public storage, or to receive it in an internal public function call.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` from `sender` so that they can\n    /// discover the note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        sender: AztecAddress,\n    ) -> PartialUintNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = UintPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        let encrypted_log =\n            note::compute_partial_note_log(private_log_content, storage_slot, recipient, sender);\n        context.emit_private_log(encrypted_log);\n\n        PartialUintNote { commitment }\n    }\n}\n\n/// The private content of a partial UintNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct UintPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of UintNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl UintPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            array_concat(self.pack(), [storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateUintPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateUintPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        UintNote::get_id()\n    }\n}\n\n/// A partial instance of a UintNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the value field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the value to the public), resulting in a UintNote that can be used like any other one (except\n/// of course that its value is known).\n#[derive(Packable, Serialize, Deserialize)]\npub struct PartialUintNote {\n    commitment: Field,\n}\n\nimpl PartialUintNote {\n    pub fn commitment(self) -> Field {\n        self.commitment\n    }\n}\n\nimpl PartialUintNote {\n    /// Completes the partial note, creating a new note that can be used like any other UintNote.\n    pub fn complete(self, value: u128, context: &mut PublicContext) {\n        // A note with a value of zero is valid, but we cannot currently complete a partial note with such a value\n        // because this will result in the completion log having its last field set to 0. Public logs currently do not\n        // track their length, and so trailing zeros are simply trimmed. This results in the completion log missing its\n        // last field (the value), and note discovery failing.\n        // TODO(#11636): remove this\n        assert(value != 0, \"Cannot complete a PartialUintNote with a value of 0\");\n\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the value). The contract will later find it by searching\n        //  for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(value));\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    fn compute_note_completion_log(self, value: u128) -> [Field; 2] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, value.to_field()]\n    }\n\n    fn compute_complete_note_hash(self, value: u128) -> Field {\n        // Here we finalize the note hash by including the (public) value into the partial note commitment. Note that we\n        // use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator(\n            [self.commitment, value.to_field()],\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\nmod test {\n    use super::{\n        PartialUintNote, PrivateUintPartialNotePrivateLogContent, UintNote,\n        UintPartialNotePrivateContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Packable},\n            utils::arrays::array_concat,\n        },\n        utils::array::subarray,\n    };\n\n    global value: u128 = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a UintNote has the same note hash as a PartialUintNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = UintNote { value, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialUintNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(value);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular UintNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular UintNote.\n\n        let note = UintNote { value, randomness, owner };\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        let partial_note = PartialUintNote { commitment };\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(value)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in UintNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(value), 1);\n\n        assert_eq(\n            array_concat(private_log_without_public_tag, public_log_without_tag),\n            note.pack(),\n        );\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/uint-note/src/uint_note.nr"}}}