{"noir_version":"1.0.0-beta.4+0000000000000000000000000000000000000000","name":"Lending","functions":[{"name":"withdraw_private","hash":"7697844457194777862","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["withdraw_private"],"brillig_names":["discover_new_messages","decompose_hint","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper","store_in_execution_cache_oracle_wrapper","directive_invert"]},{"name":"withdraw_public","hash":"14784347771513805414","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["withdraw_public"],"brillig_names":["withdraw_public"]},{"name":"sync_notes","hash":"1058966235015214508","is_unconstrained":true,"custom_attributes":["aztec::macros::functions::utility"],"abi":{"parameters":[],"return_type":null,"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["sync_notes"],"brillig_names":["sync_notes"]},{"name":"repay_private","hash":"9248881931550968708","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"on_behalf_of","type":{"kind":"field"},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"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","debug_symbols":"","names":["repay_private"],"brillig_names":["discover_new_messages","decompose_hint","store_in_execution_cache_oracle_wrapper","call_private_function_internal","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper","directive_invert"]},{"name":"compute_total_deposited_assets","hash":"11705121709750862310","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"deposit_accumulator","type":{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["compute_total_deposited_assets"],"brillig_names":["compute_total_deposited_assets"]},{"name":"_compute_collateral_debt_value","hash":"878375973689561641","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8945853978429536226":{"error_kind":"string","string":"Function _compute_collateral_debt_value can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"","names":["_compute_collateral_debt_value"],"brillig_names":["_compute_collateral_debt_value"]},{"name":"deposit_private","hash":"9858268988350725103","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"on_behalf_of","type":{"kind":"field"},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["deposit_private"],"brillig_names":["discover_new_messages","decompose_hint","store_in_execution_cache_oracle_wrapper","call_private_function_internal","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper","directive_invert"]},{"name":"get_position","hash":"12736461951461773010","is_unconstrained":true,"custom_attributes":["utility","view"],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"position::Position","fields":[{"name":"collateral","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"scaled_debt","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"debt","type":{"kind":"integer","sign":"unsigned","width":128}}]},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"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","debug_symbols":"","names":["get_position"],"brillig_names":["get_position"]},{"name":"_borrow","hash":"14327200012204619600","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"1602191554767750373":{"error_kind":"string","string":"Function _borrow can only be called internally"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14687457983715723088":{"error_kind":"string","string":"Asset is not borrowable"},"15333773746166717806":{"error_kind":"string","string":"Insufficient collateral"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","names":["_borrow"],"brillig_names":["_borrow"]},{"name":"get_accumulators","hash":"2057186345167319381","is_unconstrained":true,"custom_attributes":["utility","view"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]},{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]}]},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_accumulators"],"brillig_names":["get_accumulators"]},{"name":"public_dispatch","hash":"11619423474532780658","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"951653053333916160":{"error_kind":"string","string":"Deposit cap exceeded"},"1602191554767750373":{"error_kind":"string","string":"Function _borrow can only be called internally"},"1840251649407153602":{"error_kind":"string","string":"Insufficient borrowed amount"},"2830029349304997821":{"error_kind":"fmtstring","length":27,"item_types":[{"kind":"field"}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"4270187767586857285":{"error_kind":"string","string":"Function _compute_total_collateral_value can only be called internally"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5235018679007078561":{"error_kind":"string","string":"Invalid asset or market id"},"6787403583199288031":{"error_kind":"string","string":"Insufficient balance"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8945853978429536226":{"error_kind":"string","string":"Function _compute_collateral_debt_value can only be called internally"},"10435052277855889085":{"error_kind":"string","string":"Function _withdraw can only be called internally"},"12348881442450494403":{"error_kind":"string","string":"Function _compute_utilization_rate can only be called internally"},"13135008234568508716":{"error_kind":"string","string":"Function _repay can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14434150440419769526":{"error_kind":"string","string":"collateral >= debt"},"14687457983715723088":{"error_kind":"string","string":"Asset is not borrowable"},"15333773746166717806":{"error_kind":"string","string":"Insufficient collateral"},"16022896159229267359":{"error_kind":"string","string":"Function _deposit can only be called internally"},"16523063005220065570":{"error_kind":"string","string":"Function _liquidate can only be called internally"},"17134621154673181869":{"error_kind":"string","string":"Function _compute_borrow_rate can only be called internally"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","names":["public_dispatch"],"brillig_names":["public_dispatch"]},{"name":"_liquidate","hash":"2071602468020835776","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"debt_token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"user","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"debt_to_liquidate_amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"1840251649407153602":{"error_kind":"string","string":"Insufficient borrowed amount"},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14434150440419769526":{"error_kind":"string","string":"collateral >= debt"},"15333773746166717806":{"error_kind":"string","string":"Insufficient collateral"},"16523063005220065570":{"error_kind":"string","string":"Function _liquidate can only be called internally"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"","names":["_liquidate"],"brillig_names":["_liquidate"]},{"name":"_compute_utilization_rate","hash":"6309487142225605641","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"precision","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"deposit_accumulator","type":{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]},"visibility":"private"},{"name":"borrow_accumulator","type":{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"12348881442450494403":{"error_kind":"string","string":"Function _compute_utilization_rate can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["_compute_utilization_rate"],"brillig_names":["_compute_utilization_rate"]},{"name":"borrow_public","hash":"12022995594375251255","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["borrow_public"],"brillig_names":["borrow_public"]},{"name":"get_total_borrowed_assets","hash":"17457935559320078453","is_unconstrained":true,"custom_attributes":["utility","view"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_total_borrowed_assets"],"brillig_names":["get_total_borrowed_assets"]},{"name":"borrow_private","hash":"7798748308067363141","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"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h17PHB96PXN86PXM8aHXM/cwv5w5PvR65vjQ65njQ69njg+9njk+9HLmDh96PXN86PXM8aHXM8eHXs/cw/xy5vjQ65njQ69njg+9njk+9Hrm+NDLmfd+gumQzPGh1zPHh17PHB96OXNVZyim94Nj2MbG+Inifaaasuv3ZuqnmWkLR/84oH4tBP/upe/xB+XxR+XxJ+XxZ93xNzk/UjJ+03X8fnHbAcp+ybnw0s7vxYLz6Sns9eNu2+ScxXazdVPN1k81277rBunZ9l1lSM+275pEerZ9VzDSs+273hGebey7OpKe7VS1VNRbS93j11sd3eP3yuPXW8Hc49dbk9zj11tl3OPvvG4we0PRO+MLL50WvzXb3WOuNrmDsTltL5zz57F3Lp1XGK24pM5rkWZcOq9amnHpvL5pxqXzuqkZFw+XQy6d13nNuHRePzbj0nld2owL9e4xF+rdQy6ZeveYC/XuMRffORez9SO9sQf9gNx7nVGKv/d6oBR/7+t2Kf7e19dS/L2vg+/jt0vv61Up/t7XlVL8vfc7SvH33pcoxa97/bWL7vXXLrrXX7voXn/tonv9tYvy9dcoX3+N8vXXKF9/jfL1t8n+/pLxK19/jfL11yhff43y9dcoX3+t8vXXKl9/rfL11ypff5vsaywZv/L11ypff63y9dcqX3+t8vXXKV9/nfL11ylff53y9bfJfo6S8Stff53y9dcpX3+d8vXXKV9/vfL11ytff73y9dcrX3+98vXXK19/vfL11ytff73y9dcrX39X5evvqnz9XZWvv6vy9bfJnoOS8StffzvfSbAcv/L1t/OdBMvxK19/O99JsBy/8vW3970Bi/ErX39737+vGL/y9bf3PfaK8Stff3vfB68Yv/L1t/e96orxK19/e99Prhi/8vW39/3kivErX39730+uGL/y9bf7/eRK8Stff7vfn60Uv/L1t/v9zkrxK19/u98/rBS/8vW3+/24SvErX3+739+qFL/y9bf7/aJK8Stff7Py9TcrX3+V739lle9/ZZXvf2WV739lle9/ZZXvf+WU73/llO9/5ZTvf+WU73/lFt3rr+t+/6vT9hUN21izLPbT4DuYaTe6LoGZdqfrEphpt7ougZl2r+sCmO43L2sGRu8pJvf49Z42co/fK49fb1Vzj19v8XGPX2+NcI9f71J+j1/vivtH/N3vKlaKX+9pDff4la+/3e8qVopf+frb/a5ipfiVr7/d7ypWil/5+tv9rmKF+LvfVawUv/L1t/tdxUrxK19/u99VrBS/8vW3+13FSvErX3+731WsFL/y9bf7XcVK8Stff7vfVawUv/L1t/tdxUrxK19/u99VrBS/8vW3+13FSvErX3+731WsFL/y9bf7XcVK8Stff7vfVawUv/L1t/tdxUrxK19/u99VrBS/8vW3+13FSvErX3+731WsFL/y9bf7XcVK8Stff7vfVawUv/L1t/tdxUrxK19/u99VrBS/8vW3+13FSvErX3+731WsFL/y9bf7XcVK8Stff7vfVawUv/L1t/tdxUrxK19/u99VrBS/8vW3+13FSvErX3+731WsFL/y9bf7XcVK8Stff7vfVawUv/L1t/tdxUrxK19/u99VrBS/8vW3+13FSvErX3+731WsFL/u9dd3v6tYKX7d66/vflexUvy611+/6F5/veJdxe7x615/veI9uu7x615/veIdr/6IX/HGVPf4la+/yve/8sr3v/LK97/yve9/FVze4k+LK7z0jzaWS9sMc/489s6l83W9GZfO64VmXDqvQ87j8n6DRt/7BmPNwPS+c1k7MJ2XZO3AdF7rtQPTeRHZDozvG0zaX9onXwITg/sYHGPYx3r7MdXOC1nJqXZem0pOtfNy881U7/F3XhYW4++8eivF3/n2dKvx6zbYhAN73vn2dOX4+y5ZyvH3XVmU4/fK4+97VS/H3/dSXY6/7/W3HH/f6285/r7X3+f4rbFf4+98e7py/HrW3+P49ay/x/HrWX+P49ez/h7H3/n6G03cB6d8EH/n628x/s7X32L8na+/xfg7X39L8Xe+PV05/s7X32L8na+/xfg7X3+L8Xe+/hbjV77+dr49XTl+5etv59vTrckt2+AcUuGlfd4n+/xVpmQPxtq4bMcZ22gflW344NL5ut6KS+fb6bXj0nkdIsTlPtfOaxbRuXZe34jO1U80187rJtG5dl5jic6183rsR3O9tdy2wT4dzHWk2q0015HqscJcO98yUXauI9VNpbmOVDeV5jpS3VSaq59oriPVTaW5jlQ3reteN6WDuqnzbSZl5zpU3VSY61B10/u5dr7Vpexch6qbCnMdqm4qzHWouqkwVz/RXIeqmwpznahu6nx70Hdzvcevtxa6x6+3vvkj/s63By3Hr7cO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meNDr2fuYX45c3zo9czxodczx4dezxwfej1zfOjlzA0+9Hrm+NDrmeNDr2eOD72euYf55czxodczx4dezxwfej1zfOj1zPGhlzO3+NDrmeNDr2eOD72eOT70euYe5pczx4dezxwfej1zfOj1zPGh1zPHh17O3OFDr2eOD72eOT70eub40OuZe5hfzhwfej1zfOj1zPGh1zPHh17PHB96OfPeD7gdkjk+9Hrm+NDrmeNDr2fuYX45c3zo9czxodczx4dezxwfej1zfOjlzIc6vFwLc3zo9czxodczx4dez9zD/HLm+NDrmeNDr2eOD72eOT70eub40MuZB3zo9czxodczx4dezxwfej1zD/PLmeNDr2eOD72eOT70eub40OuZ40MvZx7xodczx4dezxwfej1zfOj1zD3ML2eOD72eOT70eub40OuZ40OvZ44PvZx5wodezxwfej1zfOj1zPGh1zP3ML+cOT70eub40OuZ40OvZ44PvZ45PvRy5hkfej1zfOj1zPGh1zPHh17P3MP8cub40OuZ40OvZ44PvZ45PvR65vjQq5nnBR96PXN86PXM8aHXM8eHXs/cw/xy5vjQ65njQ69njg+9njk+9Hrm+NDLmRt86PXM8aHXM8eHXs8cH3o9cw/zy5njQ69njg+9njk+9Hrm+NDrmeNDL2du8aHXM8eHXs8cH3o9c3zo9cw9zC9njg+9njk+9Hrm+NDrmeNDr2eOD72cucOHXs8cH3o9c3zo9czxodcz9zC/nDk+9Hrm+NDrmeNDr2eOD72eOT70cuYeH3o9c3zo9czxodczx4dez9zD/HLm+NDrmeNDr2eOD72eOT70eub40MuZr/jQ65njQ69njg+9njk+9HrmHuaXM8eHXs8cH3o9c3zo9czxodczx4dezjzgQ69njg+9njk+9Hrm+NDrmXuYX84cH3o9c3zo9czxodczx4dezxwfejnziA+9njk+9Hrm+NDrmeNDr2fuYX45c3zo9czxodczx4dezxwfej1zfOjlzBM+9Hrm+NDrmeNDr2eOD72euYf55czxodczx4dezxwfej1zfOj1zPGhlzPP+NDrmeNDr2eOD72eOT70euYe5pczx4dezxwfej1zfOj1zPGh1zPHh17M3C0LPvR65vjQ65njQ69njg+9nrmH+eXM8aHXM8eHXs8cH3o9c3zo9czxoZcz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","names":["borrow_private"],"brillig_names":["discover_new_messages","decompose_hint","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper","directive_invert"]},{"name":"repay_public","hash":"12319908288352310389","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"1Z3dbts4EIXfxde54PyRw77KogiSNA0MGHHgJAssgr77Sl5LdmLFwtI6gngTSDVnzhdVh0NZw/Zj9evx/v3pdv38e/u6+vHXx2qzfbh7W2+fm7OPPzer+916s1k/3Z7+8Sq0P1j2419f7p7b09e3u93b6gcJq92sHp9/tcfiocnxe715bM5Cc3w+PjB3w4NyPzqngcGaQzoM1kyxHxxtYLCr+mGwa9TTwT9vVqzT0OfcDSfK89HbNPTm/bX3kWtPljp6iiKX6bOJHgbnJu4rfZyanvgTfauRZtDwIY1kEg4xydT7GJMBAQveDW4OfeSeMOrgvRH5elXzMI1xT5P4Ms2Ed6iEQRr12NNwvkxz+dcVQgswWkDQAooWMLRARAsktICjBTJYQNFOVrSTFe1kRTtZ0U7W653Mkbq1EMeTmt8s6/YKEa6Q4AoOV8hoBQtwBYIrMFxB4AoKV4B72uCeNrinDe5pu97TUbqldrTjo1eObfoYsOkJm56x6QWbXrHpDZs+YtMnbHrHpse6NmFdm7CuTVjXJnj1TfDqm+DVN8Grb4JX3wSvvgm+onb4itrhK2qHr6gd7mmHe9rhnna4px1blR1blR1blTO2KmdsVc7Yqpyxa+mMXUtn7Fo6Y9fSGevajHVtxrq2eXcHzn+9b8lD90aUnPxMgcG/gYDzKzi/gfNHcP4Ezu/g/GAHE9jBROD8YP8S2L8E9i+B/Utg/xLYvwT2L437N9tIBQs5dqObYz92fNi+G4Y4zKBBM2jw9RoNaN8tRax2qnE+XILSYbQE+9R3sweSpQHp0oBsaUBxaUBpaUC+NKC8MCAJ8wPlbrRwGun/a56KUujnURY946fK+blyfqmcXyvnn78oSezWgCInDd3f8CeRnj/ZOf/8NUz71mlRTWP8Ho7rOD9raSOZv+Qp0ZHfx/hz35HXHJuf8Xvl/Llufg2V81Pl/Fw5v1TOr5XzW+X8sXL+yuuvVl5/tfL6a5XXX6u8/lrl9deWNP/vgZY0oe+BljRD74Hmn3KNu/fyYqOPnM0zzXE/sLKc8ee6+WOonJ8q5+fK+XUCfnE9agQ+5d9r2AwacQaNNIPG8HwapesQTdFGXitP+G8C0Dd7KiKnHieO4JwOTvTp+rQK32yrmFKB4Ap8tcJIDzB9s8FiUgnFSxheIuIlEl7C8RIZLuEBL0F4Cby7He9ux7vb8e726919sevKEzi/g/NnbP4cwPkJnJ/B+QWcX8H5DZwf7N8M9m8G+zdj/cshgPMTOD+D8ws4v4LzGzh/BOdP4PwOzg/2L4H9S2D/Eti/BPYvgf1LYP8S2L8E9i+B/Utg/zL8iZiZ8BKMlxC8hOIlDC8R8RIJL+F4Cfj3XSx4dwve3YJ3t+DdLeBKLeBKLeBKLeBKLeBKLeBKreCVtoJX2gpeaSt4pa1g/+qof7+86Bt4mRu1384Q43E3gx4UIlwhwRX8eoUpt9ix5oUBWVgaEC0NiJcGJEsD0qUB2dKA4vxAE+4sZEuV83vl/Llu/hgq55+/KE25s5bj/DVsyp21HOcveVPuDOColfNb5fyxcv5UOb9Xzp/r5k+hcn6qnJ8r56+8/o73hi+cv/L6myqvv6ny+psqr7++pPl/D7SkCX0PtKQZeg80/5Q75c5CdqucP1bOnyrn97r58xSPDJd3i3KmGTR4Bg2Ba8hwazSp9lFqx7/z5huP/6JiUVQqivKiqFwSNdxIPBo1eL/RsRWHIh+/O9VDEJcESUlQLAkavn4X34vLcB/nWJAW4A23EI4FlVyI4Ta/sSAvCcoFQRJKgkpuWCm5YaXkhpWSO0Ks4N6TWBKUSoK8JKjEhFpiQqWSIC4JkpIg/b9Bf5qzv+9267v7zeNrE9N++P788LbePh9O3/556T653603m/XT7ctu+/D46333eLvZPrSfrUL7oxUXTTdN+Wxg2vtMg9w0leBn+z+KNKec7UZCaE/b6yiBmlNpGBqOfwE=","names":["repay_public"],"brillig_names":["repay_public"]},{"name":"_withdraw","hash":"7829102963014504478","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5235018679007078561":{"error_kind":"string","string":"Invalid asset or market id"},"6787403583199288031":{"error_kind":"string","string":"Insufficient balance"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"10435052277855889085":{"error_kind":"string","string":"Function _withdraw can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"15333773746166717806":{"error_kind":"string","string":"Insufficient collateral"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","names":["_withdraw"],"brillig_names":["_withdraw"]},{"name":"_deposit","hash":"13295169981751632188","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"951653053333916160":{"error_kind":"string","string":"Deposit cap exceeded"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5235018679007078561":{"error_kind":"string","string":"Invalid asset or market id"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"16022896159229267359":{"error_kind":"string","string":"Function _deposit can only be called internally"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"","names":["_deposit"],"brillig_names":["_deposit"]},{"name":"deposit_public","hash":"17715251559497544616","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"on_behalf_of","type":{"kind":"field"},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"1Z3RTus4EIbfpddceDxje+a8yuoIAYeDKlUUFVhphc67b9Jt2kKbho3yT+Mb1FAP3/xRfo/TjMvH4tfj/fvT7fL59/p18eOvj8Vq/XD3tlw/N0cff24W95vlarV8uj3+9SK0PyJvx7++3D23h69vd5u3xQ/iKOlm8fj8q33NGpq/8Xu5emyOQvP6dHyIsRseJO5HWzkzWCyU3WAxyvvBOZ0ZrCK6G6yS5Xjwz5tFlGmyN+uGE5lf9mma7JPuz70OnHtKpcueMvPl7C2x7AZbE/c1+zx19hQ/Zd8yigNDzzJMibsgU6Z9VOIziBQ07EY3L3XgqkjUpa+Jw9fzaj35cDrkk9LlfCa8Sjmcz6eko/ND8XI+lyUz4RERj2A8QvCIhEdkPKLgEYpHGBwheHcL3t2Cd7fg3S14d8sU7o6ZuvVSzEfrgmbpt2VkB0ZxYKgDw/CMFBwY5MCIDgx2YIgDw8HnycHnycHnycHnaQqfZ+6W6Tkdbt0st4Ac0ABCAyIawGiAoAEJDchoQEEDFA1AO7mgnVzQTi5oJxeHKl0cqnRxqNLFoUoXhypdHKp0cViNq8NqXB1W4+qwGlcHn6uDz9XB5+rgc0VXb0VXb0VXb0NXb0NXb0NXb0Ovww29Djf0OtzQ63BDO9nQTja0k5tniXDCFF4mDd1TWlLSE0aEq2A4QeCEBCdkOKHACQonwF1NcFcTwQlwTxPc0wT3NME9TXBPE9zTBPc0fcfTNtBg08wMOXfDg+mhSyVtu3goBhcKuVDiFJQm2X2vF0VJx5TT4RyEdqM5pE8dQ9uUeH4pyfxSSvNLKc8vpTK/lHR+KdnsUuJwjZSsG82xDHQyNndUJexn1shyooCqVxCrV8DVK5DqFVyjUHHuVonMR43qPQoK71MJJZ0quEZdE+7OKouUIQUaDqs8PWnFI75GGRSigwIdUmD7XsLmddITBVq9AqtdgYTqFVD1CmL1Crh6BVK9glS9gly9guprslRfk6X6mpyqr8mp+pqcqq/JaV71YJvSvCb4bUrzmrG3KV1jCk6x6wLgNHhr2tz3HHZES+QTBVa7ghyqV0DVK4jVK5BJFLDKgRLisYItJblQsguluFB6Zlg7fLuFmZXLlAm/I4H6doVY7kp8DCEOdXJ9Gt48+z8e3lL6toZMTCEXSpyAMtCvTH0bRaaFiAckeUCyB6R4QNQDYg4QDR4Q8oB4OF49HK8ejlcPx+sUjr/Y/aUFTlA4wdAEC3ACwQkRTmA4QeCEBCfAPW1wTxvc04b2dAwBTiA4IcIJDCcInJDghAwnFDhB4QS4pwnuaYJ7muCeJrinCe5pgnua4J4muKcJ7mmCezo63GHHSB6Q6AFhD4h4QJIHJHtAigdEPSAOn6lF9nA8eziePRzPHo5neEVneEVneEVneEVneEVneEUX+Cpd4Kt0ga/SBb5KF7in5Rue/vLw8cyzyiz7jRo5H/ZpyI6RHRjFgaFTMKbcUBjFZpdSCvNLieaXUpxfSjy/lGR+KaX5pZSvkdKEuyljKtUr0OoVWO0KcqhewTUK1ZS7imO+Rl2bcldxzNcog1Pue4hZqleQqleQq1dQqleg1Suw2hWUUL0Cql5BrF5B9TX5Oz3uM1dQfU0u1dfkUn1NLtXXZJ1XPdimNK8JfpvSvGbsbUrXmIKn3E0ZNVWvIFevoFSvQGtXYNPcVFzeIxuNXCjRhcIOFO5p4xbZR0k6MJrPSP6LyqOiyqgoHRVlY6J6Wp2Hos5fdYfmH8rx8Kmr7ILimCAeE5THBJ0/fxeftnNPV+lAkIxIr6eNcSBozInoaTMcCNIxQTYiqKetbyBozAXLYy5YHnPB8pgroqfT7fK119O8NhBUxgTpmKAxJpQxJuzp7RoIimOCeEyQ/N+gP83R33eb5d396vG1iWnffH9+eFuun3eHb/+8dO/cb5ar1fLp9mWzfnj89b55vF2tH9r3FqH90cJZyk1TPptk2utMAt80leBn+99bmsNo6YZDaA/b88iBmkNucmjy+Bc=","names":["deposit_public"],"brillig_names":["deposit_public"]},{"name":"get_total_deposited_assets","hash":"4217374464862972814","is_unconstrained":true,"custom_attributes":["utility","view"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["get_total_deposited_assets"],"brillig_names":["get_total_deposited_assets"]},{"name":"_repay","hash":"4839739056911940416","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5235018679007078561":{"error_kind":"string","string":"Invalid asset or market id"},"6787403583199288031":{"error_kind":"string","string":"Insufficient balance"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13135008234568508716":{"error_kind":"string","string":"Function _repay can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["_repay"],"brillig_names":["_repay"]},{"name":"update_accumulators","hash":"16944235126456135741","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"12348881442450494403":{"error_kind":"string","string":"Function _compute_utilization_rate can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17134621154673181869":{"error_kind":"string","string":"Function _compute_borrow_rate can only be called internally"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["update_accumulators"],"brillig_names":["update_accumulators"]},{"name":"liquidate_public","hash":"10744315789600996030","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"debt_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"user","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"debt_to_cover","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"}],"return_type":null,"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"1VxbbuNIDLyLv/3RZLPZ5FxlsRjk4QwMGE7gJAssgrn7Sh5L8sSWNdtxGeqfwApIVlnqUlEWpY/F4+r+/cf39fbp+XXx7a+Pxeb54e5t/bxttj5+Lhf3u/Vms/7x/fjfi9D+4biPf32527abr293u7fFN4osablYbR/bz9FCU+NpvVk1W6H5fBofmLvwINxHez4TLB7yIVictA/WdCbYROwQbKJyHPz3csFyHfbuXTiR3459ug77ZP2+t4l9Tyl37EljvMzeU5RDsDd5n9nrtdkT/8a+xcg3wLCzGK59jpv1OSmC14SfZ5P0kMMh8GU2Grv6moYj7NqWjwFbnrDlGVs+YssLtnzCllds+Ywtb9jyWNUKVrWCVa1gVStY1QpWtYJVrXxdtazUdUesR11A0+jtETIcweAIjkZIAY5AcASGI0Q4gsAREhwBrukE13SCazrBNa1YV1asKyvWlRXryop1ZcW6smJ7acX20ortpRXbS2esajNWtRmr2oxVbYa7b4a7b4a7b4a7b4a7b4a7r8E7aoN31AbvqA3eURtc0wbXtME1bXBNG9aVDevKjnVlx7qyY13Zsa7s2F7asb20Y3tpx/bSjlWtY1Xb3G4D1ydwfbgBU4h4CMFDJDyE4iEyHsLwEPDemijgIQgPgVc34dVNeHUTXt2EtWmiDK5v4Ppgp2awUzPYqZnB9SO4voDrJ3B9sH4ZrF8G6xc8t0VXGNwiC904HxnZCQJYweDhLQJPbxF4fIvA81sEHuAi8AQX/cEIl/qEAlS6YFIdxkblgOBohD8Y5PoqAn0doTHzfki4Ma40hJ8bKY5B6BAdQ/pt+HVPiOdGKM6NkMyNUJobIZ0boTw3QjY3Qn57Qt5FR84TQ/jNL4s5dLUDx89j+JRC5fypcv5cOf9YOf/bm1Lsn7iJ8eg5phH+Ocaef06n/G/vYRK7PRpF8hR/C30bFyyGE/63tzwhGvjbFH+n/hGs4MlO+OfK+Vvl/L1u/hoq50+V8+fK+cfK+Uvl/FPl/Cv3X63cf7Vy/9XK/TdX7r+5cv/Nczr/7wnN6YS+JzSnM/Se0O1PuYm7O3oxTV5yNvc3htdgCMcT/lY5f6+bv4XK+VPl/K9xyRBNBozj+535F4bcACPdAEPxGCOz0SJ9lqThmLP+ugE6MvJ8OYtHBpmnsqgoi4uyYlHW+fU2DOs1F/rDb6dySEolSVqS5AVJI2OdF++L88ig5kRSLqFnJUklO2Jkpm8iiUqSuCQpliSVLFguWbBcsmC5ZEWMzJ5dXnsjA2WXk0amxCaSqCSpRISxRIQjc1cTSakkSUuS8v9N+tls/XO3W9/db1aH9zM+vW8fjl7X+Pbvy+rTmxtfds8Pq8f33ap9h+Pw+sZ237CEJXtqyLRfml2XMYXWCtvFQGZL8thutoeZXJpNbTg0PP4D","names":["liquidate_public"],"brillig_names":["liquidate_public"]},{"name":"_compute_borrow_rate","hash":"5232259944042920880","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"asset","type":{"kind":"struct","path":"asset::Asset","fields":[{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"loan_to_value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"oracle","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_borrowable","type":{"kind":"boolean"}},{"name":"optimal_utilization_rate","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"under_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"over_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"deposit_cap","type":{"kind":"integer","sign":"unsigned","width":128}}]},"visibility":"private"},{"name":"utilization_rate","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"precision","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17134621154673181869":{"error_kind":"string","string":"Function _compute_borrow_rate can only be called internally"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VYy27TQBT1M42TVq1gwwp2bNjYseO4G1RQQ5q+EAKxAQlN/BAV5aEWEMt8Oh2YKx9uZ1pVsSM8UjVj3+Nzz33M2I1t/R2Dqz9brT24xwdh9tQcrjaiBrnCNnXaHdHpdESn2xGdXkd0+h3R2euIzo2O6Ox3RGfQoE4bdA6uLZR4eRDKQ0ZuYLk5ZOPJosqEBZpAB5p7n9RMeAfsDR5gUcD8NsmfhUmF8bagPw4U57AdfkH8m+3whxuKZ39Z82Ms5NdV83RZ53IKz/iAmQFmBhjkOQDMgYFnDpi5AXMImEMD5ggwRwbMMWCODZgTwJwwzJZa4wbdVxiyOWCbMpsLthfM5oFtxmw+2A6YrQe2ObNtgO2Q2fpgO2I23E/HzIbnCOVHcj206vUjq35GjlOFw9xRz7dx5lydCWVg/Zvzps+0+wb9cgxVHt6qa7m/dtRa/Pz88lv+tSifFcVFeXmJvcT35U3jLpybd+B8wDlPf5yfn1Vn5cX019nl92vcWxpuWjuWPjauC3E4dOeuHHtqDlcbfz4qMYbHapa1ew852eY5eV1+KcqL/6l0FgvFt8zHPA/7iZpl2B/UesvSl0w3y+Fq7lFZda+3Jr/nd26I1dbETvEHTA/mhvBzNctjdsQ4bfa8iZOwDnD5GkzANBA+VbOsz8LA6cBzqIteAVQDj+nbU9fhioP8Uh94oMfT6PEZ/imLi3LhavKBPITva/wGDIN++8yvvC4ZXlffAbuHeIrFVN+BIfbnoGFh4DTlwTZoRj89wLgMr+vJnoaf+56B5o9qrduHNvC/MWjF3sWakQ7dq7yN3qXYsIdcjR6ei1csLupNrJmt4aH7nsYv9jc/FzzmV9e7zi0aqC91NcOeoJptazjomSFo9Ja1vanPrUlW/0/sLutc4Oe0xfz7DP9OXeP+pXmV38CqiYiqWFRiLIoiycU9xm9BPoct+F+UURlXVRWXIqnSau3+yyIX6WSUxeM4TBJRrNv/KMvS3dEiTCZFXhVJvG7/aZJGWSayPM2r3SRfrNt/MhaTXEyiaDeJyiQa3+b/N2+7b5UQGQAA","debug_symbols":"vddta8IwEAfw79LXfZFL7pK7fZUxRtU6CqVK1cGQffelow8ua6c7xDeSyP28v2lamnO2KVent9eq2e4O2dPzOat36+JY7Zo4O3/m2aqt6rp6e738OjPdh7Pf9Yd90XTTw7Foj9kTOIuUZ2Wz6caOTfyNbVWXcWbi+He9sXYoN2jHagkzxSgm9MUo4MdiTzPFjMh9MaPHy+KXPHPuPulFhnIAeVx6vE964nHt+craA4UhPXjn/k4v5LAvlujS9HTv9GB/pO96+Af0CA/owbM9QMQNyBqAKz3IsOnL45CvbD2CIT+TM+nFk9lAMUSYArlwJdAd7wU0N6yQkx+BOgY6ZnVs9nFjgxuXIY4v1oHct0KVIpXyKhUWlJVJBU4UmXkVLI4qBJcqUCmrUk6lcEm5UbGBVJFKeZUKKsUqJRrljUqBSi3sDTY0KQypciqFKkUqdcvewPSu9At7wwv9pVilRKOCUSlQqYWrjGF6HpJNd1RAlSKV8ioVVIpVSjSKjUrBkvKTIkqVVSn8/476jLP3oq2KVV32Z6vtqVlfHLWOH/syOXXt29263Jzasjt/TUcv6FaIfS4Qw0D3x4Xz+KYRm8RGXw==","names":["_compute_borrow_rate"],"brillig_names":["_compute_borrow_rate"]},{"name":"constructor","hash":"8402087236782975651","is_unconstrained":false,"custom_attributes":["private","initializer"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6753155520859132764":{"error_kind":"string","string":"Failed to deliver note"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"8830323656616886390":{"error_kind":"string","string":"Got a public log emitted by a different contract"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"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Lm3GhXr3mAv17iGXTL17zIV695iL75yL2fqR3tiDfkDuvc4oxd97PVCKv/d1uxR/7+trKf7e18Hv47dL7+tVKf7e15VS/L33O0rx996XKMWve/21i+711y6611+76F5/7aJ7/bWL8vXXKF9/jfL11yhff43y9bfJ/v6S8Stff43y9dcoX3+N8vXXKF9/rfL11ypff63y9dcqX3+b7GssGb/y9dcqX3+t8vXXKl9/rfL11ylff53y9dcpX3+d8vW3yX6OkvErX3+d8vXXKV9/nfL11ylff73y9dcrX3+98vXXK19/vfL11ytff73y9dcrX3+98vXXK19/V+Xr76p8/V2Vr7+r8vW3yZ6DkvErX38730mwHL/y9bfznQTL8StffzvfSbAcv/L1t/e9AYvxK19/e9+/rxi/8vW39z32ivErX3973wevGL/y9bf3veqK8Stff3vfT64Yv/L1t/f95IrxK19/e99Prhi/8vW3+/3kSvErX3+735+tFL/y9bf7/c5K8Stff7vfP6wUv/L1t/v9uErxK19/u9/fqhS/8vW3+/2iSvErX3+z8vU3K19/le9/ZZXvf2WV739lle9/ZZXvf2WV73/llO9/5ZTvf+WU73/llO9/5Rbd66/rfv+r0/YVDdtYsyz20+A7mGk3ui6BmXan6xKYabe6LoGZdq/rApjuNy9rBkbvKSb3+PWeNnKP3yuPX29Vc49fb/Fxj19vjXCPX+9Sfo9f74r7O/7udxUrxa/3tIZ7/MrX3+53FSvFr3z97X5XsVL8ytff7ncVK8WvfP3tflexQvzd7ypWil/5+tv9rmKl+JWvv93vKlaKX/n62/2uYqX4la+/3e8qVopf+frb/a5ipfiVr7/d7ypWil/5+tv9rmKl+JWvv93vKlaKX/n62/2uYqX4la+/3e8qVopf+frb/a5ipfiVr7/d7ypWil/5+tv9rmKl+JWvv93vKlaKX/n62/2uYqX4la+/3e8qVopf+frb/a5ipfiVr7/d7ypWil/5+tv9rmKl+JWvv93vKlaKX/n62/2uYqX4la+/3e8qVopf+frb/a5ipfiVr7/d7ypWil/5+tv9rmKl+JWvv93vKlaKX/n62/2uYqX4la+/3e8qVopf+frb/a5ipfiVr7/d7ypWil/5+tv9rmKl+JWvv93vKlaKX/n62/2uYqX4la+/3e8qVopf9/rru99VrBS/7vXXd7+rWCl+3euvX3Svv17xrmL3+HWvv17xHl33+HWvv17xjle/41e8MdU9fuXrr/L9r7zy/a+88v2vfO/7XwWXt/jT4gov/aON5dI2w5w/j71z6Xxdb8al83qhGZfO65DzuHy/QaPvfYOxZmB637msHZjOS7J2YDqv9dqB6byIbAfG9w0m7S/tky+BicF9DI4x7GO9/Zhq54Ws5FQ7r00lp9p5ufnNVO/xd14WFuPvvHorxd/59nSr8es22IQDe9759nTl+PsuWcrx911ZlOP3yuPve1Uvx9/3Ul2Ov+/1txx/3+tvOf6+19/n+K2xX+PvfHu6cvx61t/j+PWsv8fx61l/j+PXs/4ex9/5+htN3AenfBB/5+tvMf7O199i/J2vv8X4O19/S/F3vj1dOf7O199i/J2vv8X4O19/i/F3vv4W41e+/na+PV05fuXrb+fb063JLdvgHFLhpX3eJ/v8VaZkD8bauGzHGdtoH5Vt+ODS+breikvn2+m149J5HSLE5T7XzmsW0bl2Xt+IztVPNNfO6ybRuXZeY4nOtfN67EdzvbXctsE+Hcx1pNqtNNeR6rHCXDvfMlF2riPVTaW5jlQ3leY6Ut1UmqufaK4j1U2luY5UN63rXjelg7qp820mZec6VN1UmOtQddP3c+18q0vZuQ5VNxXmOlTdVJjrUHVTYa5+orkOVTcV5jpR3dT59qDfzfUev95a6B6/3vrmd/ydbw9ajl9vHXKPX29tcY+/73ohLMsWSHDBHMTvlcff97pejr/vtbocf9/rbzn+vtffcvx9r7+l+NfOtwctx9/3+luOv+/1txy/7vV3XXSvv2vn24OW49e9/q6dbw9ajl/3+rt2vj1oMf7Otwctx698/e18e9By/MrX3863By3Hr3z97Xwbz3L8ytffzrfFLMevfP3tfJPJcvzK19/Ot2wsx698/e18A8Ry/MrX3863KizHr3z97Xz/wXL8ytffzvcfLMevfP3tfP/BcvzK19/O9x8sx698/e18/8Fy/MrX3873HyzHr3z97Xz/wXL8ytffzvcfLMevfP3tfP/BcvzK19/O9x8sx698/e18/8Fy/MrX3873HyzHr3z97Xz/wXL8ytffzvcfLMevfP3tfP/BcvzK19/O9x8sx698/e18P79y/MrX38730ivHr3z97XzPu3L8ytff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M0/40OuZ40OvZ44PvZ45PvR65h7mlzPHh17PHB96PXN86PXM8aHXM8eHXs4840OvZ44PvZ45PvR65vjQ65l7mF/OHB96PXN86PXM8aHXM8eHXs8cH3o187zgQ69njg+9njk+9Hrm+NDrmXuYX84cH3o9c3zo9czxodczx4dezxwfejlzgw+9njk+9Hrm+NDrmeNDr2fuYX45c3zo9czxodczx4dezxwfej1zfOjlzC0+9Hrm+NDrmeNDr2eOD72euYf55czxodczx4dezxwfej1zfOj1zPGhlzN3+NDrmeNDr2eOD72eOT70euYe5pczx4dezxwfej1zfOj1zPGh1zPHh17O3ONDr2eOD72eOT70eub40OuZe5hfzhwfej1zfOj1zPGh1zPHh17PHB96OfMVH3o9c3zo9czxodczx4dez9zD/HLm+NDrmeNDr2eOD72eOT70eub40MuZB3zo9czxodczx4dezxwfej1zD/PLmeNDr2eOD72eOT70eub40OuZ40MvZx7xodczx4dezxwfej1zfOj1zD3ML2eOD72eOT70eub40OuZ40OvZ44PvZx5wodezxwfej1zfOj1zPGh1zP3ML+cOT70eub40OuZ40OvZ44PvZ45PvRy5hkfej1zfOj1zPGh1zPHh17P3MP8cub40OuZ40OvZ44PvZ45PvR65vjQi5m7ZcGHXs8cH3o9c3zo9czxodcz9zC/nDk+9Hrm+NDrmeNDr2eOD72eOT70cuYGH3o9c3zo9czxodczx4dez9zD/HLm+NDrmeNDr2eOD72eOT70eub40MuZW3zo9czxodczx4dezxwfej1zD/PLmeNDr2eOD72eOT70eub40OuZ40MvZ+7wodczx4dezxwfej1zfOj1zD3ML2eOD72eOT70eub40OuZ40OvZ44PvZy5x4dezxwfej1zfOj1zPGh1zP3ML+cOT70eub40OuZ40OvZ44PvZ45PvRy5is+9Hrm+NDrmeNDr2eOD72euYf55czxodczx4dezxwfej1zfOj1zPGhlzMP+NDrmeNDr2eOD72eOT70euYe5pczx4dezxwfej1zfOj1zPGh1zPHh17OPOJDr2eOD72eOT70eub40OuZe5hfzhwfej1zfOj1zPGh1zPHh17PHB96OfOED72eOT70eub40OuZ40OvZ+5hfjlzfOj1zPGh1zPHh17PHB96PXN86OXMMz70eub40OuZ40OvZ44PvZ65h/nlzPGh1zPHh17PHB96PXN86PXM8aFXMzcLPvR65vjQ65njQ69njg+9nrmH+eXM8aHXM8eHXs8cH3o9c3zo9czxoZczN/jQ65njQ69njg+9njk+9HrmHuaXM8eHXs8cH3o9c3zo9czxodczx4deztziQ69njg+9njk+9Hrm+NDrmXuYX84cH3o9c3zo9czxoZczd5o8Ufp+cAzb2Bg/Ufw9U6/JifzZTDXV/3820xZVt3nMtBD8dy99j98pj98rj39VHn9QHn9UHn/qPP51uy2bbF3hpY3PeRu9PtUKt5e+TzZPNNkm5003m6wZaLI2xb28SDkXRrtbJbxN8pbi++iNTO8FRjsyvZcu7cj4ecm4kHcyKT6R+TrWm52ityZ+odh7aaaDYu8F4s8oLnGjmM1SGJ32OSb3mKJN7mBsTlsYOX8ee6fYe5mqg+JIxXI7iiNV4c0ohpHK+3YUx/INrSiO5TFaURzLj7Si6KEoQHEs79KKIt5FgiLeRYIi3kWCIt5FgGLEu7xFMWxjzbLYA4yYFxGMuBcRjNgXEYwejBIYMTAiGIdyMPnxVGopYjQ+7mxW8/Ta6SiSsGwPsYJ9+rZsWj84DuVhGnIcysU05DiUj2nHMQ3lZBpyHMrKNOTo4fgeR78NDqs54Mh6/SbH/ec5IaQDjhOv16vZw16d/8TxzmbiNbjEJk+8rhbZTLxWFtkM1cv74X17D+TGZi3ct29vn/wjlPzle5d5qHZeU5IekkIkh2rqNSU5c19PluRITsEtLu4kcymQwjf380i1vyyZkSp/STJ2Ganu/xkZY8K6Db/9/bQ9hzFH22h8/xsuu4zkEtqSHMlTtCU5kqc4maTYL+js4qHegPpIXuWn1KPdX/zWynMF6jbG/esN8Wk7nY3kSF6lLcl5vYo0yXm9zU9JSj7ftMu8zqkpdzOzL2vJfWYX15L7zJ6vJfeZHWJL7tTYJ3H/9ntG1lDPnMT92+8lWUs98zb3wncurKVGkWNJ3SHHklpCjqWH5dvrlOT3C6ylj9yKPDVxK/L0qVuRp6/divzETvD2sHRHeWs1+wL529PWx2kz6QlKSodPcpZ9dLT2r9zdxE6wKfeJXWNT7hM7TEHud5YTO0xxlh6WYiwn9oziLCd2geIsJ/Z14iwndmo/ZWn3h5+3BvtywBLvJcbS46fkWFJfyrFkHX+b5eqXjeW6HrFkHZdjyTp+zPJOh5X5GzpDHfEoT2fmDqM1+3mZt0fIS+EuVfjd3lBnSLYlOXNFJ0vSQ/JdknK/ahzqTEs91Gf2Lp+oB3Owzs/sRsp0ZvYXZToz+wuX0k7H++IvYoPdOyzBPY3O973i7VAnUl7JMh6wnNm7/AFLbw9Yzuxefspyj8WGsH5ieRRLWPZYwhPCbA7nGXfDnpIrjE52m2by5tPYu6Yz+6hRNfVoOpymM/vFUTWd2Y2OqunMHnpUTWd2/qNqSr9iOE2HOg13Gk3X7euZaY0HmtK/Uaip3z+nTwAfmtJHUq1pcAea4k970NSuboNye8RsD3TCc/ah02NX1GDWA53wkTp0whvq0Am/p0Knoc4BHlknfJkOnfBaOnSiLu/CE+fHF93yUY9xqPOsR9aJulyHTtTlKnQa6hzxkXWiLtehE3W5Dp2oI07Syfp1R5jWgk4uJLeNDikf6EQdoUEnN/O5xKp0oo7QoRN1RA86ebcfk+Ndcgc68TubLnTKex/W55QOdPLo1JdO67Ic3ff4vpEOnXiuoUMnnmvo0Il+hA6d6Eeo0Gnm87hV6UQ/QodO9CN06EQ/QodOHp1U6EQ/QodO9CN06EQ/QodO9CN06EQ/QoVOln6EDp3oR+jQiX6EDp3oR+jQyaOTCp3oR+jQiX6EDp3oR6jQyVGXn6ST2U8HuDW7i99bdrtOzh19z9JRl3enUz743rKjLtehk0cnFTpRl+vQibpch07U5Tp04jmhDp14TqhCJ89zQh060Y/QoRP9CB060Y/QoZNHJxU60Y/QoRP9CB060Y/QoRP9CB060Y9QodNKP0KHTvQjdOhEP0KHTvQjdOjk0UmFTvQjdOhEXV6lU7QFnWLYNnyNMexjvb1jD5TZTbBTNTfBThH8NvYYt+E2La6APbu0Icx+eTp2PR2uBSk/1oKnwfEojpzMPsvFfj/YmCXu4phPUNJHBlBeS2TAnaWH5bssk807y3U5YEmb/32Wwe8sQ/jKMs58l1/dHrddoymwzHHbZd4s5unmegv8jnLm22VYzI4yPgd+iPL2kvtCZZ/d04uqJm2nCt1eO5dGG7Pfio2PhdEpb1CyObjVxJlv26NqOnOXY1RNZ/6GhlZNc3b7grqkT6J+HRzyPsuQTcE1pVtp9DE42WC/OJs4cwVJuvw4XWb+vgrp8uN0mbk9T7r8NF3SzI8VSJcfp8vMj0NIlx+ny8wNPtLlx+lCE5N0+UG6eNJlpHS5i0qDdEBR6ZAOKCp9TH2imsUuu6p+KSzXJof9gX/Ow3y3KNP0UJi5N3uwBe6y/Xo/yvQmRlSVFoJ2VfOBqjj9EVX1qDqgqjjyEVXFko9YLeHJR1SVrwCNqCrf1BlPVb/QWxpRVXpLI6pKb2lEVektjagqXYgRVaUL0YWqdtl/9W7tZ1XvOtFX0KETnQIdOuH9VehkcPM6dMKf69AJx92HTvvR2zeZlgOd8NA6dPLopEIn/JMKnSz1Xh867d/3tu4vkdx1ot7rQie37p+nT5tF7zpR7+nQiXpPh04enVToxNMqHTrx/EmHTvgnHTrx/EmHTjx/6kIn77bvR1ifXGF08Nse4CE8eusuHM0yrRuSlPKnsb/1d/Q55taf/snc+tOXGVv//DipYzG5MHg1bntsu5rkC6NDcMsehzMHyUUzieQ6Lbk8yUVynZVctO1IrtOSi14jyXVactEgJblOSy66uiTXaclFK5rkOiu5PH1ukuu05KKJTnKdllx06Emu05KLDj3JdVpyeZKL5DoruejQk1ynJRcdepLrtOSiQ09ynZZcdOhJrtOSiw49yVWZXNHtWRJvRL4m10qHnuQ6Lbno0JNcpyWXJ7lIrtrkSuueXE+4H8lFK4Lkqk0ub/c71y3+g+SioCe5zkquwINrkqs2udK6AYkpHCUXD65Jroc2ft9udvVmOUgXT7qQLu+nCw+XSZcfpAsejXR50ma39GtaDh6jBB4Aky4/SBce6ZIuT9qEZU8XW/JRxi12V8ctf3FSR8Af0t/+DqY0fl13hmYNy8HiGHFqpO916bvP8lf6lqIxPq178D7Fg/57ootF+lanr7H7izuzHtwdE3dH0uvE9PKkF+l1XnrRJyO9Tkwv+mqk1wtt4kG60FcjXX6QLvTVSJcfpAvflSJd3k+XzM8ZSJcfpAs/UCBdfpAudKVJlx+kC30a0uWhTd7PBFlzWg/Shb4L6fKDdKHvQrr8IF3ou5Aujxde9q+/BWOOahf6LqTL2+myLvRdSJcfpAt9F9LlB+lC34V0+UG68O0+0uUH6eJJF9Ll/XShq0u6vJ8uhtqFdHm8sPFxT5eDHTZWQ+1CuvwgXTzpQrq8ny7ULqTLD9KFJ9Kkyw/ShSfSpMsP0oUn0qTLU7rso4P9y8/Svo5O1m9Zkmywj6DTR27x+JrcOim3LM+6ya2zcosH4+TWWblFJ5rcOiu3aFuTW2fllie3yK263DJh3TfAv/39lF17G8LSEye9Tkwveuik14npRc+d9DoxvejRk1716RXNI73SQXo52l2kV3V6heT39IrLwXcvHR0v0qs6vaJ9LI7Rh4P0oulFep2YXp70Ir3OSy/6XqTXielF34v0OjG96HuRXiemF30v0uvE9OLrqaRXfXql8EivJ+B7enm+oUp6nZhedO1JrxPTi6496VWdXmnZT8YNyZiD9KJrT3qdmF6e9CK9zksvuvakV33t9fSFnGRsaXzFsfR742Ndcz5IX54KkL6K05enDqSv4vTlqQbpqzh9eWpC+upN35WnMqSv4vTlqQ/pqzh9eapE+ipOX55akb4dp+/+2GINy3KQvp70JX0vS999lr/StxSN8ekhkP/r69/Tl84D6dtv+q7pkb7x4BtVgc4D6as4fek8kL6K05fOA+mrOH35xhnpW5++69O3/cNRevGNMNLrxPTiG1uk14npxTeqSK8T04u+I+l1XnpF+oKk14npRd+O9DoxveirkV4nphffuCG9qtMr7bxvf68He1NHT3qRXuelF1170uvE9KJrT3qdmF507UmvE9OLtirpVZ1e+fHl+JCD/5peibYq6XVietGYIL3q0ys8Fscc80F68Uib9KpNr2jNfibb7e/1a3plHgqRXvXptbpHeqWDHxpmHgqRXo8Xtmvc0yvFPxh9Ty4qL5LrtOTyJBfJVZdcJoXHzz5ufx+4xswDIdLrxPTigRDpdWJ68UCI9Doxveh5kV4nphfPG0mv09IrLDxvJL1OTC869qTXielFx570OjG96NmTXtXpFc1D+Liag/TypBfpdV560bUnvU5ML7r2pNeJ6UXXnvQ6Mb3o2pNeJ6YXXXvS67z0MnTtSa8T04uuPel1Ynp50ov0qk2vtOzHnaVkloP0wjmSXtXplZ/uXtkd3b1wjielV/R+Ty//efSdPKaqEXmL32hFnlK8FXm+W9KKPF+7aEXeQ/4k8vFROkdzQJ6H9a3I8xy7FXmMeivyeNhW5PGwjcg76vmzyOdHVZnDAXlqm5PIJ791Qm1a3QF5aptW5Kltjsnf6VB/fEeHGuEbOp5e9Hd06Bd/R4ca8Ds6M/dds92/VmBzjoX1PyyPrSefKt60fpD0kBQiObN3kCU5sxeQJTlzbS9LcmYfIEpynbnu+yHJ/SFoePp26oMka/fbJMPjS3vpgOTEa7dzcWNjnF9tgaS5BbNvRmFSfHytNRx2XBe7d1ytfRp75z7xSt+U+8R1QVPuE1cRgtzvLCfuPUqzDBN3KsVZTlzfirOcuAsqznLinqk4Sw/L91nuv8UyJi/m2/opm7hFns3Tb6A27vi0NtzxaW24U+M24R6pO07ibnd/nK1NX7hTo7Th7uHehDv1zDH3Ox2qju/o0MP9jg6d1u/oUFd+QyfRDf2Ozsz9zdU86KxPfaEHnZmdQ5nOzPV9mY6Hzjd0Zq6Vy3RmrpXLdGaulct0Zq6Vy3RmrpWLdPLMtXKZDrXyd3Solb+jM3OtfLuv7HSi+Uzn4NVt3r5y7px5HI/20WXNHpJCJGeuwWVJzlyv/5DkbfxO8tOz2q9jvdmpe2u+PNfNM/uAdtRn9hefqNujdX5mf3FzV090vu7IE2c+9dtFZx50VvNHK06c+YBrYZIz+xZZkjN7nB+SFFuP4+Kh3oD6zN7pE/VgDtb5qf3Q45iQGx17QGdi3+KXuMftjf+z3QfizKdpCpOc2LfIkpz5jERhkhN7HGGSE3scYZIT130/Jfntfjdx5vPMfkry2/1u4sznk3nn9o6sd3/ZBfzreBvj9uq3P//6C44483ljwiRnXrtlSc68dv+MpInB7fOMwX9lOXGHUpylh6UYy5mrSmmWE/cexVlSWb7PMj52mbn9nf/KcuZzgH7OMqYHyxS+sJx5HfcPNn61/hPLO52ZV+YynZnX2jKdmVfPMp2Zn9yV6czc0SvTmbmWKtKZ+XSlN+jM3E0r05m5sg5+/86tD8mVKutvx99pzlxby9P00BSkOXPt/jOaNxBb4NYtT08YU/5gOXOlL81yZl8gzXJmFyHNcmbP8Qcsjf3Kcp3ZoUiznNnPSLPE/bzN0u1W0rq8fmJ5MPrb039uT3vg3oS7h3sT7ngvCe53lngvOZZ4LzmWeC85lngvMZYzn2gnzhLv9TbL1W/TtOvz75x3lngvOZb4KTmWHpZiLKkvxVhG1vF3Wd76+XZ/9efRO0vWcTmWQ63jzu8sb7evwugctjmaZXk0fewN0x3NUMuyLJqhVllZNEM1C3+E5mkXxF9fNn+6NZkPNkM1/4TZDFVsCbMZqjknzGaoZpssm7EOQBNmM1QRLcxm3qK4zGbeqrjMxsPmJRvq4tdsqItfs6Eufs2Guvg1G+ril2zGOuxMmA118Ws21MWv2VAXv2bjYfOSDXXxazbUxa/ZUBe/ZjNvXewXs+3F5Y33B2zmrYtLbNJYh3QJs5m3LvYm5p1NXj6xOXjtb4+KSmMdutWQ47z1tixHD8f3OIodoZXGOkJLCfN5vYS3bl/b7dM268fMfcrba/tsbWH0GreXXvMTvvQBfV6T0hD6xO6nHfSJbVUz6GMdOKYF+sRG8GfQ8/qAHvJXSz3W2WRNSU5sBn9IMu+f7cUetHmMh+S7JO1O0qcDkhObvJ+S3MNe1nBAEusmRRI/JkVyYpPl9t2SvPsLm5+NvpOc2DnJkhzrDMemJCf2OD8iaXzcfw65muffFx/F/f0Jw2ms8x7VUJ/YOzWk7qHegPrEnqwh9Yn9W0Pq1NWnUPfb4LCar9THOuuyH+phe+kQ0gF1apg3qa9mn+Tq/Cfqd5IekkIkqTWkSFI/SJGcuP/7w9VpD/tGci2sTrdgk38Enr98+Wys80EVcacGbsJ9rDNNFXGnb92G+1iuL22jnbfrp9H32Q5V2ab9u0UuL/5gtiOt3d7so73J4etshzqf7PYh35/5R7MczHakz215tiN1Scqz9SPNNj6+vZKWpTA67XO8VcD72F9b1H4dm/ebfc6fx94pjnSvb0dxpA5GO4ojdS/aURyqnmlGcaTOQjOKQ51u1Y7iUDV7M4pDeYFmFIfyGM0oeigKUMS7SFDEu0hQxLtIUMS7vEXx+zOKUsC8SGAc6ky/hhixLyIY8S8iGDEwIhiHqr1LT02HOtiuPNuhatnibIeqOe2y76RifTqY7VClYWm2Qx0QV57tUIVWcbZD1UPF2Q5VthRn60earVu3sL1/qqWOR4ew/+ovPQo6az92LhjqmDVZMkPVaKJkhqrnvvle2IGN2fdFNCY/vfS6oRmq+BNFM9YhYqVvAY91LFhxtkN9n70426F+PZz33wC6HEqjTdxWBru4QstH8DnOWAeCqSA+1G82VBAf6lfLfRAvNJ3HOhNNB/KhftmsA/lQP2rWgDyPdTCcDuRDGS4dyIdyfXnfX8obX2p22Oi2X4/b+Hws1RIPoa9bIyUt0X8afSc5lqNsSdJDUojkWA7wRJJm3+IvWRMOSI7l7FqSHMuwtSQ5lg9rSXIse9WQ5FjHszUlOZYZakkSjyNFEo8jRdJDUogkHkeKJB5HiiQeR4okHkeKJB5HiORYZ641JYnHkSKJx5EiiceRIukhKUQSjyNFEo8jRRKP8ybJsE8yxWQPSOJxpEjicYRIOjzOmyRz2CJJOZkDkngcKZJ4HCmSeBwpkh6SQiTxOFIk8ThSJPE4UiTxOFIk8ThCJMc6sbApSTyOFEk8znsk82KXj9F5eT7NcSeJx5Ei6SEpRBKPI0USjyNFEo8jRRKPI0USjyNEcsXjSJHE47xLMuaN5O/X+0ISjyNFEo8jRdJDUogkHkeKJB5HiiQeR4okHkeKJB5HiORQJ0q3JTmvx3GPM4GcTaFA0sRHJDH457DvIOe1OMIg53U4wiA9IGVAzutvhEHOa2+EQc7rboRBzmtuhEHO621+CDLnbbRdlkLYYVm2RxRhMV+pD3U2dTfU17ybpmPqeKZ3qe9n8tjF2e/D9k+nAT79PO1XSAd3o2wet6NsH2HbnD5Ewo8pEAmvp0Akj0j9i4RHVSAS/leBSHhrBSLh2xWIRE+gf5ESLQQFItFxUCASHQcFItFxUCCSR6T+RaLjoEAkOg4KRKLjoEAkOg4KRKLj0L9ImY6DApHoOCgQiY6DApHoOCgQySNS/yLRcVAgEh0HBSLRcVAgEh0HBSLRcehdJL8sdBwUiETHQYFIdBwUiETHQYFIHpH6F4mOgwKR6DgoEImOgwKR6DgoEImOQ/8iGToOCkSi46BAJDoOCkSi46BAJI9I/YtEx0GBSHQcFIhEx0GBSHQcFIhEx6F/kSwdBwUi0XFQIBIdBwUi0XFQIJJHpP5FouOgQCQ6DgpEouOgQCQ6DgpEouPQv0iOjoMCkeg4nCGS245l8TF9EukOnQ5CA+h0BN6Dbs0+SWueIrkfb3MD6QEpAxJnLQQS9ysEEof6LkjndpA5C5ZsLqdtit6YfbTblzH8afcS4U57l8jjTbuXCGfavUT42O4lwvV2L5FHot4lwqmfIdH3DTuPq28AfSh76dKO0dv10+j7bIdyaqXZrkOZnuJsh/IP3j1mG0NhtInbcnZ7arKPtckdjE07j+RyYWzekef8eeyd+FB2QAXxoap7FcQ9xKWJh22sWRZ7gHyo4lsH8qFKbx3Ih3r0pgP5UF5HB/KhDJcK5GEo1/cN8vtsZ3F999nO4rjusx3L7aStQe2SN6Wbh037p9w5/xhtlsPXtutO0odPo+8kPSSFSI5lTlqSHMtznEhy3b/U79a0HJAcy0q0JDmWQ2hJcqzCvyHJOFY935LkWF6hJcmxfEhLkngcKZIekkIk8ThSJPE4UiTxOFIk8ThSJPE4QiQTHkeKJB5HiiQeR4okHkeKpIekEEk8jhRJPI4USTyOFEk8zpsks9t/NrfkdEASjyNEMuNxpEjicd4j6e2DpF3tAUk8jhRJPI4USQ9JIZJ4HCmSeBwpkngcKZJ4HCmSeBwZkmbB47xLMuaNpPsLyZ+NvnPHEbXhjn9qwx23dQZ34/dNi8xqnuJOR7MMy/YDx2Cfft+R1g+NPBp1rxEOsX+N8J79a4Sr7V8j/HL3Ghl8TAca+W1wWM2BRh6N2msU7KZRSAcaUdedotFqdiTr82un8MGdWq0Nd+qvNtypqdpw54nFOWvwPskb97WwBt+m9ggl2xz38R8qWZ6GaFAJz6FBJZ60aFCJ5zIaVPLzquQeJMPTtpwvuH8z+k5yYp8tTHJi5yxMcmIv/COS1i7b0TjWu4NvGdiJ3a0wyYn9qixJN7GnFCY5se8TJjmxNxMmObF/EibpISlEEo8jRRKPI0USjyNFEo8jRRKPI0TS43GkSOJxpEjicaRI4nGkSHpICpHE40iRxOO8SXK122i7Hv3G0eNx3iTpXd5JhqUwWu5saOPxTr0rhCfrXKEVr9e7QnjI3hXCm/auEJ63d4U8CnWuEB69d4Xw/r0rRE+hd4XoKfSuED2FzhUK9BR6V4ieQnOFwv4bsWWxBxLRVOheIroK3Uvkkah3iegrdC8RjYXuJcIVvSnRGuIuUS7vBJQXt734mp/2hfv4LX/UWwPc49e7QN7j73z1yG5Pn+x94aVtDFsgNkb3/NL3yXZ+H5adbOe9UtnJdt52lJ1s52uV6GRT580w2cl23leSnWznHRrZyXZe5/xwsnnbvtcm479O1s802bEqqMJkR6qgnF3yI+z4dbIjVVDFyY5UQRUnO1IFVZps7wd3/3Syy7eTHWmdvTVmtpd23i5fJzvSOluc7EjrbHGyQ62zpckOtc66nPbJmuX7l17zvo3qmvPB3WyoRfknZMKy3+fDclCI9n7m7SU5c0TG9n6G7Q9vHfsDIeefTvOp+TTZ3k+ZvYTMcc6M1IpxPoadTE5fJztWiViYrJ9psmOViIXJjlUiPia7Pj2f3yc7VIlYmuxQVV9pskMVcoXJmqFqM2f3b5msJhZeOqStnjfRP31txC8faIYqQWLaHW/M7s/KVjNUvfITMgUTaHs/yvOSnDkmM1Ql9Hhp95eHUgcvveT9pY1bDm40Q9VNye5hp1x4ab9s92tvP9+BD8J4tCTMrX23j3Y7xqEqsnYYh6r12mEcqopshrH3Ex+1YByq0dgO41CWoB3GofzDjzC6zT74mL5Wgr2fI9gODL9X+vXaV/8YxnL0XSPubFrShjs/ujuJu/MP7k+bM4cXo+3T6PBXlTiyT4VKbEmiQSV2JWmv0q/v1e32ysQvGrEtSf8aeTTqXiM2JulfI5x+/xrRFehfIzoI/WtEt6F7jTg6U4FGdBr614g+Q/8a0WfoXyOPRidp9KpPevDaye3fqjchlF4777O8Cfo0y1sm3DWlLzGepvQx+tb0rhKdDA0q0cu4WqXf3Gc+qNKmvWRzzhdIerv/+MW7tcjdx0c5+PQdFJMOf3Lkt8Hh6Uf1t7l/aDSxr+pHo7jxCzddvmo0sa9So5FHo+41mtgnqdFoYt/TkUZm1ygcaDSx61Gj0cSeR41GEz+/7UejsHnYENJXjWY+ulKNRvQZ+teIPkP/GtFn6F8jj0bda0SfoX+N6DP0r9FQ/sj5XSMXQ2G0d4t9UH9+pmn+nPr3T4TiUI6nH+rf9z3jUB5GDfWhXIka6kP5DDXUPdRPof5tj7f344gHpT5Uda+G+lDPBfuh/r1L6v2k6EGp400bUO/97OxBqeNNW1DHm7agjjdtQd1DvQH1oer1xe3Ul1wKxPjgt8cat7/T8y9j7MF4u6btV7W3P5+g3P6+sxyqCm/Mcqjaui3L3s9KV8VyqDq4McuhqtvGLIeqWc9lGfetNG4PRJYDlh6WYiyHevbRmOVQTzQas8T3SLF0C/Xl2yxD3gK//ekOWLKOv80ypW34zeKsByxZx99leWtAPV7d5gOWrONyLFnH5Viyjr/PMtr91dPntedno+/k6Xa2Ik9v9BzyIa371+LT0458972sboDh3oQ7Pdc23OnPnsQ971BCtvELdzxgG+4e7k244y3bcMeHtuGOZ23DHcfahjt+9Szuj59x5/ULd4tfbcMdv9qGO361DXf8ahvuHu5NuONXJbjfWVKTv8uy+N0RS50txtJRO8uxpB5+m+Wn79r5A5bUuHIsqVvlWHpYirGkvnyfpX2wdKW6/lYhbb+iuS1K/q91veN5SBvuPA9pwx3vdRJ3F/LOPT33D34y9q4Rnq57jTxesX+N8KDtNfr+XHrn8bb9a4Rn7l8jj0YCGt1Z4sXfZ/k4OTzGdMASf/0+y7T31GPOByzxzFV5ecgSHyzHEr8qxnKlHn6bZVq3ad7+PGJJ3SrH0sNSjCX1pRxL6sv3WXr7PUvW8fdZFvahGev86MYs6ePKsaS+lGPpYSnGcubehnPLztLlUGBpYlzdNv729wPLRy84zNzbkGY5c00kzHKsE2bPZhnTg+XTqWsby5lrImmWM9dE0ixn7rlJs/SwFGM5c89NmuXMPTdplvgeOZb4HjGWY539+EOWy36iuvHGxwLL8Pjh+GqeOhvrB8mZq8sfkvz2JHs31hmNTUl6SAqRnLmulCU5c1X5U5JmJxkOSM5cU8qSnLmilCU5cx/9hyS/Pb3XTX2ypyxJPI4USTzOvwiRxONIkfSQFCKJx5EiiceRIonHkSHpZz7J07l9q0rj/GoLJI1Jae+ym7w8n57zdXQ2cYs8my+7E/hl4uqzKfeJa9VzuVuzQcnWfuU+cWXblLuHexPuE1fNTblPXGOfzN2ZnbvLX7hPXJE35T7xM4qm3Cd+otGS+8wn8jbljl9twx2/ehb3xT7qyPSFO361DXcP9ybc8attuONX23DHr7bhjl9twx2/2oT7zCfyNuWOX23D3c/L3Wa774pjc/6zX475mc8c/SnJb39b4u3ENbYwyYmrZmGSE9fBwiQnrmx/TPK7X+n4mU/AFSY5cfUpTHLi5x8/Jfn9N31nPvtWmKSHpBBJPI4USTyOFEk8jhRJPI4USTyOEMmZT5y0YTE7yfgc+CHJ20uaHUpYC6NtzI9z9f6yA9md/Mz156nkk93a9za5dEDeQ74R+Znr27bkZ66HzyW/7GfYJRMPyM9cP7clP3O93Zb8zPV5U/LrzM8s2pKf+RlHW/J42Fbk8bCtyHvINyKPh21FHg97Fvn4OAs3HnQPVjxsK/J42Fbk8bCNyM98WvTJ5PfIb+TzAXk8bCvyeNhW5PGwZ5H3aSe/ugPyHvKNyONhW5HHw7Yij4dtRR4P24o8HrYR+YiHbUWeev4k8mHfFuH22rk02ju3jfbJFUYH//iW8qPz78LRLHPaz+pdnsI4HhzsugEMNpVe+tfOD/uXq1Myy6fx9/TypBfpVZ1e/iH8893rkV44M9LrxPTCfpJeJ6YXHpv0kkmvYA/Si0YC6fUH6eUf6RXX0qvnnXfIz99GSgeDk91fO9mnzL0NvicufRgSV2PiJtpYJK7KxOWbLCSuysTli0AkrsrE5bkLiasycT2JS+JqTFyeFZG4KhOXp1AkbnXiZrsDvP0dPo2/pxfdVtKr/r6YH98AysvBN4AyDp30qr97mYfw2ZmD9KKqI71OvHtRe5FeMrWXO0ovvgFEep2YXnwDiPQ6Mb1wjqTXaem1LnybhvSqTy/3aNhm7w/Si++8kF4nphd9L9LrxPTi+yOk14np5Ukv0uu89KJrT3qdmF507Umv+vQqPHNcF7r2pNeJ6UXXnvQ6Mb3o2pNe56WXoWtPep2YXnTtSa8T04uuPel1YnrRtSe9TkwvT3qRXuelF30v0uvxwmYffcu0pZRe0br9xeNtCgfpRd+L9Doxveh7kV716RXcI71i/ppelr4X6XVietH3Ir1OTC/6XqTXielF34v0qk4vt+zqxFuiHKSXJ71Ir/PSi2+rkl4nphffViW96tPLP6XXuh6kF1170uvE9KJrT3qdmF507Umv89LL0bUnvU5ML7r2pNeJ6UXXnvQ6Mb3o2pNe9enlntMrHKSXJ71Ir/PSi6496XVietG1J73q02uf46+/80F60bUnvU5ML7r2pNeJ6UXXnvQ6L708XXvS68T0omtPep2YXnTtSa8T04uuPelVn17xKb3ywakc3pNepNd56UXXnvQ6Mb3o2pNe1enlzb7xePT2YI8JT9ee9Doxvejak14nphdde9LrvPRa6dqTXiemF1170uvE9KJrT3qdmF507Umv+vRantPr4ES01ZNepNd56UXXnvQ6Mb3o2pNe1ell02N3Qu/W0njvzD7eH27YtNLlJx2vS0e3PtJxNcXxad2D9ymmg/TlKQLpe136rv6RvuHI+fLUgXRsczc9SsfAUwrSsaN05KkG6dhROvIUhHTsKB15akI6XpeOMTzSMds/d+LBk76k72Xpmx9301vL/SAdeYpDOja5mx6nI099SMeO0pGnPqRjR+nIUxzSsaN05CkO6XhZOnoTH+no3J878chTH9L3uvR1T3dTf7DzeuSpD+nY5m56mI489SEdO0pHnvqQjh2loycdScd+0pGnOKTjKel4Ty+eypBeJ6YXT1lIrxPTi6cmpFd9eq2P9LLpYHvJyFMQ0uu89Eo8pSC9TkwvnjqQXiemF08RSK8T04unAqTXienlSS/S67z0omtPep2YXnTtSa8T04u+F+lVm14hh/2Rdsgxf02vTN+L9Kq+ey0P4W9/h4P0ou9Fep2YXvS9SK8T04u+F+lVX3vl5Sm97EF6edKL9Dovveh7kV4nphd9L9LrxPTi26qk14npxbdVSa8T04uuPel1WnqFha496XVietG1J71OTC9PepFeuzbG5U0bk3xhdPRhe+3bn/kgueh6kVynJRc9L5LrtOSi40Vy1SZXMJvuMdh4kFz0u0iu05KLbhfJdVZyGXpdJNdpyUWni+Q6Lbk8yUVyVSbXmrYsiWs+aKIa3CLJVZtcMW9Bx+TMQXLhFkmu05ILt0hynZVcFrdIcp2WXLhFkuu05OK3jCRXbXKl1ezJdXCae7D8kpHkOi25PMlFcp2VXHyfi+Q6Lbn4PhfJdVpy0aEnuU5LLjr0JNdpyUWHnuQ6K7kcHXqS67Tkos9FctUm1/P3uY469M6TXCTXWclFn4vkOi256HORXKclF30ukqs6ucL+rYgQ09fk8nwrguSqTa6484vR+IPkwi2SXKcllye5SK6zkgu3SHJV11w5PpJrPUgu3CLJdVpy4RZJrrOSa+XZIslVXXPtRzHe/jyouVZ+/UNyVSfX069/jCuMNj6teyg+HfXFVvpiJGNtMiYT9mQ86uiv9MVILok73WFyeZKL5DorueiLkVynJRd9MZLrtOSiL0ZynZZc/FqI5DoruQJ9sS6Sy/oNobVx+TT6rhMtoy50cnZ7beu8O9CJ7osOnTw6qdCJnkAf61N66PSXSO46Ya916IRT1aETpk+HTuy2oEKnyJeLdOhEP0KHTvQjdOhEP0KHTjP7p2V96HSbcZHlkvZeqX3qlab0wXJmjyPNcmYfIs1yZq/wU5Z+f9hmV/eJ5UEsNm/knXv6xV24c08z1/4tuc9cy5/K/fb4duee4hP3n4y9azRzHa9Fo5lreC0aeTRqrpE3+3rkrfmq0czPErVohA/uXyP89dsaucf3ulxcChqtcRN0zU8AP+xjwoo3wY5rb4E9Y9qbYMezN8GODX8bu388SvHPr36I/XYf2Ubfcjs+g/86OFm/8U422K8qYcQ1qORRSYFKmHENKmHHNaiEIdegEv5dg0rY/f5Vigt+6W2VVru3iVe7flLpzpJK7H2Wfv/S37ouByy5x7/Pch9u15AOWHInFmNp6KbKsaRFKnG/rLi7Glb9VuTpfJ5DPqR1Q3h7rv7YoCV8cPdwb8KdmrgNd/qNJ3HPO5Tbw8b4hTsdxDbc8YttuOMtm3C3+NA23PGsbbjjWNtwx6+exX1/MBPy+pW7h3sT7vjVNtzxq22441fbcMevtuGOX5Xg/pulm7gmN7cVa3txk5fSLvbGxw2KWc3zTwyPIg+PFF7N09j1g/vENfm53ONuhdJ6wN3DvQn3iWvyptwnrsmbcp+4Jj+Z+/7F2V///xfuE9fkTblPXJO35O4nfoZ0LvfwOLMqHXCf+BlSU+741Tbc8attuHu4N+GOX23DHb/ahjt+tQn3daT63ebHtnqLWUrcJfvp60j1+Kkcv+9brSPV1y05jlQvt+To4SjCcaR69lyO3/bb1pHq05YcR6o3W3Ic6XnHqRwLdfhIzy8acgz4GRmO+BkZjvgZGY74GRmOHo4iHPEzIhzjIUcT98P7ntqhNrmDN0g78uRyYWxOG5WcP4+9BxN6Cib2FEzqKZjcUTDH5xm2Csb0FIztKRjXUzC+p2B6ugOnnu7A6do7cNhX1WWxB9GkrqLJPUWTl66iMV1FY7uK5vhu43PeS8rVfl/bpmX71Cb/VGL75eMdwunvEE9/h3T6O+ST3yEty+nvYP78HdbNgaUYPr3DgUta8mZlrFkeo/3RlzRS2vZ5zsaWXtjlbZ7WL4+HZ26fqJ1lom6WifpZJlq+38dPE71fFaquijVXGXP2fcrY09/Bnf4O/vR3WE9/h3D6O8RJPtYmzTLRPMlE7TLLRE3NKmFt1VWu5qoXezPY/Rxo58xj443tIl9z0Vpz0fFXkH5wpPXrsfc3iGe/QTr7DfKfvsH3p36nFz+7FHwDc/YbHGpgb489tk/v7aHDl4tyxUXHX3EvXfTiLvGTR1+3ER+D1+dngR+PvtJqz38Ld/5b+PPfYhV9C78cvEU4/y3i+W+Rzn+L/OdvEZbtxhDs168UprCc/xbm/Lew57+FO/8t/PlvsZ7/FuH8t4jnv0U6/y3O/3TH8z/d8fxPdzz/0x3P/3TH8z/d8fxPd5T4XHz7676UJDLq2y9CpRfflljN/hWx1flPb3G/zNVd5usuW+sue3H/3b/QdrtsLeAz2aaddrb5i6F48bRe+E3SFW+SL3iTF4/Mhd/Enf7RzBL3sG9/u5byev5bhPPfIp7/Fun8t8hnv0VelvPfQmI9+faHWXmx57+FO/8t/NkLb17W898inP8W8fy3SOe/RT79Lcxy/luY89/Cnv8Wh0m7rlvXdE3PlZ79uCjWXJRqLjpOlSXus/r1d/5LRZJfPOZaYt5L2OX2oPjLZabuMlt3mau77PhmudweKD0ue9qEfbtsrbss1F0Wqy5zL3TLj+3olxzMl8tekMxp25bemGX5QtL5usvWusti3dxS3WUvPjg5u6cg179e5pe6y0zdZbbuMld3ma+7bK277PiDcxuaH5fZ5yz5+89z6ng/Lek3SVe8Sf7zN/n+WWQ+fkIo+xbm/LewP32L+2Wu7jJfd1ndLfLF87niZbHuslR3Wa66LCx1l5m6y2zdZXULaahbSF886ojrfmON8flnqkefFhuX/RtG0dovb5FPf4sXjzpE38Kc/xb2/Ldw57+FP/8t1vPfIpz/FvH8tzj/0x3P/3Sn8z/d6fxPdzr/053O/3Sn8z/d6fxPdzr/053O/3SnH3+675flqsvyUneZqbvM1l3m6i7zdZetdZeFusti3WV1WZJrsmRdlqXuMlN3ma27zNVd5usuW+suC3WXxbrLUt1ldVli6rLE1GWJqcsSU5clpi5LTF2WmLosMXVZYuqyxNRlia3LEluXJbYuS2xdlti6LLF1WWLrssTWZYmtyxJblyWuLktcXZa4uixxdVni6rLE1WWJq8sSV5clri5LXF2W+Los8XVZ4uuyxNdlia/LEl+XJb4uS3xdlvi6LPF1WbLWZclalyVrXZasdVmy1mXJWpcla12WrHVZstZlyVqXJaEuS0JdloS6LAl1WRLqsiTUZUmoy5JQlyWhLktCXZbEuiyJdVkS67Ik1mVJrMuSWJclsS5LYl2WxLosiXVZkuqyJNVlSarLklSXJakuS1JdlqS6LEl1WZLqsiTVZUmuy5JclyW5LktyXZbkuizJdVmS67Ik12VJrsuSut6rqeu9mrreq6nrvZq63qup672aut6rqeu9mrreq6nrvZq63qup672aut6rqeu9mrreq6nrvZq63qup672aut6rqeu9mrreq6nrvZq63qup672aut6rqeu9mrreq6nrvZq63qup672aut6rqeu9mrreq6nrvZq63qup672aut6rqeu9mrreq6nrvZq63qup672aut6rqeu9mrreq6nrvZq63qup672aut6rqeu9mrreq6nrvZq63qup672aut6rqeu9mrreq6nrvZq63qup672aut6rqeu9mrreq6nrvZq63qup672aut6rqeu9mrreq6nrvZq63qup672aut6rqeu9mrreq6nrvZoXvde8f8PQZG8OLnuRJfuWfiZn++myo618hQ4KuYUT+won9RVO7iqcV73tVuGYvsKxfYXj+grH9xXO2lc4fd2VU1935dTXXTn1dVfOfd2Vc1935dzXXTn3dVfOV9+Vvz3j6hbP2lk8obN4YmfxpM7iyV3FY4+f4Npb6fpxmbVmLcRzc+jLHn6If9294PYm5oo3sVe8iRN5ExcebxLc05sc/CIvuW1jILc87/u0HG+nuux7ri3u8dv7bD/i953Hv+78w+rc1/hX5fEH5fFH5fEn5fFn3fGbRXn8Rnn8Vnn8va+/pfiVr79G+fprlK+/Rvn6a5Svv0b5+muVr79W+fprla+/Vvn6a5Wvv1b5+muVr79W+fprla+/Vvn665Svv075+uuUr79O+frrlK+/Tvn665Svv075+uuUr79O+frrla+/Xvn665Wvv175+uuVr79e+frrla+/Xvn665Wvv175+rsqX39X5evvqnz9XZWvv6vy9XdVvv6uytffVfn6uypff1fl629Qvv4G5etvUL7+BuXrb1C+/gbl629Qvv4G5etvUL7+BuXrb1S+/kbl629Uvv5G5etvVL7+RuXrb1S+/kbl629Uvv5G5etvUr7+JuXrb1K+/ibl629Svv4m5etvUr7+JuXrb1K+/ibl629Wvv5m5etvVr7+ZuXrb1a+/mbl629Wvv5m5etvVr7+Zt3rr1t0r79u0b3+ukX3+uu63/+qFL/u9dcp3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yinf/8op3//KKd//yivf/8or3//KK9//yivf/8ovutdfr3z/K9/9/lePlw4xm+f4jwZvUYcUHi+c1o+59r5WS86193Vdcq691wCCc+1+vy7JufZeW0jOtfM6ZM1reszVfj9XH/MWh08u7YNtTodhm7hH7fw+2rn8wabzGqcpGw+bl2w6r83i6u3H6BiW8D0b57axzj8FfTR0DesW8hqXp8G/6r+vMee8v/KypE+j7xg7LxG1YOy8+tSCsfPCVgvGzmtmJRh7375PC8bOK30tGDs3EVowdu43tGD0YJTAiIsRwYiLEcGIixHBiIsRwYiLkcDY+yaoWjDiYkQw4mJEMOJiRDB6MEpgxMWIYMTFiGDExYhgxMWIYMTFSGDsfStpLRhxMSIYcTEiGHExIhg9GCUw4mJEMOJiRDDiYkQw4mJEMOJiJDD2viG/Foy4GBGMuBgRjLgYEYwejBIYcTEiGHExIhhxMSIYcTEiGHExEhh7P9ZEC0ZcjAhGXIwIRlyMCEYPRgmMuBgRjLgYEYy4GBGMuBgRjLgYCYy9Hw6lBSMuRgQjLkYEIy5GBKMHowRGXIwIRlyMCEZcjAhGXIwIRlyMBMbej9jTghEXI4IRFyOCERcjgtGDUQIjLkYEIy5GBCMuRgQjLkYEIy5GAmPvB5VqwYiLEcGIixHBiIsRwejBKIERFyOCERcjghEXI4IRFyOCERcjgHHt/bhnLRhxMSIYcTEiGHExIhg9GCUw4mJEMOJiRDDiYkQw4mJEMOJiJDD2fgi9Foy4GBGMuBgRjLgYEYwejBIYcTEiGHExIhhxMSIYcTEiGHExEhgtLkYEIy5GBCMuRgQjLkYEowejBEZcjAhGXIwIRlyMCEZcjAhGXIwERoeLEcGIixHBiIsRwYiLEcHowSiBERcjghEXI4IRFyOCERcjghEXI4HR42JEMOJiRDDiYkQw4mJEMHowSmDExYhgxMWIYMTFiGDExYhgxMVIYFxxMSIYcTEi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","names":["constructor"],"brillig_names":["get_contract_instance_internal","decompose_hint","lte_hint","discover_new_messages","notify_created_nullifier_oracle_wrapper","directive_invert"]},{"name":"_compute_total_collateral_value","hash":"14514294466450756856","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"4270187767586857285":{"error_kind":"string","string":"Function _compute_total_collateral_value can only be called internally"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["_compute_total_collateral_value"],"brillig_names":["_compute_total_collateral_value"]},{"name":"add_asset","hash":"17719668913682295391","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"market_id","type":{"kind":"field"},"visibility":"private"},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"oracle","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"loan_to_value","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"is_borrowable","type":{"kind":"boolean"},"visibility":"private"},{"name":"optimal_utilization_rate","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"under_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"over_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"deposit_cap","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"","names":["add_asset"],"brillig_names":["add_asset"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"Lending::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::constructor_parameters","fields":[]}}]},{"kind":"struct","path":"Lending::_compute_collateral_debt_value_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_compute_collateral_debt_value_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":128}}]},{"kind":"struct","path":"Lending::_compute_total_collateral_value_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_compute_total_collateral_value_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":128}}]},{"kind":"struct","path":"Lending::_compute_borrow_rate_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_compute_borrow_rate_parameters","fields":[{"name":"asset","type":{"kind":"struct","path":"asset::Asset","fields":[{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"loan_to_value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"oracle","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_borrowable","type":{"kind":"boolean"}},{"name":"optimal_utilization_rate","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"under_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"over_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"deposit_cap","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"utilization_rate","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"precision","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":128}}]},{"kind":"struct","path":"Lending::withdraw_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::withdraw_public_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::_deposit_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_deposit_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::borrow_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::borrow_private_parameters","fields":[{"name":"secret","type":{"kind":"field"}},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::withdraw_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::withdraw_private_parameters","fields":[{"name":"secret","type":{"kind":"field"}},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::_borrow_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_borrow_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::borrow_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::borrow_public_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::repay_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::repay_public_parameters","fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"nonce","type":{"kind":"field"}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::compute_total_deposited_assets_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::compute_total_deposited_assets_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"deposit_accumulator","type":{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]}}]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":128}}]},{"kind":"struct","path":"Lending::_repay_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_repay_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::liquidate_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::liquidate_public_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"debt_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"user","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"debt_to_cover","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]},{"kind":"struct","path":"Lending::deposit_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::deposit_private_parameters","fields":[{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"nonce","type":{"kind":"field"}},{"name":"secret","type":{"kind":"field"}},{"name":"on_behalf_of","type":{"kind":"field"}},{"name":"market_id","type":{"kind":"field"}},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::_withdraw_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_withdraw_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"market_id","type":{"kind":"field"}},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::deposit_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::deposit_public_parameters","fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"nonce","type":{"kind":"field"}},{"name":"on_behalf_of","type":{"kind":"field"}},{"name":"market_id","type":{"kind":"field"}},{"name":"collateral_asset","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::repay_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::repay_private_parameters","fields":[{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"nonce","type":{"kind":"field"}},{"name":"secret","type":{"kind":"field"}},{"name":"on_behalf_of","type":{"kind":"field"}},{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"Lending::_compute_utilization_rate_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_compute_utilization_rate_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"precision","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"deposit_accumulator","type":{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]}},{"name":"borrow_accumulator","type":{"kind":"struct","path":"accumulator::Accumulator","fields":[{"name":"value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}}]}}]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":128}}]},{"kind":"struct","path":"Lending::add_asset_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::add_asset_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"oracle","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"loan_to_value","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"is_borrowable","type":{"kind":"boolean"}},{"name":"optimal_utilization_rate","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"under_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"over_optimal_slope","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"deposit_cap","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]},{"kind":"struct","path":"Lending::_liquidate_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::_liquidate_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"collateral_token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"debt_token","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"user","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"debt_to_liquidate_amount","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]},{"kind":"struct","path":"Lending::update_accumulators_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"Lending::update_accumulators_parameters","fields":[{"name":"market_id","type":{"kind":"field"}},{"name":"asset_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}]},"globals":{"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"kind":"string","value":"UintNote"},{"kind":"struct","fields":[{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"kind":"string","value":"UintNote"},{"kind":"struct","fields":[{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]}],"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"PriceFeed"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"assets","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}}]}}]},{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"Token"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"admin","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"minters","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"total_supply","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"public_balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"symbol","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"name","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}]}},{"name":"decimals","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000000000a"}}]}}]}}]},{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"Lending"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"market_assets","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"market_assets_list","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"market_assets_list_len","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"scaled_deposited_assets","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"scaled_borrowed_assets","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}]}},{"name":"scaled_total_deposited_assets","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"scaled_total_borrowed_assets","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}]}},{"name":"deposit_accumulators","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}]}},{"name":"borrow_accumulators","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}]}}]}}]}]}},"file_map":{"6":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"16":{"source":"use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: x_coordinates_match,\n        };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n","path":"std/embedded_curve_ops.nr"},"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"19":{"source":"// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"25":{"source":"//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n","path":"std/meta/expr.nr"},"42":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"43":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"46":{"source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n","path":"std/slice.nr"},"52":{"source":"use dep::aztec::hash::pedersen_hash;\nuse std::ops::{Add, Sub};\n\n// Utility used to easily get a \"id\" for a private user that sits in the same\n// \"space\" as the public users.\n// It help us to have a single mapping for collateral that have both public and private users.\npub fn compute_identifier(secret: Field, on_behalf_of: Field, self: Field) -> Field {\n    // EITHER secret OR on_behalf_of MUST be set. But not both\n    assert(!((secret == 0) as bool & (on_behalf_of == 0) as bool));\n    if (secret != 0) {\n        pedersen_hash([self, secret], 0)\n    } else {\n        on_behalf_of\n    }\n}\n\npub fn covered_by_collateral(\n    collateral_price: u128,\n    borrow_price: u128,\n    loan_to_value: u128,\n    collateral: u128,\n    increase: u128,\n    decrease: u128,\n) -> u128 {\n    let price_precision = 1000000000 as u128;\n    let ltv_precision = 10000 as u128;\n\n    let collateral = (collateral + increase) - decrease;\n\n    let collateral_value = (collateral * collateral_price) / price_precision;\n    let debt_covered = (collateral_value * loan_to_value * price_precision) / (borrow_price * ltv_precision);\n\n    debt_covered\n}\n\npub struct DebtReturn {\n    debt_value: u128,\n    static_debt: u128,\n}\n\nfn div_up(a: u128, b: u128) -> u128 {\n    let div = a / b;\n    if div * b < a {\n        div + (1 as u128)\n    } else {\n        div\n    }\n}\n\npub fn debt_updates(\n    interest_accumulator: u128,\n    static_debt: u128,\n    increase: u128,\n    decrease: u128,\n) -> DebtReturn {\n    assert(interest_accumulator > (0 as u128));\n    let accumulator_precision = 1000000000 as u128;\n\n    let current_debt_value = (static_debt * interest_accumulator) / accumulator_precision;\n    let new_debt_value = current_debt_value.add(increase).sub(decrease);\n\n    // static_debt_increase = amount / accumulator\n    // rounding up new debt.\n    let static_debt_increase = div_up(increase * accumulator_precision, interest_accumulator);\n    // rounding down repayment.\n    let static_debt_decrease = (decrease * accumulator_precision) / interest_accumulator;\n\n    // We need to allow repaying of the entire debt as well etc. This is very prone to failing\n    // if you try to repay exact due to time diff between sim and execution.\n    let new_static_debt = static_debt.add(static_debt_increase).sub(static_debt_decrease);\n\n    DebtReturn { debt_value: new_debt_value, static_debt: new_static_debt }\n}\n\npub fn debt_value(static_debt: u128, interest_accumulator: u128) -> u128 {\n    let accumulator_precision = 1000000000 as u128;\n    div_up(static_debt * interest_accumulator, accumulator_precision)\n}\n","path":"/home/jean/work/noir/comet/contracts/src/helpers.nr"},"53":{"source":"mod asset;\nmod position;\nmod helpers;\nmod accumulator;\n\nuse dep::aztec::macros::aztec;\n\n#[aztec]\npub contract Lending {\n    use dep::aztec::prelude::{AztecAddress, Map, PublicMutable};\n\n    use crate::asset::Asset;\n    use crate::helpers::{compute_identifier};\n    use crate::position::Position;\n    use dep::price_feed::PriceFeed;\n    use dep::token::Token;\n    use crate::accumulator::Accumulator;\n    use dep::aztec::macros::{\n        functions::{initializer, internal, private, public, view, utility},\n        storage::storage,\n    };\n    use dep::aztec::protocol_types::traits::{FromField, ToField};\n\n    #[storage]\n    struct Storage<Context> {\n        market_assets: Map<Field, Map<AztecAddress, PublicMutable<Asset, Context>, Context>, Context>,\n        market_assets_list: Map<Field, Map<u64, PublicMutable<AztecAddress, Context>, Context>, Context>,\n        market_assets_list_len: Map<Field, PublicMutable<u64, Context>, Context>,\n        scaled_deposited_assets: Map<Field, Map<AztecAddress, Map<AztecAddress, PublicMutable<u128, Context>, Context>, Context>, Context>,\n        scaled_borrowed_assets: Map<Field, Map<AztecAddress, Map<AztecAddress, PublicMutable<u128, Context>, Context>, Context>, Context>, // static debt\n        scaled_total_deposited_assets: Map<Field, Map<AztecAddress, PublicMutable<u128, Context>, Context>, Context>,\n        scaled_total_borrowed_assets: Map<Field, Map<AztecAddress, PublicMutable<u128, Context>, Context>, Context>, // static debt\n        deposit_accumulators: Map<Field, Map<AztecAddress, PublicMutable<Accumulator, Context>, Context>, Context>,\n        borrow_accumulators: Map<Field, Map<AztecAddress, PublicMutable<Accumulator, Context>, Context>, Context>,\n    }\n\n    #[private]\n    #[initializer]\n    fn constructor() {}\n\n    #[public]\n    fn liquidate_public(market_id: Field, collateral_asset: AztecAddress, debt_asset: AztecAddress, user: AztecAddress, debt_to_cover: u128) {\n        let _ = Lending::at(context.this_address())._liquidate(market_id, collateral_asset, debt_asset, user, debt_to_cover).call(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _liquidate(market_id: Field, collateral_token: AztecAddress, debt_token: AztecAddress, user: AztecAddress, debt_to_liquidate_amount: u128) {\n        Lending::at(context.this_address()).update_accumulators(market_id, collateral_token).call(&mut context);\n        Lending::at(context.this_address()).update_accumulators(market_id, debt_token).call(&mut context);\n\n        let scaled_borrowed_amount_loc = storage.scaled_borrowed_assets.at(market_id).at(debt_token).at(user);\n        let scaled_borrowed_amount: u128 = scaled_borrowed_amount_loc.read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(debt_token);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n        let borrowed_amount = (scaled_borrowed_amount * borrow_accumulator.value) / 1000000000 as u128;\n\n        assert(borrowed_amount >= debt_to_liquidate_amount, \"Insufficient borrowed amount\");\n\n        let total_collateral_value: u128 = Lending::at(context.this_address())._compute_total_collateral_value(market_id, user).call(&mut context);\n        let collateral_debt_value = Lending::at(context.this_address())._compute_collateral_debt_value(market_id, user).call(&mut context);\n\n        assert(collateral_debt_value > total_collateral_value, \"collateral >= debt\");\n\n        let debt_asset_loc = storage.market_assets.at(market_id).at(debt_token);\n        let debt_asset: Asset = debt_asset_loc.read();\n        let debt_asset_price = PriceFeed::at(debt_asset.oracle).get_price(0).view(&mut context).price;\n        let debt_to_liquidate_price = (debt_to_liquidate_amount * debt_asset_price) / 1000000000 as u128;\n\n        let collateral_asset_loc = storage.market_assets.at(market_id).at(collateral_token);\n        let collateral_asset: Asset = collateral_asset_loc.read();\n        let collateral_asset_price = PriceFeed::at(collateral_asset.oracle).get_price(0).view(&mut context).price;\n        let collateral_amount_to_liquidate = (debt_to_liquidate_price * 1000000000 as u128) / collateral_asset_price;\n\n        let collateral_deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(collateral_token);\n        let collateral_deposit_accumulator: Accumulator = collateral_deposit_accumulator_loc.read();\n        let scaled_collateral_deposit_amount_loc = storage.scaled_deposited_assets.at(market_id).at(collateral_token).at(user);\n        let scaled_collateral_deposit_amount: u128 = scaled_collateral_deposit_amount_loc.read();\n        let collateral_deposit_amount = (scaled_collateral_deposit_amount * collateral_deposit_accumulator.value) / 1000000000 as u128;\n\n        assert(collateral_deposit_amount >= collateral_amount_to_liquidate, \"Insufficient collateral\");\n\n        let scaled_collateral_amount_to_liquidate = (collateral_amount_to_liquidate * 1000000000 as u128) / collateral_deposit_accumulator.value;\n\n        let debt_borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(debt_token);\n        let debt_borrow_accumulator: Accumulator = debt_borrow_accumulator_loc.read();\n        let scaled_debt_amount_to_liquidate = (debt_to_liquidate_amount * 1000000000 as u128) / debt_borrow_accumulator.value;\n\n        let scaled_user_deposited_amount_loc = storage.scaled_deposited_assets.at(market_id).at(collateral_token).at(user);\n        let scaled_user_deposited_amount: u128 = scaled_user_deposited_amount_loc.read();\n        scaled_user_deposited_amount_loc.write(scaled_user_deposited_amount - scaled_collateral_amount_to_liquidate);\n\n        let scaled_total_deposited_asset_loc = storage.scaled_total_deposited_assets.at(market_id).at(collateral_token);\n        let scaled_total_deposited_asset: u128 = scaled_total_deposited_asset_loc.read();\n        scaled_total_deposited_asset_loc.write(scaled_total_deposited_asset - scaled_collateral_amount_to_liquidate);\n\n        let scaled_user_borrowed_amount_loc = storage.scaled_borrowed_assets.at(market_id).at(debt_token).at(user);\n        let scaled_user_borrowed_amount: u128 = scaled_user_borrowed_amount_loc.read();\n        scaled_user_borrowed_amount_loc.write(scaled_user_borrowed_amount - scaled_debt_amount_to_liquidate);\n\n        let scaled_total_borrowed_asset_loc = storage.scaled_total_borrowed_assets.at(market_id).at(debt_token);\n        let scaled_total_borrowed_asset: u128 = scaled_total_borrowed_asset_loc.read();\n        scaled_total_borrowed_asset_loc.write(scaled_total_borrowed_asset - scaled_debt_amount_to_liquidate);\n    }\n\n\n\n    #[private]\n    fn repay_private(\n        from: AztecAddress,\n        amount: u128,\n        nonce: Field,\n        secret: Field,\n        on_behalf_of: Field,\n        market_id: Field,\n        asset_address: AztecAddress,\n    ) {\n        let on_behalf_of =\n            compute_identifier(secret, on_behalf_of, context.msg_sender().to_field());\n        // docs:start:private_call\n        let _ = Token::at(asset_address).transfer_to_public(from, context.this_address(), amount, nonce).call(&mut context);\n        // docs:end:private_call\n        let _ = Lending::at(context.this_address())\n            ._repay(AztecAddress::from_field(on_behalf_of), amount, market_id, asset_address)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    fn repay_public(amount: u128, nonce: Field, owner: AztecAddress, market_id: Field, asset_address: AztecAddress) {\n        let _ = Token::at(asset_address).transfer_in_public(context.msg_sender(), context.this_address(), amount, nonce).call(&mut context);\n        let _ = Lending::at(context.this_address())._repay(owner, amount, market_id, asset_address).call(\n            &mut context,\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _repay(owner: AztecAddress, amount: u128, market_id: Field, asset_address: AztecAddress) {\n        let asset_loc = storage.market_assets.at(market_id).at(asset_address);\n        let asset: Asset = asset_loc.read();\n        assert(asset.asset_address == asset_address, \"Invalid asset or market id\");\n\n        Lending::at(context.this_address()).update_accumulators(market_id, asset_address).call(&mut context);\n\n        let scaled_user_borrowed_amount_loc = storage.scaled_borrowed_assets.at(market_id).at(asset_address).at(owner);\n        let scaled_user_borrowed_amount: u128 = scaled_user_borrowed_amount_loc.read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n        let scaled_amount = (amount * 1000000000 as u128) / borrow_accumulator.value;\n\n        assert(scaled_user_borrowed_amount >= scaled_amount, \"Insufficient balance\");\n        scaled_user_borrowed_amount_loc.write(scaled_user_borrowed_amount - scaled_amount);\n\n        let scaled_total_borrowed_asset_loc = storage.scaled_total_borrowed_assets.at(market_id).at(asset_address);\n        let scaled_total_borrowed_asset: u128 = scaled_total_borrowed_asset_loc.read();\n        scaled_total_borrowed_asset_loc.write(scaled_total_borrowed_asset - scaled_amount);\n    }\n\n     #[private]\n    fn borrow_private(secret: Field, to: AztecAddress, amount: u128, market_id: Field, asset_address: AztecAddress) {\n        let on_behalf_of = compute_identifier(secret, context.msg_sender().to_field(), context.msg_sender().to_field());\n        let _ = Lending::at(context.this_address())\n            ._borrow(AztecAddress::from_field(on_behalf_of), amount, market_id, asset_address)\n            .enqueue(&mut context);\n        // TODO: find a fix to transfer_to_private\n        let _ = Token::at(asset_address)\n        .transfer_in_public(context.this_address(), to, amount, 0)\n        .enqueue(&mut context);\n    }\n\n    #[public]\n    fn borrow_public(to: AztecAddress, amount: u128, market_id: Field, asset_address: AztecAddress) {\n        let _ = Lending::at(context.this_address())._borrow(context.msg_sender(), amount, market_id, asset_address).call(\n            &mut context,\n        );\n        let _ = Token::at(asset_address)\n        .transfer_in_public(context.this_address(), to, amount, 0)\n        .call(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _borrow(owner: AztecAddress, amount: u128, market_id: Field, asset_address: AztecAddress) {\n        let asset_loc = storage.market_assets.at(market_id).at(asset_address);\n        let asset: Asset = asset_loc.read();\n\n        assert(asset.is_borrowable, \"Asset is not borrowable\");\n\n        let total_collateral_value: u128 = Lending::at(context.this_address())._compute_total_collateral_value(market_id, owner).call(&mut context);\n        let collateral_debt_value = Lending::at(context.this_address())._compute_collateral_debt_value(market_id, owner).call(&mut context);\n\n        let borrow_price = PriceFeed::at(asset.oracle).get_price(0).view(&mut context).price;\n        let min_collateral_for_borrow = (amount * borrow_price * 10000 as u128) / (asset.loan_to_value * 1000000000 as u128);\n\n        assert(collateral_debt_value + min_collateral_for_borrow <= total_collateral_value, \"Insufficient collateral\");\n        \n        let scaled_user_borrowed_amount_loc = storage.scaled_borrowed_assets.at(market_id).at(asset_address).at(owner);\n        let scaled_user_borrowed_amount: u128 = scaled_user_borrowed_amount_loc.read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n        let scaled_amount = (amount * 1000000000 as u128) / borrow_accumulator.value;\n        scaled_user_borrowed_amount_loc.write(scaled_user_borrowed_amount + scaled_amount);\n\n        let scaled_total_borrowed_asset_loc = storage.scaled_total_borrowed_assets.at(market_id).at(asset_address);\n        let scaled_total_borrowed_asset: u128 = scaled_total_borrowed_asset_loc.read();\n        scaled_total_borrowed_asset_loc.write(scaled_total_borrowed_asset + scaled_amount);\n    }\n\n    #[private]\n    fn withdraw_private(secret: Field, to: AztecAddress, amount: u128, market_id: Field, collateral_asset: AztecAddress) {\n        let on_behalf_of = compute_identifier(secret, context.msg_sender().to_field(), context.msg_sender().to_field());\n        Lending::at(context.this_address())\n            ._withdraw(AztecAddress::from_field(on_behalf_of), to, amount, market_id, collateral_asset)\n            .enqueue(&mut context);\n        // TODO: find a fix to transfer_to_private\n        let _ = Token::at(collateral_asset)\n        .transfer_in_public(context.this_address(), to, amount, 0)\n        .enqueue(&mut context);\n    }\n\n    #[public]\n    fn withdraw_public(to: AztecAddress, amount: u128, market_id: Field, collateral_asset: AztecAddress) {\n        let _ = Lending::at(context.this_address())\n            ._withdraw(context.msg_sender(), to, amount, market_id, collateral_asset)\n            .call(&mut context);\n        let _ = Token::at(collateral_asset)\n        .transfer_in_public(context.this_address(), to, amount, 0)\n        .call(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _withdraw(owner: AztecAddress, to: AztecAddress, amount: u128, market_id: Field, collateral_asset: AztecAddress) {\n        let asset_loc = storage.market_assets.at(market_id).at(collateral_asset);\n        let asset: Asset = asset_loc.read();\n        assert(asset.asset_address == collateral_asset, \"Invalid asset or market id\");\n        \n        Lending::at(context.this_address()).update_accumulators(market_id, collateral_asset).call(&mut context);\n\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(collateral_asset);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n\n        let scaled_user_deposited_amount_loc = storage.scaled_deposited_assets.at(market_id).at(collateral_asset).at(owner);\n        let scaled_user_deposited_amount: u128 = scaled_user_deposited_amount_loc.read();\n        let user_deposited_amount = (scaled_user_deposited_amount * deposit_accumulator.value) / 1000000000 as u128 ;\n        assert(user_deposited_amount >= amount, \"Insufficient balance\");\n\n        let total_collateral_value: u128 = Lending::at(context.this_address())._compute_total_collateral_value(market_id, owner).call(&mut context);\n\n        let collateral_debt_value = Lending::at(context.this_address())._compute_collateral_debt_value(market_id, owner).call(&mut context);\n\n        let collateral_price = PriceFeed::at(asset.oracle).get_price(0).view(&mut context).price;\n        let withdraw_amount_value = (amount * collateral_price) / 1000000000 as u128;\n\n        let total_collateral_value_after_withdraw = total_collateral_value - withdraw_amount_value;\n\n        assert(collateral_debt_value <= total_collateral_value_after_withdraw, \"Insufficient collateral\");\n\n        let scaled_withdraw_amount = (amount * 1000000000 as u128) / deposit_accumulator.value;\n        scaled_user_deposited_amount_loc.write(scaled_user_deposited_amount - scaled_withdraw_amount);\n\n        let scaled_total_deposited_asset_loc = storage.scaled_total_deposited_assets.at(market_id).at(collateral_asset);\n        let scaled_total_deposited_asset: u128 = scaled_total_deposited_asset_loc.read();\n        scaled_total_deposited_asset_loc.write(scaled_total_deposited_asset - scaled_withdraw_amount);\n    }\n\n    #[public]\n    #[internal]\n    fn _compute_total_collateral_value(market_id: Field, owner: AztecAddress) -> u128 {\n        let mut total_collateral_value: u128 = 0 as u128;\n\n        let market_assets_list_len_loc = storage.market_assets_list_len.at(market_id);\n        let market_assets_list_len: u64 = market_assets_list_len_loc.read();\n        let market_assets_list_loc = storage.market_assets_list.at(market_id);\n\n        for i in 0..market_assets_list_len {\n            let market_asset_loc = market_assets_list_loc.at(i);\n            let market_asset: AztecAddress = market_asset_loc.read();\n            Lending::at(context.this_address()).update_accumulators(market_id, market_asset).call(&mut context);\n            let collateral_asset_loc = storage.market_assets.at(market_id).at(market_asset);\n            let collateral_asset: Asset = collateral_asset_loc.read();\n            let collateral_price = PriceFeed::at(collateral_asset.oracle).get_price(0).view(&mut context).price;\n            let scaled_collateral_amount_loc = storage.scaled_deposited_assets.at(market_id).at(market_asset).at(owner);\n            let scaled_collateral_amount: u128 = scaled_collateral_amount_loc.read();\n            let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(market_asset);\n            let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n            let collateral_amount = (scaled_collateral_amount * deposit_accumulator.value) / 1000000000 as u128;\n            total_collateral_value += (collateral_amount * collateral_price);\n        }\n        total_collateral_value / 1000000000 as u128\n    }\n\n    #[public]\n    #[internal]\n    fn _compute_collateral_debt_value(market_id: Field, owner: AztecAddress) -> u128 {\n        let mut min_collateral_value: u128 = 0 as u128;\n\n        let market_assets_list_len_loc = storage.market_assets_list_len.at(market_id);\n        let market_assets_list_len: u64 = market_assets_list_len_loc.read();\n        let market_assets_list_loc = storage.market_assets_list.at(market_id);\n\n        for i in 0..market_assets_list_len {\n            let market_asset_loc = market_assets_list_loc.at(i);\n            let market_asset: AztecAddress = market_asset_loc.read();\n            Lending::at(context.this_address()).update_accumulators(market_id, market_asset).call(&mut context);\n            let debt_asset_loc = storage.market_assets.at(market_id).at(market_asset);\n            let debt_asset: Asset = debt_asset_loc.read();\n            if(debt_asset.is_borrowable) {\n                let scaled_user_borrowed_amount_loc = storage.scaled_borrowed_assets.at(market_id).at(market_asset).at(owner);\n                let scaled_user_borrowed_amount: u128 = scaled_user_borrowed_amount_loc.read();\n                let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(market_asset);\n                let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n                let user_borrowed_amount = (scaled_user_borrowed_amount * borrow_accumulator.value) / 1000000000 as u128;\n                \n                let borrow_price= PriceFeed::at(debt_asset.oracle).get_price(0).view(&mut context).price;\n\n                min_collateral_value += (user_borrowed_amount * borrow_price * 10000 as u128) / debt_asset.loan_to_value;\n            }\n        }\n        min_collateral_value / 1000000000 as u128\n    }\n\n    #[private]\n    fn deposit_private(\n        from: AztecAddress,\n        amount: u128,\n        nonce: Field,\n        secret: Field,\n        on_behalf_of: Field,\n        market_id: Field,\n        collateral_asset: AztecAddress,\n    ) {\n        let on_behalf_of =\n            compute_identifier(secret, on_behalf_of, context.msg_sender().to_field());\n        let _res = Token::at(collateral_asset)\n            .transfer_to_public(from, context.this_address(), amount, nonce)\n            .call(&mut context);\n        Lending::at(context.this_address())\n            ._deposit(AztecAddress::from_field(on_behalf_of), amount, market_id,collateral_asset)\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    fn deposit_public(\n        amount: u128,\n        nonce: Field,\n        on_behalf_of: Field,\n        market_id: Field,\n        collateral_asset: AztecAddress,\n    ) {\n        // docs:start:public_to_public_call\n        let _ = Token::at(collateral_asset)\n            .transfer_in_public(context.msg_sender(), context.this_address(), amount, nonce)\n            .call(&mut context);\n        // docs:end:public_to_public_call\n        let _ = Lending::at(context.this_address())\n            ._deposit(AztecAddress::from_field(on_behalf_of), amount, market_id, collateral_asset)\n            .call(&mut context);\n    }\n\n    #[public]\n    #[internal]\n    fn _deposit(owner: AztecAddress, amount: u128, market_id: Field, collateral_asset: AztecAddress) {\n        let asset_loc = storage.market_assets.at(market_id).at(collateral_asset);\n        let asset: Asset = asset_loc.read();\n        assert(asset.asset_address == collateral_asset, \"Invalid asset or market id\");\n        \n        Lending::at(context.this_address()).update_accumulators(market_id, collateral_asset).call(&mut context);\n\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(collateral_asset);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n\n        let total_deposited_assets = Lending::at(context.this_address()).compute_total_deposited_assets(market_id, collateral_asset, deposit_accumulator).call(&mut context);\n        assert((total_deposited_assets + amount) < asset.deposit_cap, \"Deposit cap exceeded\");\n\n        let scaled_user_deposited_asset_loc = storage.scaled_deposited_assets.at(market_id).at(collateral_asset).at(owner);\n        let scaled_user_deposited_asset: u128 = scaled_user_deposited_asset_loc.read();\n        let scaled_amount = (amount * 1000000000 as u128) / deposit_accumulator.value;\n        scaled_user_deposited_asset_loc.write(scaled_user_deposited_asset + scaled_amount);\n\n        let scaled_total_deposited_asset_loc = storage.scaled_total_deposited_assets.at(market_id).at(collateral_asset);\n        let scaled_total_deposited_asset: u128 = scaled_total_deposited_asset_loc.read();\n        scaled_total_deposited_asset_loc.write(scaled_total_deposited_asset + scaled_amount);\n    }\n\n    #[public]\n    fn compute_total_deposited_assets(market_id: Field, asset_address: AztecAddress, deposit_accumulator: Accumulator) -> u128 {\n        let scaled_total_deposited_asset_static = storage.scaled_total_deposited_assets.at(market_id).at(asset_address).read();\n        let total_deposited_asset = scaled_total_deposited_asset_static * deposit_accumulator.value / 1000000000 as u128;\n        total_deposited_asset\n    }\n\n    #[public]\n    fn add_asset(market_id: Field, asset_address: AztecAddress, oracle: AztecAddress, loan_to_value: u128, is_borrowable: bool, optimal_utilization_rate: u128, under_optimal_slope: u128, over_optimal_slope: u128, deposit_cap: u128) {\n        let asset_loc = storage.market_assets.at(market_id).at(asset_address);\n        let asset: Asset = asset_loc.read();\n\n        assert(loan_to_value <= (10000 as u128));\n\n        asset_loc.write(Asset {\n            asset_address,\n            oracle,\n            loan_to_value,\n            is_borrowable,\n            optimal_utilization_rate,\n            under_optimal_slope,\n            over_optimal_slope,\n            deposit_cap,\n        });\n\n        let market_assets_list_len_loc = storage.market_assets_list_len.at(market_id);\n        let market_assets_list_len: u64 = market_assets_list_len_loc.read();\n        let market_assets_list_loc = storage.market_assets_list.at(market_id).at(market_assets_list_len);\n        market_assets_list_loc.write(asset_address);\n        market_assets_list_len_loc.write(market_assets_list_len + 1);\n\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(asset_address);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n\n        assert(deposit_accumulator.last_updated_ts == 0);\n        assert(deposit_accumulator.value == 0 as u128);\n\n        deposit_accumulator_loc.write(Accumulator {\n            // 10**9\n            value: 1000000000 as u128,\n            last_updated_ts: context.timestamp(),\n        });\n\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n\n        assert(borrow_accumulator.last_updated_ts == 0);\n        assert(borrow_accumulator.value == 0 as u128);\n\n        borrow_accumulator_loc.write(Accumulator {\n            // 10**9\n            value: 1000000000 as u128,\n            last_updated_ts: context.timestamp(),\n        });\n    }\n\n\n    // Create a position.\n    #[public]\n    fn update_accumulators(market_id: Field, asset_address: AztecAddress) {\n        let asset_loc = storage.market_assets.at(market_id).at(asset_address);\n        let asset: Asset = asset_loc.read();\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(asset_address);\n        let mut deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let mut borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n\n        let timestamp = context.timestamp();\n        let time_delta = timestamp - deposit_accumulator.last_updated_ts;\n\n        // Only update if time has passed.\n        if !(time_delta == 0) {\n            let precision = 1000000000 as u128; // 10**9\n            let utilization_rate = _compute_utilization_rate(market_id, asset_address, precision, deposit_accumulator, borrow_accumulator);\n            let borrow_rate_per_year = _compute_borrow_rate(asset, utilization_rate, precision);\n            // TODO: let supply_rate_per_year = borrow_rate_per_year * utilization_rate * (1 - reserve_factor);\n            let supply_rate_per_year = (borrow_rate_per_year * utilization_rate) / precision;\n\n            let new_borrow_accumulator = ((borrow_accumulator.value * borrow_rate_per_year * time_delta as u128) / 31536000 as u128) / precision;\n            let new_deposit_accumulator = ((deposit_accumulator.value * supply_rate_per_year * time_delta as u128) / 31536000 as u128) / precision;\n\n            borrow_accumulator.value += new_borrow_accumulator;\n            borrow_accumulator.last_updated_ts = timestamp;\n            borrow_accumulator_loc.write(borrow_accumulator);\n            deposit_accumulator.value += new_deposit_accumulator;\n            deposit_accumulator.last_updated_ts = timestamp;\n            deposit_accumulator_loc.write(deposit_accumulator);\n        }\n    }\n\n    #[public]\n    #[internal]\n    fn _compute_utilization_rate(market_id: Field, asset_address: AztecAddress, precision: u128, deposit_accumulator: Accumulator, borrow_accumulator: Accumulator) -> u128 {\n        \n        let scaled_total_deposited_asset = storage.scaled_total_deposited_assets.at(market_id).at(asset_address).read();\n        let scaled_total_borrowed_asset = storage.scaled_total_borrowed_assets.at(market_id).at(asset_address).read();\n\n        let total_deposited_assets = (scaled_total_deposited_asset * deposit_accumulator.value) / precision;\n        let total_borrowed_assets = (scaled_total_borrowed_asset * borrow_accumulator.value) / precision;\n        let mut utilization_rate = 0 as u128;\n        if (total_borrowed_assets != 0) {\n            utilization_rate = (total_borrowed_assets * precision) / total_deposited_assets;\n        } else {\n            utilization_rate = 0;\n        }\n\n        utilization_rate\n    }\n\n    #[public]\n    #[internal]\n    fn _compute_borrow_rate(asset: Asset, utilization_rate: u128, precision: u128) -> u128 {\n        let mut rate = 0 as u128;\n        if utilization_rate < asset.optimal_utilization_rate {\n            // rate = base + utilization * slope1 / optimal No base for now\n            rate = (utilization_rate * asset.under_optimal_slope) / asset.optimal_utilization_rate;\n        } else {\n            // rate = base +slope1 + (utilization - optimal) * slope2 / (1 - optimal) No base for now\n            rate = asset.under_optimal_slope + (utilization_rate - asset.optimal_utilization_rate) * asset.over_optimal_slope / (precision - asset.optimal_utilization_rate);\n        }\n        rate\n    }\n\n    #[utility]\n    #[view]\n    unconstrained fn get_position(owner: AztecAddress, market_id: Field, asset_address: AztecAddress) -> pub Position {\n        let scaled_user_deposited_asset_loc = storage.scaled_deposited_assets.at(market_id).at(asset_address).at(owner);\n        let scaled_user_deposited_asset: u128 = scaled_user_deposited_asset_loc.read();\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(asset_address);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n        let collateral = (scaled_user_deposited_asset * deposit_accumulator.value) / 1000000000 as u128;\n        let scaled_user_borrowed_amount_loc = storage.scaled_borrowed_assets.at(market_id).at(asset_address).at(owner);\n        let scaled_user_borrowed_amount: u128 = scaled_user_borrowed_amount_loc.read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n        let debt = (scaled_user_borrowed_amount * borrow_accumulator.value) / 1000000000 as u128;\n        Position { collateral, scaled_debt:scaled_user_borrowed_amount, debt }\n    }\n\n    #[utility]\n    #[view]\n    unconstrained fn get_total_deposited_assets(market_id: Field, asset_address: AztecAddress) -> u128 {\n        let scaled_total_deposited_asset = storage.scaled_total_deposited_assets.at(market_id).at(asset_address).read();\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(asset_address);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n        let total_deposited_assets = (scaled_total_deposited_asset * deposit_accumulator.value) / 1000000000 as u128;\n        total_deposited_assets\n    }\n\n    #[utility]\n    #[view]\n    unconstrained fn get_total_borrowed_assets(market_id: Field, asset_address: AztecAddress) -> u128 {\n        let scaled_total_borrowed_asset = storage.scaled_total_borrowed_assets.at(market_id).at(asset_address).read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n        let total_borrowed_assets = (scaled_total_borrowed_asset * borrow_accumulator.value) / 1000000000 as u128;\n        total_borrowed_assets\n    }\n\n\n    #[utility]\n    #[view]\n    unconstrained fn get_accumulators(market_id: Field, asset_address: AztecAddress) -> (Accumulator, Accumulator) {\n        let deposit_accumulator_loc = storage.deposit_accumulators.at(market_id).at(asset_address);\n        let deposit_accumulator: Accumulator = deposit_accumulator_loc.read();\n        let borrow_accumulator_loc = storage.borrow_accumulators.at(market_id).at(asset_address);\n        let borrow_accumulator: Accumulator = borrow_accumulator_loc.read();\n        (deposit_accumulator, borrow_accumulator)\n    }\n}\n","path":"/home/jean/work/noir/comet/contracts/src/main.nr"},"56":{"source":"use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/capsules/mod.nr"},"57":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static: true }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr"},"64":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"65":{"source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(\n            gas_opts.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_FIELD_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(\n            gas_opts.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_FIELD_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\nunconstrained fn call_static(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_static_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"66":{"source":"use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr"},"67":{"source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/context/utility_context.nr"},"71":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/hash.nr"},"88":{"source":"use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"92":{"source":"use crate::{\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_notes` utility function PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    // TODO(https://github.com/noir-lang/noir/issues/7912): Doing the following unfortunately doesn't work. Once\n    // the issue is fixed uncomment the following and remove the workaround from TS (look for the issue link in the\n    // codebase).\n    // let utility: fn(FunctionDefinition) -> () = crate::macros::functions::utility;\n    // quote {\n    //     #[$utility]\n    //     unconstrained fn sync_notes() {\n    //     }\n    // }\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[aztec::macros::functions::utility]\n        unconstrained fn sync_notes() { }\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/aztec.nr"},"93":{"source":"use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr"},"96":{"source":"use crate::macros::utils::{\n    add_to_field_slice, AsStrQuote, compute_fn_selector, is_fn_private, is_fn_view,\n};\nuse std::meta::{type_of, unquote};\n\ncomptime global FROM_FIELD: TypedExpr = {\n    let from_field_trait = quote { protocol_types::traits::FromField }.as_trait_constraint();\n    let function_selector_typ =\n        quote { protocol_types::abis::function_selector::FunctionSelector }.as_type();\n    function_selector_typ.get_trait_impl(from_field_trait).unwrap().methods().filter(|m| {\n        m.name() == quote { from_field }\n    })[0]\n        .as_typed_expr()\n};\n\ncomptime global SERIALIZED_ARGS_SLICE_NAME: Quoted = quote { serialized_args };\n\npub comptime fn stub_fn(f: FunctionDefinition) -> Quoted {\n    let is_static_call = is_fn_view(f);\n    let is_void = f.return_type() == type_of(());\n\n    if is_fn_private(f) {\n        if is_static_call {\n            if is_void {\n                create_private_static_void_stub(f)\n            } else {\n                create_private_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_private_void_stub(f)\n            } else {\n                create_private_stub(f)\n            }\n        }\n    } else {\n        if is_static_call {\n            if is_void {\n                create_public_static_void_stub(f)\n            } else {\n                create_public_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_public_void_stub(f)\n            } else {\n                create_public_stub(f)\n            }\n        }\n    }\n}\n\n/// Utility function creating stubs used by all the stub functions in this file.\ncomptime fn create_stub_base(\n    f: FunctionDefinition,\n) -> (Quoted, Quoted, Quoted, Quoted, u32, Field) {\n    let fn_name = f.name();\n    let fn_parameters = f.parameters();\n    let fn_parameters_list =\n        fn_parameters.map(|(name, typ): (Quoted, Type)| quote { $name: $typ }).join(quote {,});\n\n    // Example of what the fold(...) below will generate for `target_address` and `fee_juice_limit_per_tx` function\n    // parameters:\n    // ```\n    // let mut serialized_args =  &[];\n    // serialized_args = serialized_args.append(aztec::protocol_types::traits::Serialize::serialize(target_address));\n    // serialized_args = serialized_args.push_back(fee_juice_limit_per_tx as Field);\n    // ```\n    let serialized_args_slice_construction = fn_parameters.fold(\n        quote {\n            let mut $SERIALIZED_ARGS_SLICE_NAME = &[];\n        },\n        |args, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let arg_to_append = add_to_field_slice(SERIALIZED_ARGS_SLICE_NAME, name, typ);\n            quote {\n                $args\n                $arg_to_append\n            }\n        },\n    );\n\n    let (fn_name_str, _) = fn_name.as_str_quote();\n    let fn_name_len: u32 = unquote!(quote { $fn_name_str.as_bytes().len()});\n    let fn_selector: Field = compute_fn_selector(f);\n\n    (\n        fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len,\n        fn_selector,\n    )\n}\n\ncomptime fn create_private_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_private_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_public_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_public_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/functions/call_interface_stubs.nr"},"97":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr"},"100":{"source":"use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr"},"102":{"source":"use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/notes.nr"},"103":{"source":"use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/storage.nr"},"104":{"source":"use std::meta::unquote;\n\npub(crate) comptime fn get_fn_visibility(f: FunctionDefinition) -> Quoted {\n    if f.has_named_attribute(\"private\") {\n        quote { private }\n    } else if f.has_named_attribute(\"public\") {\n        quote { public }\n    } else {\n        panic(f\"Function is neither private nor public\")\n    }\n}\n\npub(crate) comptime fn is_fn_private(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"private\")\n}\n\npub(crate) comptime fn is_fn_public(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"public\")\n}\n\npub(crate) comptime fn is_fn_utility(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"utility\")\n}\n\npub(crate) comptime fn is_fn_contract_library_method(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"contract_library_method\")\n}\n\npub(crate) comptime fn is_fn_test(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"test\")\n}\n\npub(crate) comptime fn is_fn_view(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"view\")\n}\n\npub(crate) comptime fn is_fn_internal(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"internal\")\n}\n\npub(crate) comptime fn is_fn_initializer(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"initializer\")\n}\n\npub(crate) comptime fn fn_has_noinitcheck(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"noinitcheck\")\n}\n\n/// Takes a function body as a collection of expressions, and alters it by prepending and appending quoted values.\npub(crate) comptime fn modify_fn_body(body: [Expr], prepend: Quoted, append: Quoted) -> Expr {\n    // We need to quote the body before we can alter its contents, so we fold it by quoting each expression.\n    let mut body_quote = body.fold(quote {}, |full_quote: Quoted, expr: Expr| {\n        let expr_quote = expr.quoted();\n        quote {\n                $full_quote\n                $expr_quote\n            }\n    });\n    body_quote = quote {\n        {\n            $prepend\n            $body_quote\n            $append\n        }\n    };\n    let body_expr = body_quote.as_expr();\n    body_expr.expect(f\"Body is not an expression: {body_quote}\")\n}\n\npub(crate) comptime fn add_to_field_slice(slice_name: Quoted, name: Quoted, typ: Type) -> Quoted {\n    if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        quote { $slice_name = $slice_name.push_back($name as Field); }\n    } else if typ.as_data_type().is_some() {\n        // We invoke serialize as a static trait function rather than calling $name.serialize() directly in the quote\n        // to avoid \"trait not in scope\" compiler warnings.\n        quote { $slice_name = $slice_name.append(aztec::protocol_types::traits::Serialize::serialize($name)); }\n    } else if typ.as_array().is_some() {\n        let (element_type, _) = typ.as_array().unwrap();\n        let serialized_name = f\"{name}_serialized\".quoted_contents();\n        // We invoke serialize as a static trait function rather than calling x.serialize() directly in the quote\n        // to avoid \"trait not in scope\" compiler warnings.\n        quote {\n            let $serialized_name = $name.map(|x: $element_type | aztec::protocol_types::traits::Serialize::serialize(x));\n            for i in 0..$name.len() {\n                $slice_name = $slice_name.append($serialized_name[i].as_slice());\n            }\n        }\n    } else if typ.as_str().is_some() {\n        quote {\n            $slice_name = $slice_name.append($name.as_bytes().map(| byte: u8 | byte as Field).as_slice());\n        }\n    } else {\n        panic(\n            f\"Cannot add to slice: unsupported type {typ} variable {name}\",\n        )\n    }\n}\n\n/// Adds a value to a hash::ArgsHasher. Structs and values inside arrays are required to implement the Serialize trait.\npub(crate) comptime fn add_to_hasher(hasher_name: Quoted, name: Quoted, typ: Type) -> Quoted {\n    if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        quote { $hasher_name.add($name as Field); }\n    } else if typ.as_data_type().is_some() {\n        quote { $hasher_name.add_multiple(dep::aztec::protocol_types::traits::Serialize::serialize($name)); }\n    } else if typ.as_array().is_some() {\n        let (element_type, _) = typ.as_array().unwrap();\n        let serialized_name = f\"{name}_serialized\".quoted_contents();\n        quote {\n           let $serialized_name = $name.map(|x: $element_type | dep::aztec::protocol_types::traits::Serialize::serialize(x));\n            for i in 0..$name.len() {\n                $hasher_name.add_multiple($serialized_name[i]);\n            }\n        }\n    } else if typ.as_str().is_some() {\n        quote {\n            $hasher_name.add_multiple($name.as_bytes().map(| byte: u8 | byte as Field));\n        }\n    } else {\n        panic(\n            f\"Cannot add to hasher: unsupported type {typ} of variable {name}\",\n        )\n    }\n}\n\ncomptime fn signature_of_type(typ: Type) -> Quoted {\n    if typ.is_field() {\n        quote {Field}\n    } else if typ.as_integer().is_some() {\n        let (is_signed, bit_size) = typ.as_integer().unwrap();\n        if is_signed {\n            f\"i{bit_size}\".quoted_contents()\n        } else {\n            f\"u{bit_size}\".quoted_contents()\n        }\n    } else if typ.is_bool() {\n        quote {bool}\n    } else if typ.as_str().is_some() {\n        let str_len_typ = typ.as_str().unwrap();\n        let str_len = str_len_typ.as_constant().unwrap();\n        f\"str<{str_len}>\".quoted_contents()\n    } else if typ.as_array().is_some() {\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let element_typ_quote = signature_of_type(element_type);\n        f\"[{element_typ_quote};{array_len}]\".quoted_contents()\n    } else if typ.as_data_type().is_some() {\n        let (s, generics) = typ.as_data_type().unwrap();\n        let field_signatures = s\n            .fields(generics)\n            .map(|(_, typ): (Quoted, Type)| signature_of_type(typ))\n            .join(quote {,});\n        f\"({field_signatures})\".quoted_contents()\n    } else if typ.as_tuple().is_some() {\n        // Note that tuples are handled the same way as structs\n        let types = typ.as_tuple().unwrap();\n        let field_signatures = types.map(|typ: Type| signature_of_type(typ)).join(quote {,});\n        f\"({field_signatures})\".quoted_contents()\n    } else {\n        panic(f\"Unsupported type {typ}\")\n    }\n}\n\npub(crate) trait AsStrQuote {\n    fn as_str_quote(self) -> (Self, u32);\n}\n\nimpl<let N: u32, Env> AsStrQuote for Quoted {\n    // Used to convert an arbitrary quoted type into a quoted string, removing whitespace between tokens\n    comptime fn as_str_quote(self) -> (Quoted, u32) {\n        let tokens = self.tokens();\n        let mut acc: [u8] = &[];\n        let mut total_len: u32 = 0;\n        for token in tokens {\n            let token_as_fmt_str = f\"{token}\";\n            let token_as_str = unquote!(quote {$token_as_fmt_str});\n            let token_len = unquote!(quote { $token_as_str.as_bytes().len() });\n            let token_as_bytes = unquote!(quote { $token_as_str.as_bytes().as_slice() });\n            total_len += token_len;\n            acc = acc.append(token_as_bytes);\n        }\n        let result = unquote!(\n            quote {\n                let signature_as_array: [u8; $total_len] = $acc.as_array();\n                signature_as_array.as_str_unchecked()\n            },\n        );\n        (quote { $result }, total_len)\n    }\n}\n\npub(crate) comptime fn compute_fn_selector(f: FunctionDefinition) -> Field {\n    // The function selector is computed from the function signature, which is made up of the function name and types of\n    // parameters, but not including the return type. For example, given:\n    //\n    // fn foo(a: Field, b: AztecAddress) -> Field\n    //\n    // The signature will be \"foo(Field,AztecAddress)\".\n    let fn_name = f.name();\n    let args_signatures =\n        f.parameters().map(|(_, typ): (Quoted, Type)| signature_of_type(typ)).join(quote {,});\n    let signature_quote = quote { $fn_name($args_signatures) };\n    let (signature_str_quote, _) = signature_quote.as_str_quote();\n\n    let computation_quote = quote {\n        protocol_types::traits::ToField::to_field(protocol_types::abis::function_selector::FunctionSelector::from_signature($signature_str_quote))\n    };\n    unquote!(computation_quote)\n}\n\npub(crate) comptime fn compute_event_selector(s: TypeDefinition) -> Field {\n    // The event selector is computed from the type signature of the struct in the event, similar to how one might type\n    // the constructor function. For example, given:\n    //\n    // struct Foo {\n    //   a: Field,\n    //   b: AztecAddress,\n    // }\n    //\n    // The signature will be \"Foo(Field,AztecAddress)\".\n    let event_name = s.name();\n    let args_signatures = s\n        .fields_as_written()\n        .map(|(_, typ): (Quoted, Type)| {\n            // signature_of_type can handle structs, so this supports nested structs\n            // FIXME: Field generics are not handled here!\n            signature_of_type(typ)\n        })\n        .join(quote {,});\n    let signature_quote = quote { $event_name($args_signatures) };\n    let (signature_str_quote, _) = signature_quote.as_str_quote();\n\n    let computation_quote = quote {\n        protocol_types::traits::ToField::to_field(protocol_types::abis::event_selector::EventSelector::from_signature($signature_str_quote))\n    };\n    unquote!(computation_quote)\n}\n\n/// Returns how many storage slots a type needs to reserve for itself. State variables must implement the Storage trait\n/// for slots to be allocated for them.\npub(crate) comptime fn get_storage_size(typ: Type) -> u32 {\n    // We create a type variable for the storage size. We can't simply read the value used in the implementation because\n    // it may not be a constant (e.g. N + 1). We then bind it to the implementation of the Storage trait.\n    let storage_size = std::meta::typ::fresh_type_variable();\n    assert(\n        typ.implements(quote { crate::state_vars::Storage<$storage_size> }.as_trait_constraint()),\n        f\"Attempted to fetch storage size, but {typ} does not implement the Storage trait\",\n    );\n\n    storage_size.as_constant().unwrap()\n}\n\npub(crate) comptime fn module_has_storage(m: Module) -> bool {\n    m.structs().any(|s: TypeDefinition| {\n        s.has_named_attribute(\"storage\") | s.has_named_attribute(\"storage_no_init\")\n    })\n}\n\npub(crate) comptime fn module_has_initializer(m: Module) -> bool {\n    m.functions().any(|f: FunctionDefinition| is_fn_initializer(f))\n}\n\npub(crate) comptime fn is_note(typ: Type) -> bool {\n    typ.as_data_type().map_or(false, |struc: (TypeDefinition, [Type])| {\n        let (def, _) = struc;\n        def.has_named_attribute(\"note\")\n            | def.has_named_attribute(\"partial_note\")\n            | def.has_named_attribute(\"custom_note\")\n    })\n}\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `noir-protocol-circuits/crates/types/src/meta/mod.nr`. We maintain separate\n/// copies because importing it here from there would cause the `target_trait` to be interpreted in the context\n/// of the protocol circuits types crate, making it impossible to compile code for traits from this crate\n/// (e.g. NoteType).\npub(crate) comptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Type does not implement trait\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/macros/utils.nr"},"105":{"source":"use protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr"},"106":{"source":"use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash =\n            compute_unique_note_hash(nonce, compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash));\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.nonce, note_and_data.nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == first_note_and_data.nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == second_note_and_data.nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr"},"107":{"source":"use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    pending_partial_notes.for_each(|i, pending_partial_note: DeliveredPendingPartialNote| {\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log sans the extra\n            // fields) to get the complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                // temporary node connectivity issue - is simply throwing good enough here?\n                assert(\n                    deliver_note(\n                        contract_address,\n                        pending_partial_note.storage_slot,\n                        discovered_note.nonce,\n                        complete_packed_note,\n                        discovered_note.note_hash,\n                        discovered_note.inner_nullifier,\n                        log.tx_hash,\n                        pending_partial_note.recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr"},"109":{"source":"use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{\n            ComputeNoteHashAndNullifier,\n            partial_notes::process_partial_note_private_msg,\n            pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n            private_notes::process_private_note_msg,\n        },\n        encoding::decode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        msg_type::{\n            PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n        },\n    },\n    oracle::{logs::store_private_event_log, message_discovery::sync_notes},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `syncNotes` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    sync_notes(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get the logs from the capsule array and process them one by one\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    logs.for_each(|i, log: PendingTaggedLog| {\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n        logs.remove(i);\n    });\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(log_plaintext);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            pending_tagged_log.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        // In the case of events, the msg metadata is the event selector.\n        let event_selector = EventSelector::from_field(msg_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            msg_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n            pending_tagged_log.tx_index_in_block,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_logs.nr"},"110":{"source":"use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n        // issue, and we should perhaps not have marked the tag index as taken.\n        assert(\n            oracle::message_discovery::deliver_note(\n                contract_address,\n                storage_slot,\n                discovered_note.nonce,\n                packed_note,\n                discovered_note.note_hash,\n                discovered_note.inner_nullifier,\n                tx_hash,\n                recipient,\n            ),\n            \"Failed to deliver note\",\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr"},"111":{"source":"// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\nglobal MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/encoding.nr"},"112":{"source":"use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr"},"133":{"source":"use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr"},"136":{"source":"use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"139":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr"},"140":{"source":"use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr"},"141":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(notifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"142":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"143":{"source":"/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr"},"144":{"source":"use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"149":{"source":"use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"150":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"151":{"source":"use crate::messages::encoding::MAX_MESSAGE_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        msg_content,\n        tx_hash,\n        log_index_in_tx,\n        tx_index_in_block,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr"},"152":{"source":"use crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn sync_notes(pending_tagged_log_array_base_slot: Field) {\n    sync_notes_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr"},"154":{"source":"use crate::{\n    note::{note_interface::NoteType, note_metadata::NoteMetadata, retrieved_note::RetrievedNote},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::IndexedTaggingSecret,\n    traits::{FromField, Packable},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Field; ORACLE_RETURN_FIELD_LENGTH] {\n    // This wrapper exists to extract the ORACLE_RETURN_FIELD_LENGTH generic numeric param into a value and pass it to\n    // the oracle, so that it knows how big the return array must be.\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        ORACLE_RETURN_FIELD_LENGTH,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let MAX_NOTES: u32, let ORACLE_RETURN_FIELD_LENGTH: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    _placeholder_fields: [Field; ORACLE_RETURN_FIELD_LENGTH], // TODO: Compute this value automatically from MAX_NOTES\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let fields: [_; ORACLE_RETURN_FIELD_LENGTH] = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n\n    let mut opt_notes = [Option::none(); MAX_NOTES];\n    for i in 0..opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let maybe_nonce = fields[read_offset];\n            let maybe_note_hash_counter = fields[read_offset + 1] as u32;\n            let packed_note = array::subarray(fields, read_offset + 2);\n\n            let note = Note::unpack(packed_note);\n            let retrieved_note = RetrievedNote {\n                note,\n                contract_address,\n                metadata: NoteMetadata::from_raw_data(maybe_note_hash_counter != 0, maybe_nonce),\n            };\n\n            opt_notes[i] = Option::some(retrieved_note);\n        };\n    }\n    opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"156":{"source":"use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr"},"157":{"source":"use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"159":{"source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"168":{"source":"use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"182":{"source":"/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/array/append.nr"},"185":{"source":"/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr"},"186":{"source":"use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr"},"188":{"source":"use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr"},"189":{"source":"// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr"},"191":{"source":"use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/field.nr"},"193":{"source":"use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/aztec/src/utils/point.nr"},"204":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/home/jean/nargo/github.com/noir-lang/poseidon/v0.1.0/src/poseidon2.nr"},"221":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr"},"223":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"266":{"source":"use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"269":{"source":"use crate::{\n    address::{aztec_address::AztecAddress, salted_initialization_hash::SaltedInitializationHash},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    pub inner: Field,\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress,\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer),\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n    ) -> Self {\n        PartialAddress::from_field(poseidon2_hash_with_separator(\n            [contract_class_id.to_field(), salted_initialization_hash.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr"},"271":{"source":"use crate::{\n    address::aztec_address::AztecAddress, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    pub inner: Field,\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(poseidon2_hash_with_separator(\n            [salt, initialization_hash, deployer.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr"},"276":{"source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress},\n    constants::CONTRACT_INSTANCE_LENGTH,\n    contract_class_id::ContractClassId,\n    public_keys::PublicKeys,\n    traits::{Deserialize, FromField, Hash, Serialize, ToField},\n};\n\npub struct ContractInstance {\n    pub salt: Field,\n    pub deployer: AztecAddress,\n    pub contract_class_id: ContractClassId,\n    pub initialization_hash: Field,\n    pub public_keys: PublicKeys,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys.eq(other.public_keys)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        let public_keys_serialized = self.public_keys.serialize();\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            public_keys_serialized[0],\n            public_keys_serialized[1],\n            public_keys_serialized[2],\n            public_keys_serialized[3],\n            public_keys_serialized[4],\n            public_keys_serialized[5],\n            public_keys_serialized[6],\n            public_keys_serialized[7],\n            public_keys_serialized[8],\n            public_keys_serialized[9],\n            public_keys_serialized[10],\n            public_keys_serialized[11],\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys: PublicKeys::deserialize([\n                serialized[4],\n                serialized[5],\n                serialized[6],\n                serialized[7],\n                serialized[8],\n                serialized[9],\n                serialized[10],\n                serialized[11],\n                serialized[12],\n                serialized[13],\n                serialized[14],\n                serialized[15],\n            ]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    pub fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer,\n            ),\n        )\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"283":{"source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr"},"284":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    poseidon::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as poseidon::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = poseidon::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = poseidon::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"298":{"source":"use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint =\n        quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_pack & typ.implements(packable_constraint)) {\n        // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n        let name_at_one_token = collapse_to_one_token(name);\n        let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n        // We add the individual fields to the fields array\n        let pack_method = get_trait_impl_method(\n            typ,\n            quote { crate::traits::Packable<$packed_len> },\n            quote { pack },\n        );\n        let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n        for i in 0..packed_len {\n            fields = fields.push_back(quote { $packed_struct_name[$i] });\n        }\n\n        // We add the new auxiliary variable to the aux_vars array\n        aux_vars = aux_vars.push_back(packed_struct);\n    } else if typ.is_field() {\n        // For field we just add the value to fields\n        fields = fields.push_back(name);\n    } else if typ.as_integer().is_some() | typ.is_bool() {\n        // For integer and bool we just cast to Field and add the value to fields\n        fields = fields.push_back(quote { $name as Field });\n    } else if typ.as_data_type().is_some() {\n        // For struct we pref\n        let nested_struct = typ.as_data_type().unwrap();\n        let params = nested_struct.0.fields(nested_struct.1);\n        let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n            let maybe_prefixed_name = if name == quote {} {\n                // Triggered when the param name is of a value available in the current scope (e.g. a function\n                // argument) --> then we don't prefix the name with anything.\n                param_name\n            } else {\n                // Triggered when we want to prefix the param name with the `name` from function input. This\n                // can typically be `self` when implementing a method on a struct.\n                quote { $name.$param_name }\n            };\n            generate_serialize_to_fields(quote {$maybe_prefixed_name}, param_type, should_pack)\n        });\n        let struct_flattened_fields = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n        );\n        let struct_flattened_aux_vars = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n        );\n        fields = fields.append(struct_flattened_fields);\n        aux_vars = aux_vars.append(struct_flattened_aux_vars);\n    } else if typ.as_array().is_some() {\n        // For array we recursively call `generate_serialize_to_fields(...)` for each element\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        for i in 0..array_len {\n            let (element_fields, element_aux_vars) =\n                generate_serialize_to_fields(quote { $name[$i] }, element_type, should_pack);\n            fields = fields.append(element_fields);\n            aux_vars = aux_vars.append(element_aux_vars);\n        }\n    } else if typ.as_str().is_some() {\n        // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n        // then we add each byte to fields as a Field\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let as_member = name.as_expr().unwrap().as_member_access();\n        let var_name = if as_member.is_some() {\n            as_member.unwrap().1\n        } else {\n            name\n        };\n        let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n        let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n        for i in 0..str_len {\n            fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n        }\n        aux_vars = aux_vars.push_back(as_bytes);\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr"},"300":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"301":{"source":"use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr"},"310":{"source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr"},"321":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"335":{"source":"use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"339":{"source":"use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr"},"340":{"source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"356":{"source":"pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr"},"359":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"369":{"source":"use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n","path":"/home/jean/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr"},"400":{"source":"use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER},\n        hash::poseidon2_hash_with_separator,\n        traits::{Deserialize, Hash, Packable, Serialize, ToField},\n        utils::arrays::array_concat,\n    },\n};\n\n// UintNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the amount).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n/// A private note representing a numeric value associated to an account (e.g. a token balance).\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct UintNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The number stored in the note.\n    value: u128,\n}\n\nimpl NoteHash for UintNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because UintNote has just one variant (where the value is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            UintPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note = PartialUintNote {\n            commitment: private_content.compute_partial_commitment(storage_slot),\n        };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.value)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: u128, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness }\n    }\n\n    pub fn get_value(self) -> u128 {\n        self.value\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the value, since the note will be later\n    /// completed in public. This is a powerful technique for scenarios in which the value cannot be known in private\n    /// (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// The returned `PartialUintNote` value must be sent to public execution via a secure channel, since it is not\n    /// possible to verify the integrity of its contents due to it hiding information. The recommended ways to do this\n    /// are to retrieve it from public storage, or to receive it in an internal public function call.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` from `sender` so that they can\n    /// discover the note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        sender: AztecAddress,\n    ) -> PartialUintNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = UintPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        let encrypted_log =\n            note::compute_partial_note_log(private_log_content, storage_slot, recipient, sender);\n        context.emit_private_log(encrypted_log);\n\n        PartialUintNote { commitment }\n    }\n}\n\n/// The private content of a partial UintNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct UintPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of UintNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl UintPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            array_concat(self.pack(), [storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateUintPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateUintPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        UintNote::get_id()\n    }\n}\n\n/// A partial instance of a UintNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the value field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the value to the public), resulting in a UintNote that can be used like any other one (except\n/// of course that its value is known).\n#[derive(Packable, Serialize, Deserialize)]\npub struct PartialUintNote {\n    commitment: Field,\n}\n\nimpl PartialUintNote {\n    pub fn commitment(self) -> Field {\n        self.commitment\n    }\n}\n\nimpl PartialUintNote {\n    /// Completes the partial note, creating a new note that can be used like any other UintNote.\n    pub fn complete(self, value: u128, context: &mut PublicContext) {\n        // A note with a value of zero is valid, but we cannot currently complete a partial note with such a value\n        // because this will result in the completion log having its last field set to 0. Public logs currently do not\n        // track their length, and so trailing zeros are simply trimmed. This results in the completion log missing its\n        // last field (the value), and note discovery failing.\n        // TODO(#11636): remove this\n        assert(value != 0, \"Cannot complete a PartialUintNote with a value of 0\");\n\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the value). The contract will later find it by searching\n        //  for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(value));\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    fn compute_note_completion_log(self, value: u128) -> [Field; 2] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, value.to_field()]\n    }\n\n    fn compute_complete_note_hash(self, value: u128) -> Field {\n        // Here we finalize the note hash by including the (public) value into the partial note commitment. Note that we\n        // use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator(\n            [self.commitment, value.to_field()],\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\nmod test {\n    use super::{\n        PartialUintNote, PrivateUintPartialNotePrivateLogContent, UintNote,\n        UintPartialNotePrivateContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Packable},\n            utils::arrays::array_concat,\n        },\n        utils::array::subarray,\n    };\n\n    global value: u128 = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a UintNote has the same note hash as a PartialUintNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = UintNote { value, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialUintNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(value);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular UintNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular UintNote.\n\n        let note = UintNote { value, randomness, owner };\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        let partial_note = PartialUintNote { commitment };\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(value)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in UintNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(value), 1);\n\n        assert_eq(\n            array_concat(private_log_without_public_tag, public_log_without_tag),\n            note.pack(),\n        );\n    }\n}\n","path":"/home/jean/nargo/github.com/AztecProtocol/aztec-packages/v0.86.0/noir-projects/aztec-nr/uint-note/src/uint_note.nr"}}}